@using Microsoft.OpenApi.Models
@using OpenApi.Generator.CSharp
@inherits CodeTemplate<(string ClassName, IEnumerable<(string, OpenApiPathItem)> Operations)>
@{
    DisableEncoding = true;
    var apiName = GetClassName(Model, "Api");
}
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

#nullable enable

namespace @GetNamespace("Api", Model.ClassName)
{
@GetUsings("    ", "Api", "Configuration", "Client.Request", "Model", "Types")

    public partial class @(apiName) : BaseApi<@(apiName)>
    {
        public @(apiName)(IConnection connection, ILogger<@(apiName)> logger) : base(connection, logger)
        {}

   @foreach (var pathInstance in GetPathes(Model))
   {
    @foreach (var operation in pathInstance.GetOperations())
    {
            var returnType = operation.GetReturnType();
            var arguments = operation.GetFunctionArguments();
            var operationName = operation.GetOperationName(pathInstance.GetPathAsSubPaths()[^1]);
            var operationType = operation.GetOperationType();
            var path = pathInstance.GetOperationPath();
@:@(operation.GetOperationSummary("        ", operationName))
        @:public virtual async Task<@(returnType)> @(operationName)(@(FormatArguments(arguments)))
        @:    => await Execute<@returnType>(HttpMethod.@(operationType), "@(path)",
        @:        async rb => await rb
                foreach (var parameter in operation.GetParameters())
                {
                    var parameterType = parameter.In switch
                    {
                        ParameterLocation.Query => "Query",
                        ParameterLocation.Header => "Header",
                        ParameterLocation.Path => "Path",
                        ParameterLocation.Cookie => "Cookie",
                        var param => param.ToString()
                    };

        @:        .Add@(parameterType)Parameter("(@(parameter.OriginalName))", @(parameter.Name))
                }

                var requestParameters = operation.GetRequestBodyParameters();
                if(requestParameters.Count() > 1)
                {
        @:        .SetRequestBodyMediaType("@(operation.GetRequestBodyMediaType())")
                }
                foreach (var requestParameter in requestParameters)
                {
        @:        .AddRequestBody(nameof(@(requestParameter.Name)), @(requestParameter.Name), "@(requestParameter.MediaType)")
                }
                foreach(var response in operation.GetResponseTypes())
                {
                    if(string.IsNullOrWhiteSpace(response.MediaType))
                    {
        @:        .AddResponseMap<@response.Type>("@response.StatusCode")
                    }
                    else
                    {
        @:        .AddResponseMap<@response.Type>("@response.StatusCode", "@response.MediaType")
                    }
                }
        @:        .GetAwaiter()
        @:    , cancellationToken);
        @:
    }
    }
 }
}