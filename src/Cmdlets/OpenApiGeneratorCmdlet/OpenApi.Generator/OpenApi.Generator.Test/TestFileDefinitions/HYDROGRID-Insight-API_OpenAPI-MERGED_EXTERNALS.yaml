openapi: "3.0.0"
info:
  version: 1.0.0
  title: HYDROGRID Insight API
  description: |
    This is the [HYDROGRID Insight](https://hydrogrid.eu) API documentation and specification.

    <h1>Documentation</h1>
    <h2>Data Exchange Format</h2>
    <p>The actual telemetry data of reservoirs and control units (gates and turbines) is sent to HYDRIGRID Insight's API as <strong>time series</strong>, consisting of <strong>UNIX timestamps in milli-seconds</strong>. 
    </p>
    <ul>
      <li><strong>Submit:</strong> Time series of <i>actual sensor readings</i> (reservoir, turbine, gate). DO NOT send planned data.</li>
      <li><strong>Fetch:</strong> Time series of <i>optimized dispatch plans</i> (turbine, gate)</li>
    </ul>
    <img src="https://hydrogrid.eu/wp-content/uploads/2020/11/API_timeseries.svg" alt="Hydrogrid Insight API - Time Series Format" />
     
    <h3>Possible Variants of Submitted Time Series</h3>
    <p>Each submitted time series is processed by HYDROGRID Insight as one consistent time series.
      <br/>
      You can submit the data as one of the following time series variants:</p>
    <img src="https://hydrogrid.eu/wp-content/uploads/2020/11/API_timeseries-types.svg" alt="Hydrogrid Insight API - Time Series Variants" />
    
    <h3>Granularity of Submitted Data</h3>
    <p>
    The submitted time series (of reservoirs, turbines, gates) must have at least the same time granularity as the market granularity your plant operates in. If available, a finer granularity can submitted to HYDROGRID Insight. 
    </p>
    <samp>
    Example: Your plant operates in a market with a granularity = 1h and your reservoir sensor provides 10 readings per hour. To fulfill the minimum requirements, your time series should contain one reservoir level value per hour. Ideally, this would be the reservoir level value timed closest to the end of the delivery period.
    <!--Example: Your plant operates in a market with a granularity = 1h and your reservoir sensor provides 10 readings per hour. To fulfill the minimal requirements, aggregate the sensor's readings of each hour to one value and send the timeseries with a granularity of one hour.
    --></samp>
    
    <p>Further requirements: </p>
    <ul>
    <li>Submit time series in a 48h rolling window</li>
    <li>Submit at least one sensor value a day</li>
    <li>HYDROGRID Insight API rejects</li>
      <ul>
      <li>Data that is older than two weeks</li>
      <li>Data that lies in the future</li>
      <li>Values below zero (turbine production, reservoir levels, gate throughput)</li>
      </ul>
    </ul>
    
    <h3>Units of Submitted Data</h3>
    <table>
      <tr>
        <td width="100px"><strong>Sensor</strong></td>
        <td width="100px"><strong>Unit</strong></td>
        <td><strong>Alternative Unit</strong></td>
      </tr>
      <tr>
        <td>Reservoir</td>
        <td>masl</td>
        <td></td>
      </tr>
      <tr>
        <td>Turbine</td>
        <td>MW</td>
        <td></td>
      </tr>
      <tr>
        <td>Gate</td>
        <td>mÂ³/s</td>
        <td>cm, %</td>
      </tr>
    </table>
    
    <h3>Faulty / Missing Data within Submitted Data</h3>
    <p>
    Plant's sensor might provide faulty or missing values. For both cases, kindly ensure to handle the incorrect sensor data as follows <strong>before</strong> submitting it: 
    </p>
    <table>
      <tr>
        <td width="150px"><strong>Issue</strong></td>
        <td><strong>Handling</strong></td>
      </tr>
      <tr>
        <td>Faulty Sensor Data</td>
        <td>Submit no value instead of the faulty value.</td>
      </tr>
      <tr>
        <td>Missing Sensor Data</td>
        <td>Submit no value.</td>
      </tr>
    </table>
    
    Sending no values yields data gaps in your submitted time series. Keep the data outage as short as possible to mitigate the optimization imprecision. HYDROGRID Insight automatically handles data gaps up to 48h (see <a href="#shortgaps">Handling Short Data Outage</a>), for data outages of more than 48h kindly refer to the <a href="#longgaps">Handling Long Data Outage</a>.
    
    <h2>Details on HYDROGRID Insight</h2>
    <h3>Processing the Time Series of Sensor Data</h3>
    
    <p>Submitted time series are processed by HYDROGRID Insight depending on the sensor type.</p>
    <ul>
    <li><strong>Reservoir: </strong> A reservoir sensor value <i>x</i> for a timestamp <i>t</i> refers to the reservoir level reading <i>x</i> at timestamp <i>t</i>.</li>
    <li><strong>Turbine/Gate: </strong> After receiving the turbine or gate sensor value <i>x</i> for a timestamp <i>t</i>, HYDROGRID Insight processes <i>x</i> after the end of the market delivery period.</li>
    </ul>
    <img src="https://hydrogrid.eu/wp-content/uploads/2020/11/API_timeseries-processing.svg" alt="HYDROGRID Insight API - Time Series Processing" />
    
    <h3 id="shortgaps">Handling of Short-Term Communication Faults and Data Outages (< 48h)</h3>
    
    <p>HYDROGRID Insight automatically handles data gaps in the submitted time series up to 48h. The handling of the data gaps is explained in the following figure.</p>
    <img src="https://hydrogrid.eu/wp-content/uploads/2020/11/API_timeseries-errors.svg" alt="HYDROGRID Insight API - Data Gaps Handling" />
    
    <h3 id="longgaps">Handling of Long-Term Communication Faults & Data Outages (> 48h)</h3>
    <p>In case of a long data outage (more than 48h), HYDROGRID will automatically inform you about the data outage and will ask you to re-send the missing data to immediately provide optimal optimization results. </p>
      <ul>
      <li> If resending is not possible: HYDROGRID Insight will ignore the data gap and re-start the optimization as soon as new actual data is submitted. The optimization will be based on actual data. </li>
      <li>If re-sending is possible: HYDROGRID Insight will re-calculate the optimization results for the period of the data outage and re-start the optimization as soon as new actual data is submitted. The actual hourly optimization results will be based on past and actual data. </li>
      </ul>

    <h1>Developer Resources</h1>
    
    <h2>Ready to use API Client Code</h2>
    <p>
    HYDROGRID provides ready-to-use API Client code. Simply clone or download the source code from <a href="https://bitbucket.org/hydrogrid/" target="new">HYDROGRID API Developer Resources</a>. 
    </p>
    
    <h2>Generate API Client Code in Any Language</h2>
    <p>
    In case you require a different programming / scripting languages for API Client implementation than those provided in the <a href="https://bitbucket.org/hydrogrid/" target="new">HYDROGRID API Developer Ressources Repository</a> you can quickly create the source code of the API Client by performing the following steps: 
    </p>
    <ol>
      <li> Download the latest <a href="https://api-spec.hydrogrid.eu/swagger.yaml">HYDROGRID Insight API Specification</a> (as .yaml file) 
      <li> Generate the code by following the instructions on <a href="https://github.com/OpenAPITools" target="new">OpenAPITools</a>.
    <ol>
  x-logo:
    url: "https://www.hydrogrid.eu/wp-content/themes/wp_gulp/img/logo.svg"

tags:
  - name: Run-of-river Core
    description: Core endpoints for run-of-river power stations
  - name: Reservoir Core
    description: Core endpoints for reservoir power stations
  - name: Cascade Core
    description: Endpoints for reservoir power stations with Gate(s)
  - name: Secondary
    description: Additional endpoints providing extra features
  - name: Authentication
    description: endpoints related to Authentication mechanisms
  - name: Power
    description: endpoints related to power generation / turbines
  - name: Reservoir
    description: endpoints related to hydrology / reservoirs
  - name: Gate
    description: endpoints related to gates
  - name: Price Forecast
    description: submit custom price forecasts


servers:
  - url: https://api.hydrogrid.eu/v1
    description: Main api server

paths:
  /health:
    get:
      operationId: api.health.get_health_status
      tags:
        - Status and Info
      summary: Check if API is available and has all necessary DB connections
      description: |
        Only used internally to track api status and service level agreement
      security:
        - { }
      responses:
        '200':
          description: Service fully available
          content:
            application/json:
              schema:
                $ref: 'common_schemas.yaml#/AppContext'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: 'common_schemas.yaml#/AppContext'

  /auth:
    get:
      operationId: api.auth.get_access_token_no_multi_factor
      tags:
        - Authentication
      summary: Get JWT
      description: |
        Main Authentication endpoint. Supply Basic Authentication credentials to get a JWT.
        Alternatively the credentials can be passed in the request body
      security:
        - basicAuth: []
      responses:
        '200':
          description: token and refresh token
          content:
            application/json:
              schema:
                required:
                  - access_token
                  - refresh_token
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        '401':
          $ref: '#/components/responses/UsernamePassError'

  /auth/refresh:
    post:
      operationId: api.auth.get_refresh_token
      tags:
        - Authentication
      summary: Refresh JWT
      description: >
        When your jwt has expired, use this to get a new one by supplying the expired 
        jwt and the refresh token. Provide the refresh token as Authentication/Bearer.
      requestBody:
        description: Expired jwt token
        required: true
        content:
          application/json:
            schema:
              required:
                - access_token
              properties:
                access_token:
                  type: string
      responses:
        '200':
          description: access token
          content:
            application/json:
              schema:
                required:
                  - access_token
                  - refresh_token
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string


  /auth/logout:
    post:
      operationId: api.auth.logout
      tags:
        - Authentication
      summary: Logout the user associated to the requesting access_token.
      description: >
        When you want to close your session, call this endpoint to invalidate your
        token on the server side so that it cannot be used anymore.
      responses:
        '204':
          description: logout successful
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'


  /plant/{plant_id}/power/active-gross-actual:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
    post:
      operationId: api.power.submit_active_gross_actual
      tags:
        - Run-of-river Core
        - Reservoir Core
        - Cascade Core
        - Power
      summary: Submit power timeseries for a whole plant
      requestBody:
        description: Timeseries to submit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PowerSchedule'
      responses:
        '204':
          description: power successfully submitted
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

    get:
      operationId: api.power.request_active_gross_actual
      tags:
        - Secondary
        - Power
      summary: Get the actual power of a plant
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query

      responses:
        '200':
          description: actual power of a plant
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/PowerSchedule'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

  /plant/{plant_id}/power/active-gross-plan:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
    get:
      operationId: api.power.request_active_gross_plan
      tags:
        - Power
        - Reservoir Core
        - Cascade Core
      summary: Get the planned power for a plant
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query
        - in: query
          deprecated: true
          name: step-size
          schema:
            $ref: '#/components/schemas/TimeInterval'
          required: false
          description: a time interval (typically used as step-size) in milliseconds. for hourly use '3600000' for 15min use '900000'
      responses:
        '200':
          description: A plan
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/PowerSchedule'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

  /plant/{plant_id}/shadow_price:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
    get:
      operationId: api.shadow_price.request_shadow_price
      tags:
        - Shadow Price
      summary: Get shadow prices per turbine in plant
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query
      responses:
        '200':
          description: Shadow prices per turbine
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/TurbineShadowPrices'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

  /plant/{plant_id}/gate/discharge-plan:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
    get:
      operationId: api.gate.request_discharge_plan
      tags:
        - Gate
        - Cascade Core
      summary: Get the planned discharge for all gates of a plant
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query
        - in: query
          deprecated: true
          name: step-size
          schema:
            $ref: '#/components/schemas/TimeInterval'
          required: false
          description: a time interval (typically used as step-size) in milliseconds. for hourly use '3600000' for 15min use '900000'
      responses:
        '200':
          description: A plan
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/DischargeSchedulePlan'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

  /plant/{plant_id}/gate/opening-plan:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
      - name: unit
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/GateOpeningUnit'
    get:
      operationId: api.gate.request_opening_plan
      tags:
        - Gate
        - Cascade Core
      summary: Get the planned opening for all gates of a plant
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query
        - in: query
          deprecated: true
          name: step-size
          schema:
            $ref: '#/components/schemas/TimeInterval'
          required: false
          description: a time interval (typically used as step-size) in milliseconds. for hourly use '3600000' for 15min use '900000'
      responses:
        '200':
          description: A plan
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/OpeningSchedulePlan'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'


  /plant/{plant_id}/reservoir/level:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
    post:
      operationId: api.reservoir.submit_level
      tags:
        - Reservoir
        - Reservoir Core
        - Cascade Core
      summary: Submit reservoir level timeseries for a reservoir
      requestBody:
        description: Timeseries to submit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservoirLevelActual'
      responses:
        '204':
          description: reservoir level successfully submitted
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

    get:
      operationId: api.reservoir.request_level
      tags:
        - Reservoir
        - Secondary
      summary: Get reservoir level timeseries
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query
      responses:
        '200':
          description: Reservoir level timeseries
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/ReservoirLevelActual'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

  /plant/{plant_id}/gate/discharge-actual:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
    post:
      operationId: api.gate.submit_discharge_actual
      tags:
        - Gate
        - Cascade Core
      summary: Submit gate discharge in mÂ³/s (!PREFERRED!)
      requestBody:
        description: Timeseries to submit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DischargeScheduleActual'
      responses:
        '204':
          description: Gate discharge successfully submitted
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'
    get:
      operationId: api.gate.request_discharge_actual
      tags:
        - Gate
        - Secondary
      summary: Get gate discharge timeseries
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query
      responses:
        '200':
          description: gate discharge timeseries
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/DischargeScheduleActual'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

  /plant/{plant_id}/gate/opening-actual:
    parameters:
      - name: plant_id
        in: path
        required: true
        description: The id of the plant
        schema:
          $ref: '#/components/schemas/PlantId'
      - name: unit
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/GateOpeningUnit'
    post:
      operationId: api.gate.submit_opening_actual
      tags:
        - Gate
        - Cascade Core
      summary: Submit gate opening in cm
      requestBody:
        description: Timeseries to submit
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpeningScheduleActual'
      responses:
        '204':
          description: Gate opening successfully submitted
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

    get:
      operationId: api.gate.request_opening_actual
      tags:
        - Gate
        - Secondary
      summary: Get gate opening timeseries
      parameters:
        - in: query
          name: start-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: Start of query
        - in: query
          name: end-ts
          schema:
            $ref: '#/components/schemas/Timestamp'
          required: true
          description: End of query
      responses:
        '200':
          description: gate opening timeseries
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/OpeningScheduleActual'
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '401':
          $ref: 'common_schemas.yaml#/HttpResponse/UnauthorizedError'
        '403':
          $ref: 'common_schemas.yaml#/HttpResponse/ForbiddenError'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

  /price_forecast_source/{price_forecast_source_id}/price_forecast:
    parameters:
      - name: price_forecast_source_id
        in: path
        required: true
        description: The id of the price forecast source
        schema:
          $ref: 'common_schemas.yaml#/PriceForecastSourceId'
    post:
      summary: Add a price forecast
      operationId: api.price_forecast.add_price_forecast
      tags:
        - Price Forecast
      description: Add a new price forecast
      requestBody:
        description: |
          Custom price forecast to add.
          
          The <b>market observation timestamp</b> is intended to signify
          at which point in time the forecast was created / based on a (futures / intraday) market snapshot.
          
          HYDROGRID will always use the forecast with the latest market_observation_date for the optimization 
          (independent of submission date, which is of course also stored).
        required: true
        content:
          application/json:
            schema:
             $ref: 'common_schemas.yaml#/PriceForecastSubmission'
      responses:
        '204':
          description: custom price forecast successfully added
        '400':
          $ref: 'common_schemas.yaml#/HttpResponse/BadRequest'
        '404':
          $ref: 'common_schemas.yaml#/HttpResponse/NotFound'

security:
  - bearerAuth: []

components:
  securitySchemes:
    basicAuth:
      $ref: 'common_schemas.yaml#/securitySchemes/basicAuth'
    bearerAuth:
      $ref: 'common_schemas.yaml#/securitySchemes/bearerAuth'

  responses:
    UsernamePassError:
      description: Incorrect username or password

  examples:
    1HourStepSize:
      value: 3600000

  schemas:

    ############################## GATE ##############################

    ########################## DISCHARGE ##########################

    DischargeScheduleActual:
      type: array
      items:
        required:
          - gateId
          - timeseries
        properties:
          gateId:
            $ref: '#/components/schemas/GateId'
          timeseries:
            type: array
            items:
              $ref: '#/components/schemas/GateDischargeWithModeTimeseriesElem'

    GateDischargeWithModeTimeseriesElem:
      required:
        - timestamp
        - value
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        value:
          $ref: '#/components/schemas/GateDischargeValue'
        mode:
          $ref: '#/components/schemas/OperationMode'

    DischargeSchedulePlan:
      type: array
      items:
        required:
          - gateId
          - timeseries
        properties:
          gateId:
            $ref: '#/components/schemas/GateId'
          timeseries:
            type: array
            items:
              $ref: '#/components/schemas/GateDischargeWithModeTimeseriesElem'

    GateDischargeTimeseriesElem:
      required:
        - timestamp
        - value
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        value:
          $ref: '#/components/schemas/GateDischargeValue'
        mode:
          $ref: '#/components/schemas/GateDischargeValue'
    ########################## OPENING ##########################

    OpeningScheduleActual:
      type: array
      items:
        required:
          - gateId
          - timeseries
        properties:
          gateId:
            $ref: '#/components/schemas/GateId'
          timeseries:
            type: array
            items:
              $ref: '#/components/schemas/GateOpeningWithModeTimeseriesElem'

    GateOpeningWithModeTimeseriesElem:
      required:
        - timestamp
        - value
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        value:
          $ref: '#/components/schemas/OpeningValue'
        mode:
          $ref: '#/components/schemas/OperationMode'

    OpeningSchedulePlan:
      type: array
      items:
        required:
          - gateId
          - timeseries
        properties:
          gateId:
            $ref: '#/components/schemas/GateId'
          timeseries:
            type: array
            items:
              $ref: '#/components/schemas/OpeningTimeseriesElem'

    OpeningTimeseriesElem:
      required:
        - timestamp
        - value
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        value:
          $ref: '#/components/schemas/OpeningValue'


    ############################## RESERVOIR ##############################

    ReservoirLevelActual:
      type: array
      items:
        required:
          - reservoirId
          - timeseries
        properties:
          reservoirId:
            $ref: '#/components/schemas/ReservoirId'
          timeseries:
            type: array
            items:
              $ref: '#/components/schemas/ReservoirLevelTimeseriesElem'

    ReservoirLevelTimeseriesElem:
      required:
        - timestamp
        - value
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        value:
          $ref: '#/components/schemas/MasLevelValue'


    ############################## TURBINE ##############################

    PowerSchedule:
      type: array
      # minItems: 1
      items:
        required:
          - turbineId
          - timeseries
        properties:
          turbineId:
            $ref: '#/components/schemas/TurbineId'
          timeseries:
            type: array
            items:
              $ref: '#/components/schemas/MWTimeseriesElem'
            minItems: 1
            uniqueItems: true
      example:
        - turbineId: "my-turbine-22"
          timeseries:
            - timestamp: 1262304000000
              value: 44
              mode: 'optimal'
            - timestamp: 1262305000000
              value: 20
              mode: 'manual'
            - timestamp: 1262306000000
              value: 0
        - turbineId: "my-turbine-23"
          timeseries:
            - timestamp: 1262304000000
              value: 0
              mode: 'off'
            - timestamp: 1262305000000
              value: 21
              mode: 'automatic'
            - timestamp: 1262306000000
              value: 44

    TurbineShadowPrices:
      type: array
      items:
        required:
          - turbine_id
          - timeseries
        properties:
          turbine_id:
            $ref: '#/components/schemas/TurbineId'
          timeseries:
            $ref: 'common_schemas.yaml#/ShadowPriceTimeseries'


    MWTimeseriesElem:
      required:
        - timestamp
        - value
      properties:
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        value:
          $ref: '#/components/schemas/MwGenerationValue'
        mode:
          $ref: '#/components/schemas/OperationMode'


    ############################## PRIMITIVES ##############################

    OperationMode:
      description: |
        The mode the control unit is currently in.
        If omitted 'optimal' will be taken as the default.
        <table>
            <tr>
                <td>optimal</td>
                <td>control unit is actively controlled by Hydrogrid</td>
            </tr>
            <tr>
                <td>automatic</td>
                <td>control unit is following on-site plan</td>
            </tr>
            <tr>
                <td>manual</td>
                <td>control unit generation is manually set on-site</td>
            </tr>
            <tr>
                <td>off</td>
                <td>control unit is turned off</td>
            </tr>
        </table>       
      type: string
      enum:
        - 'optimal'
        - 'manual'
        - 'off'
        - 'automatic'

    MasLevelValue:
      description: Reservoir level in metres above sea
      type: number
      minimum: 0
      maximum: 8000

    Timestamp:
      description: Unix timestamp in milliseconds, should be >= 1262304000000 (2010-01-01 00:00:00)
      type: integer
      format: int64
      minimum: 1262304000000

    TimeInterval:
      description: a time interval (typically used as step-size) in milliseconds. for hourly use '3600000' for 15min use '900000'
      type: integer
      minimum: 1000

    TurbineId:
      type: string

    PlantId:
      type: string

    ReservoirId:
      type: string

    PriceForecastSourceId:
      type: string

    GateId:
      type: string

    GateDischargeValue:
      description: Gate discharge measured in mÂ³/s
      type: number
      minimum: 0

    OpeningValue:
      description: Gate opening in cm
      type: number
      minimum: 0

    MwGenerationValue:
      description: generation in MW
      type: number
      minimum: 0

    GateOpeningUnit:
      description: The unit describing the gate opening, either cm or percent
      type: string
      enum:
        - percent
        - cm
