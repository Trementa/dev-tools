{
    "openapi": "3.0.1",
    "info": {
        "title": "Tripletex API",
        "description": "## Usage\n\n- **Download the spec** [swagger.json](/v2/swagger.json) file, it is a [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification).\n\n- **Generating a client** can easily be done using tools like [swagger-codegen](https://github.com/swagger-api/swagger-codegen) or other that accepts [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) specs.\n\n\n## Overview\n\n- Partial resource updating is done using the `PUT` method with optional fields instead of the `PATCH` method.\n\n- **Actions** or **commands** are represented in our RESTful path with a prefixed `:`. Example: `/v2/hours/123/:approve`.\n\n- **Summaries** or **aggregated** results are represented in our RESTful path with a prefixed `\u003e`. Example: `/v2/hours/\u003ethisWeeksBillables`.\n\n- **Request ID** is a key found in all responses in the header with the name `x-tlx-request-id`. For validation and error responses it is also in the response body. If additional log information is absolutely necessary, our support division can locate the key value.\n\n- **version** This is a revision number found on all persisted resources. If included, it will prevent your PUT/POST from overriding any updates to the resource since your GET.\n\n- **Date** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DD`.\n\n- **DateTime** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DDThh:mm:ss`.\n\n- **Searching** is done by entering values in the optional fields for each API call. The values fall into the following categories: range, in, exact and like.\n\n- **Missing fields** or even **no response data** can occur because result objects and fields are filtered on authorization.\n\n- **See [GitHub](https://github.com/Tripletex/tripletex-api2) for more documentation, examples, changelog and more.**\n\n- **See [FAQ](https://tripletex.no/execute/docViewer?articleId=906\u0026language=0) for additional information.**\n\n\n## Authentication\n\n- **Tokens:** The Tripletex API uses 3 different tokens\n\n  - **consumerToken** is a token provided to the consumer by Tripletex after the API 2.0 registration is completed.\n\n  - **employeeToken** is a token created by an administrator in your Tripletex account via the user settings and the tab \"API access\". Each employee token must be given a set of entitlements. [Read more here.](https://tripletex.no/execute/docViewer?articleId=853\u0026language=0)\n\n  - **sessionToken** is the token from `/token/session/:create` which requires a consumerToken and an employeeToken created with the same consumer token, but not an authentication header. See how to create a sessionToken [here](https://tripletex.no/execute/docViewer?articleId=855\u0026language=0).\n\n- **Authentication** is done via [Basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n\n  - **username** is used to specify what company to access.\n\n    - `0` or blank means the company of the employee.\n\n    - Any other value means accountant clients. Use `/company/\u003ewithLoginAccess` to get a list of those.\n\n  - **password** is the **sessionToken**.\n\n  - If you need to create the header yourself use `Authorization: Basic \u003cencoded token\u003e` where `encoded token` is the string `\u003ctarget company id or 0\u003e:\u003cyour session token\u003e` Base64 encoded.\n\n\n## Tags\n\n- `[BETA]` This is a beta endpoint and can be subject to change.\n- `[DEPRECATED]` Deprecated means that we intend to remove/change this feature or capability in a future \"major\" API release. We therefore discourage all use of this feature/capability.\n\n\n## Fields\n\nUse the `fields` parameter to specify which fields should be returned. This also supports fields from sub elements, done via `\u003cfield\u003e(\u003csubResourceFields\u003e)`. `*` means all fields for that resource. Example values:\n- `project,activity,hours`  returns `{project:..., activity:...., hours:...}`.\n- just `project` returns `\"project\" : { \"id\": 12345, \"url\": \"tripletex.no/v2/projects/12345\"  }`.\n- `project(*)` returns `\"project\" : { \"id\": 12345 \"name\":\"ProjectName\" \"number.....startDate\": \"2013-01-07\" }`.\n- `project(name)` returns `\"project\" : { \"name\":\"ProjectName\" }`.\n- All resources and some subResources :  `*,activity(name),employee(*)`.\n\n\n## Sorting\n\nUse the `sorting` parameter to specify sorting. It takes a comma separated list, where a `-` prefix denotes descending. You can sort by sub object with the following format: `\u003cfield\u003e.\u003csubObjectField\u003e`. Example values:\n- `date`\n- `project.name`\n- `project.name, -date`\n\n\n## Changes\n\nTo get the changes for a resource, `changes` have to be explicitly specified as part of the `fields` parameter, e.g. `*,changes`.\nThere are currently two types of change available: \n- `CREATE` for when the resource was created\n- `UPDATE` for when the resource was updated\n\n**NOTE**\n\u003e For objects created prior to October 24th 2018 the list may be incomplete, but will always contain the CREATE and the last change (if the object has been changed after creation).\n\n\n## Rate limiting\n\nRate limiting is performed on the API calls for an employee for each API consumer. Status regarding the rate limit is returned as headers:\n- `X-Rate-Limit-Limit` - The number of allowed requests in the current period.\n- `X-Rate-Limit-Remaining` - The number of remaining requests.\n- `X-Rate-Limit-Reset` - The number of seconds left in the current period.\n\nOnce the rate limit is hit, all requests will return HTTP status code `429` for the remainder of the current period.\n\n\n## Response envelope\n\n#### Multiple values\n\n```json\n{\n  \"fullResultSize\": ###, // {number} [DEPRECATED]\n  \"from\": ###, // {number} Paging starting from\n  \"count\": ###, // {number} Paging count\n  \"versionDigest\": \"###\", // {string} Hash of full result, null if no result\n  \"values\": [...{...object...},{...object...},{...object...}...]\n}\n```\n\n#### Single value\n\n```json\n{\n  \"value\": {...single object...}\n}\n```\n\n\n## WebHook envelope\n\n```json\n{\n  \"subscriptionId\": ###, // Subscription id\n  \"event\": \"object.verb\", // As listed from /v2/event/\n  \"id\": ###, // Id of object this event is for\n  \"value\": {... single object, null if object.deleted ...}\n}\n```\n\n\n## Error/warning envelope\n\n```json\n{\n  \"status\": ###, // {number} HTTP status code\n  \"code\": #####, // {number} internal status code of event\n  \"message\": \"###\", // {string} Basic feedback message in your language\n  \"link\": \"###\", // {string} Link to doc\n  \"developerMessage\": \"###\", // {string} More technical message\n  \"validationMessages\": [ // {array} List of validation messages, can be null\n    {\n      \"field\": \"###\", // {string} Name of field\n      \"message\": \"###\" // {string} Validation message for field\n    }\n  ],\n  \"requestId\": \"###\" // {string} Same as x-tlx-request-id \n}\n```\n\n\n## Status codes / Error codes\n\n- **200 OK**\n- **201 Created** - From POSTs that create something new.\n- **204 No Content** - When there is no answer, ex: \"/:anAction\" or DELETE.\n- **400 Bad request** -\n  -  **4000** Bad Request Exception\n  - **11000** Illegal Filter Exception\n  - **12000** Path Param Exception\n  - **24000** Cryptography Exception\n- **401 Unauthorized** - When authentication is required and has failed or has not yet been provided\n  -  **3000** Authentication Exception\n- **403 Forbidden** - When AuthorisationManager says no.\n  -  **9000** Security Exception\n- **404 Not Found** - For resources that does not exist.\n  -  **6000** Not Found Exception\n- **409 Conflict** - Such as an edit conflict between multiple simultaneous updates\n  -  **7000** Object Exists Exception\n  -  **8000** Revision Exception\n  - **10000** Locked Exception\n  - **14000** Duplicate entry\n- **422 Bad Request** - For Required fields or things like malformed payload.\n  - **15000** Value Validation Exception\n  - **16000** Mapping Exception\n  - **17000** Sorting Exception\n  - **18000** Validation Exception\n  - **21000** Param Exception\n  - **22000** Invalid JSON Exception\n  - **23000** Result Set Too Large Exception\n- **429 Too Many Requests** - Request rate limit hit\n- **500 Internal Error** - Unexpected condition was encountered and no more specific message is suitable\n  - **1000** Exception\n",
        "contact": {
            "name": "tripletex-api2 on GitHub",
            "url": "https://github.com/Tripletex/tripletex-api2"
        },
        "version": "2.46.3"
    },
    "servers": [
        {
            "url": "https://api.tripletex.io/v2"
        }
    ],
    "tags": [
        {
            "name": "travelExpensecost"
        },
        {
            "name": "travelExpense/cost"
        },
        {
            "name": "supplier"
        },
        {
            "name": "travelExpenserateCategoryGroup"
        },
        {
            "name": "travelExpense/rateCategoryGroup"
        },
        {
            "name": "bankpayment"
        },
        {
            "name": "travelExpensesettings"
        },
        {
            "name": "travelExpense/settings"
        },
        {
            "name": "travelExpenserate"
        },
        {
            "name": "travelExpense/rate"
        },
        {
            "name": "projectorderline"
        },
        {
            "name": "project/orderline"
        },
        {
            "name": "integrationpg2callback"
        },
        {
            "name": "timesheettimeClock"
        },
        {
            "name": "timesheet/timeClock"
        },
        {
            "name": "company"
        },
        {
            "name": "employeenextOfKin"
        },
        {
            "name": "employee/nextOfKin"
        },
        {
            "name": "employee"
        },
        {
            "name": "bankreconciliationpaymentType"
        },
        {
            "name": "bank/reconciliation/paymentType"
        },
        {
            "name": "eventsubscription"
        },
        {
            "name": "event/subscription"
        },
        {
            "name": "apiConsumer"
        },
        {
            "name": "salarycompilation"
        },
        {
            "name": "salary/compilation"
        },
        {
            "name": "currency"
        },
        {
            "name": "division"
        },
        {
            "name": "projecttask"
        },
        {
            "name": "project/task"
        },
        {
            "name": "dashboard"
        },
        {
            "name": "bankreconciliation"
        },
        {
            "name": "bank/reconciliation"
        },
        {
            "name": "ledgervatType"
        },
        {
            "name": "ledger/vatType"
        },
        {
            "name": "employeestandardTime"
        },
        {
            "name": "employee/standardTime"
        },
        {
            "name": "travelExpenserateCategory"
        },
        {
            "name": "travelExpense/rateCategory"
        },
        {
            "name": "product"
        },
        {
            "name": "openid"
        },
        {
            "name": "document"
        },
        {
            "name": "ledgeraccount"
        },
        {
            "name": "ledger/account"
        },
        {
            "name": "tripletexAccountsalesForceOpportunity"
        },
        {
            "name": "companymodules"
        },
        {
            "name": "eventbanner"
        },
        {
            "name": "invoice"
        },
        {
            "name": "salarytype"
        },
        {
            "name": "salary/type"
        },
        {
            "name": "employeeemploymentleaveOfAbsenceType"
        },
        {
            "name": "employee/employment/leaveOfAbsenceType"
        },
        {
            "name": "purchaseOrdergoodsReceiptLine"
        },
        {
            "name": "purchaseOrder/goodsReceiptLine"
        },
        {
            "name": "employeeemploymentleaveOfAbsence"
        },
        {
            "name": "employee/employment/leaveOfAbsence"
        },
        {
            "name": "timesheetentry"
        },
        {
            "name": "timesheet/entry"
        },
        {
            "name": "inventorystocktaking"
        },
        {
            "name": "inventory/stocktaking"
        },
        {
            "name": "supplierInvoice"
        },
        {
            "name": "employeeemploymentworkingHoursScheme"
        },
        {
            "name": "employee/employment/workingHoursScheme"
        },
        {
            "name": "companysettingsaltinn"
        },
        {
            "name": "company/altinn"
        },
        {
            "name": "ledgerannualAccount"
        },
        {
            "name": "ledger/annualAccount"
        },
        {
            "name": "projectprojectActivity"
        },
        {
            "name": "project/projectActivity"
        },
        {
            "name": "inventorystocktakingproductline"
        },
        {
            "name": "inventory/stocktaking/productline"
        },
        {
            "name": "projectparticipant"
        },
        {
            "name": "project/participant"
        },
        {
            "name": "bankstatement"
        },
        {
            "name": "bank/statement"
        },
        {
            "name": "travelExpensecostCategory"
        },
        {
            "name": "travelExpense/costCategory"
        },
        {
            "name": "purchaseOrderdeviation"
        },
        {
            "name": "purchaseOrder/deviation"
        },
        {
            "name": "purchaseOrder"
        },
        {
            "name": "timesheetsalaryTypeSpecification"
        },
        {
            "name": "timesheet/salaryTypeSpecification"
        },
        {
            "name": "address"
        },
        {
            "name": "timesheetsettings"
        },
        {
            "name": "timesheet/settings"
        },
        {
            "name": "deliveryAddress"
        },
        {
            "name": "department"
        },
        {
            "name": "travelExpense"
        },
        {
            "name": "companysalesmodules"
        },
        {
            "name": "company/salesmodules"
        },
        {
            "name": "orderoffer"
        },
        {
            "name": "inventoryinventories"
        },
        {
            "name": "inventory/inventories"
        },
        {
            "name": "purchaseOrdergoodsReceipt"
        },
        {
            "name": "purchaseOrder/goodsReceipt"
        },
        {
            "name": "lookup"
        },
        {
            "name": "timesheetweek"
        },
        {
            "name": "timesheet/week"
        },
        {
            "name": "bankreconciliationmatch"
        },
        {
            "name": "bank/reconciliation/match"
        },
        {
            "name": "customercategory"
        },
        {
            "name": "customer/category"
        },
        {
            "name": "crmprospect"
        },
        {
            "name": "crm/prospect"
        },
        {
            "name": "ledgervoucherType"
        },
        {
            "name": "ledger/voucherType"
        },
        {
            "name": "productgroup"
        },
        {
            "name": "product/group"
        },
        {
            "name": "employeeemploymentdetails"
        },
        {
            "name": "employee/employment/details"
        },
        {
            "name": "salarypayslip"
        },
        {
            "name": "salary/payslip"
        },
        {
            "name": "tokenconsumer"
        },
        {
            "name": "token/consumer"
        },
        {
            "name": "companybrreg"
        },
        {
            "name": "travelExpenseaccommodationAllowance"
        },
        {
            "name": "travelExpense/accommodationAllowance"
        },
        {
            "name": "invoicepaymentType"
        },
        {
            "name": "invoice/paymentType"
        },
        {
            "name": "salarysettingsholiday"
        },
        {
            "name": "salary/settings/holiday"
        },
        {
            "name": "employeeentitlement"
        },
        {
            "name": "employee/entitlement"
        },
        {
            "name": "internalscheduling"
        },
        {
            "name": "ledgeraccountingPeriod"
        },
        {
            "name": "ledger/accountingPeriod"
        },
        {
            "name": "invoicedetails"
        },
        {
            "name": "invoice/details"
        },
        {
            "name": "event"
        },
        {
            "name": "productunit"
        },
        {
            "name": "product/unit"
        },
        {
            "name": "tripletexAccountsalesForceUser"
        },
        {
            "name": "integrationmaventastatus"
        },
        {
            "name": "bank"
        },
        {
            "name": "tokensession"
        },
        {
            "name": "token/session"
        },
        {
            "name": "travelExpenseperDiemCompensation"
        },
        {
            "name": "travelExpense/perDiemCompensation"
        },
        {
            "name": "municipality"
        },
        {
            "name": "tripletexAccountsalesForceEmployeeRole"
        },
        {
            "name": "project"
        },
        {
            "name": "bankstatementtransaction"
        },
        {
            "name": "bank/statement/transaction"
        },
        {
            "name": "inventory"
        },
        {
            "name": "employeeemploymentemploymentType"
        },
        {
            "name": "employee/employment/employmentType"
        },
        {
            "name": "travelExpensezone"
        },
        {
            "name": "employeeemploymentremunerationType"
        },
        {
            "name": "employee/employment/remunerationType"
        },
        {
            "name": "eventnotification"
        },
        {
            "name": "ledgerposting"
        },
        {
            "name": "ledger/posting"
        },
        {
            "name": "integrationfactoringaprila"
        },
        {
            "name": "tripletexAccount"
        },
        {
            "name": "ledgervoucher"
        },
        {
            "name": "ledger/voucher"
        },
        {
            "name": "documentArchive"
        },
        {
            "name": "mobileapp"
        },
        {
            "name": "salarysettings"
        },
        {
            "name": "salary/settings"
        },
        {
            "name": "purchaseOrderorderline"
        },
        {
            "name": "purchaseOrder/orderline"
        },
        {
            "name": "tripletexAccountsalesForceAccountInfo"
        },
        {
            "name": "optionspage"
        },
        {
            "name": "productexternal"
        },
        {
            "name": "product/external"
        },
        {
            "name": "projecthourlyRatesprojectSpecificRates"
        },
        {
            "name": "project/hourlyRates/projectSpecificRates"
        },
        {
            "name": "employeeemploymentoccupationCode"
        },
        {
            "name": "employee/employment/occupationCode"
        },
        {
            "name": "timesheetmonth"
        },
        {
            "name": "timesheet/month"
        },
        {
            "name": "salarytransaction"
        },
        {
            "name": "salary/transaction"
        },
        {
            "name": "orderorderline"
        },
        {
            "name": "order/orderline"
        },
        {
            "name": "travelExpensepaymentType"
        },
        {
            "name": "travelExpense/paymentType"
        },
        {
            "name": "customer"
        },
        {
            "name": "tokenlogin"
        },
        {
            "name": "productgroupRelation"
        },
        {
            "name": "product/groupRelation"
        },
        {
            "name": "exceptiontest"
        },
        {
            "name": "ledger"
        },
        {
            "name": "projectcontrolForm"
        },
        {
            "name": "project/controlForm"
        },
        {
            "name": "projecthourlyRates"
        },
        {
            "name": "project/hourlyRates"
        },
        {
            "name": "activity"
        },
        {
            "name": "travelExpensepassenger"
        },
        {
            "name": "travelExpense/passenger"
        },
        {
            "name": "internalsystemMessage"
        },
        {
            "name": "travelExpensemileageAllowance"
        },
        {
            "name": "travelExpense/mileageAllowance"
        },
        {
            "name": "contact"
        },
        {
            "name": "order"
        },
        {
            "name": "ledgerpaymentTypeOut"
        },
        {
            "name": "ledger/paymentTypeOut"
        },
        {
            "name": "ledgercloseGroup"
        },
        {
            "name": "ledger/closeGroup"
        },
        {
            "name": "projectcategory"
        },
        {
            "name": "project/category"
        },
        {
            "name": "country"
        },
        {
            "name": "integrationvntcstatus"
        },
        {
            "name": "project{id}period"
        },
        {
            "name": "project/period"
        },
        {
            "name": "employeeemployment"
        },
        {
            "name": "employee/employment"
        },
        {
            "name": "reminder"
        },
        {
            "name": "integrationautopaymessages"
        },
        {
            "name": "tokenemployee"
        },
        {
            "name": "token/employee"
        },
        {
            "name": "banner"
        },
        {
            "name": "salaryspecification"
        },
        {
            "name": "employeehourlyCostAndRate"
        },
        {
            "name": "employee/hourlyCostAndRate"
        }
    ],
    "paths": {
        "/activity": {
            "get": {
                "tags": [
                    "activity"
                ],
                "summary": "Find activities corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isProjectActivity",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isGeneral",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isChargeable",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isTask",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "activity"
                ],
                "summary": "Add activity.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Activity"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/activity/\u003eforTimeSheet": {
            "get": {
                "tags": [
                    "activity"
                ],
                "summary": "Find applicable time sheet activities for an employee on a specific day.",
                "operationId": "getForTimeSheet",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "yyyy-MM-dd. Defaults to today.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/activity/list": {
            "post": {
                "tags": [
                    "activity"
                ],
                "summary": "Add multiple activities.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "*/*": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Activity"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/activity/{id}": {
            "get": {
                "tags": [
                    "activity"
                ],
                "summary": "Find activity by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank": {
            "get": {
                "tags": [
                    "bank"
                ],
                "summary": "[BETA] Find bank corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "registerNumbers",
                        "in": "query",
                        "description": "Bank register number (four digits)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isBankReconciliationSupport",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBank"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/reconciliation": {
            "get": {
                "tags": [
                    "bank/reconciliation"
                ],
                "summary": "[BETA] Find bank reconciliation corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountingPeriodId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBankReconciliation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "bank/reconciliation"
                ],
                "summary": "[BETA] Post a bank reconciliation.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/BankReconciliation"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/bank/reconciliation/\u003elastClosed": {
            "get": {
                "tags": [
                    "bank/reconciliation"
                ],
                "summary": "[BETA] Get last closed reconciliation by account ID.",
                "operationId": "lastClosed",
                "parameters": [
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/reconciliation/match": {
            "get": {
                "tags": [
                    "bank/reconciliation/match"
                ],
                "summary": "[BETA] Find bank reconciliation match corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bankReconciliationId",
                        "in": "query",
                        "description": "List of bank reconciliation IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBankReconciliationMatch"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "bank/reconciliation/match"
                ],
                "summary": "[BETA] Create a bank reconciliation match.",
                "operationId": "post",
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/BankReconciliationMatch"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/bank/reconciliation/match/:suggest": {
            "put": {
                "tags": [
                    "bank/reconciliation/match"
                ],
                "summary": "[BETA] Suggest matches for a bank reconciliation by ID.",
                "operationId": "suggest",
                "parameters": [
                    {
                        "name": "bankReconciliationId",
                        "in": "query",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBankReconciliationMatch"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/reconciliation/match/{id}": {
            "get": {
                "tags": [
                    "bank/reconciliation/match"
                ],
                "summary": "[BETA] Get bank reconciliation match by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "bank/reconciliation/match"
                ],
                "summary": "[BETA] Update a bank reconciliation match by ID.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/BankReconciliationMatch"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliationMatch"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "bank/reconciliation/match"
                ],
                "summary": "[BETA] Delete a bank reconciliation match by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/reconciliation/paymentType": {
            "get": {
                "tags": [
                    "bank/reconciliation/paymentType"
                ],
                "summary": "[BETA] Find payment type corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBankReconciliationPaymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/reconciliation/paymentType/{id}": {
            "get": {
                "tags": [
                    "bank/reconciliation/paymentType"
                ],
                "summary": "[BETA] Get payment type by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliationPaymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/reconciliation/{id}": {
            "get": {
                "tags": [
                    "bank/reconciliation"
                ],
                "summary": "[BETA] Get bank reconciliation.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "bank/reconciliation"
                ],
                "summary": "[BETA] Update a bank reconciliation.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/BankReconciliation"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankReconciliation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "bank/reconciliation"
                ],
                "summary": "[BETA] Delete bank reconciliation by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/reconciliation/{id}/:adjustment": {
            "put": {
                "tags": [
                    "bank/reconciliation"
                ],
                "summary": "[BETA] Add an adjustment to reconciliation by ID.",
                "operationId": "adjustment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Adjustments",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BankReconciliationAdjustment"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBankReconciliationAdjustment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/bank/statement": {
            "get": {
                "tags": [
                    "bank/statement"
                ],
                "summary": "[BETA] Find bank statement corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBankStatement"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/statement/import": {
            "post": {
                "tags": [
                    "bank/statement"
                ],
                "summary": "[BETA] Upload bank statement file.",
                "operationId": "importBankStatement",
                "parameters": [
                    {
                        "name": "bankId",
                        "in": "query",
                        "description": "Bank ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Account ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "toDate",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalId",
                        "in": "query",
                        "description": "External ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fileFormat",
                        "in": "query",
                        "description": "File format",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "DNB_CSV",
                                "EIKA_TELEPAY",
                                "SPAREBANK1_TELEPAY",
                                "VISMA_ACCOUNT_STATEMENT",
                                "HANDELSBANKEN_TELEPAY",
                                "SPAREBANKEN_VEST_TELEPAY",
                                "NORDEA_CSV",
                                "TRANSFERWISE",
                                "SPAREBANKEN_SOR_TELEPAY",
                                "SPAREBANKEN_OST_TELEPAY",
                                "DANSKE_BANK_CSV"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The bank statement file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankStatement"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/statement/transaction": {
            "get": {
                "tags": [
                    "bank/statement/transaction"
                ],
                "summary": "[BETA] Find bank transaction corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "bankStatementId",
                        "in": "query",
                        "description": "Bank statement ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseBankTransaction"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/statement/transaction/{id}": {
            "get": {
                "tags": [
                    "bank/statement/transaction"
                ],
                "summary": "[BETA] Get bank transaction by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankTransaction"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/statement/transaction/{id}/details": {
            "get": {
                "tags": [
                    "bank/statement/transaction"
                ],
                "summary": "[BETA] Get additional details about transaction by ID.",
                "operationId": "getDetails",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperObject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/bank/statement/{id}": {
            "get": {
                "tags": [
                    "bank/statement"
                ],
                "summary": "[BETA] Get bank statement.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperBankStatement"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "bank/statement"
                ],
                "summary": "[BETA] Delete bank statement by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/company": {
            "put": {
                "tags": [
                    "company"
                ],
                "summary": "Update company information.",
                "operationId": "put",
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Company"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCompany"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/company/\u003ewithLoginAccess": {
            "get": {
                "tags": [
                    "company"
                ],
                "summary": "Returns client customers (with accountant/auditor relation) where the current user has login access (proxy login).",
                "operationId": "getWithLoginAccess",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCompany"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/company/divisions": {
            "get": {
                "tags": [
                    "company"
                ],
                "summary": "[DEPRECATED] Find divisions.",
                "operationId": "getDivisions",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCompany"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/company/salesmodules": {
            "get": {
                "tags": [
                    "company/salesmodules"
                ],
                "summary": "[BETA] Get active sales modules.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseSalesModuleDTO"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "company/salesmodules"
                ],
                "summary": "[BETA] Add (activate) a new sales module.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SalesModuleDTO"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSalesModuleDTO"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/company/settings/altinn": {
            "get": {
                "tags": [
                    "company/altinn"
                ],
                "summary": "[BETA] Find Altinn id for login in company.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAltinnCompanyModule"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "company/altinn"
                ],
                "summary": "[BETA] Update AltInn id and password.",
                "operationId": "put",
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/AltinnCompanyModule"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAltinnCompanyModule"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/company/{id}": {
            "get": {
                "tags": [
                    "company"
                ],
                "summary": "Find company by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCompany"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/contact": {
            "get": {
                "tags": [
                    "contact"
                ],
                "summary": "Find contacts corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseContact"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "contact"
                ],
                "summary": "Create contact.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Contact"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperContact"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/contact/{id}": {
            "get": {
                "tags": [
                    "contact"
                ],
                "summary": "Get contact by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperContact"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "contact"
                ],
                "summary": "[BETA] Update contact.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Contact"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperContact"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/country": {
            "get": {
                "tags": [
                    "country"
                ],
                "summary": "Find countries corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCountry"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/country/{id}": {
            "get": {
                "tags": [
                    "country"
                ],
                "summary": "Get country by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCountry"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/crm/prospect": {
            "get": {
                "tags": [
                    "crm/prospect"
                ],
                "summary": "Find prospects corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "createdDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "salesEmployeeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isClosed",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "closedReason",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "closedDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "closedDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "competitor",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "prospectType",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectOfferId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProspect"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/crm/prospect/{id}": {
            "get": {
                "tags": [
                    "crm/prospect"
                ],
                "summary": "Get prospect by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProspect"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/currency": {
            "get": {
                "tags": [
                    "currency"
                ],
                "summary": "Find currencies corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Currency codes",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCurrency"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/currency/{id}": {
            "get": {
                "tags": [
                    "currency"
                ],
                "summary": "Get currency by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCurrency"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/currency/{id}/rate": {
            "get": {
                "tags": [
                    "currency"
                ],
                "summary": "Find currency exchange rate corresponding with sent data.",
                "operationId": "getRate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Currency id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCurrencyExchangeRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/customer": {
            "get": {
                "tags": [
                    "customer"
                ],
                "summary": "Find customers corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customerAccountNumber",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organizationNumber",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceEmail",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "accountManagerId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCustomer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "customer"
                ],
                "summary": "Create customer. Related customer addresses may also be created.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCustomer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/customer/category": {
            "get": {
                "tags": [
                    "customer/category"
                ],
                "summary": "Find customer/supplier categories corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCustomerCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "customer/category"
                ],
                "summary": "Add new customer/supplier category.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerCategory"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/customer/category/{id}": {
            "get": {
                "tags": [
                    "customer/category"
                ],
                "summary": "Find customer/supplier category by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "customer/category"
                ],
                "summary": "Update customer/supplier category.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerCategory"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCustomerCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/customer/list": {
            "put": {
                "tags": [
                    "customer"
                ],
                "summary": "[BETA] Update multiple customers. Addresses can also be updated.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCustomer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "customer"
                ],
                "summary": "[BETA] Create multiple customers. Related supplier addresses may also be created.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Customer"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCustomer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/customer/{id}": {
            "get": {
                "tags": [
                    "customer"
                ],
                "summary": "Get customer by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCustomer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "customer"
                ],
                "summary": "Update customer. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Customer"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCustomer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/deliveryAddress": {
            "get": {
                "tags": [
                    "deliveryAddress"
                ],
                "summary": "Find addresses corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressLine1",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressLine2",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "postalCode",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDeliveryAddress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/deliveryAddress/{id}": {
            "get": {
                "tags": [
                    "deliveryAddress"
                ],
                "summary": "Get address by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDeliveryAddress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "deliveryAddress"
                ],
                "summary": "Update address.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/DeliveryAddress"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDeliveryAddress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/department": {
            "get": {
                "tags": [
                    "department"
                ],
                "summary": "Find department corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "departmentNumber",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "departmentManagerId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDepartment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "department"
                ],
                "summary": "[BETA] Add new department.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Department"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDepartment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/department/list": {
            "put": {
                "tags": [
                    "department"
                ],
                "summary": "[BETA] Update multiple departments.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDepartment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "department"
                ],
                "summary": "[BETA] Register new departments.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDepartment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/department/{id}": {
            "get": {
                "tags": [
                    "department"
                ],
                "summary": "Get department by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDepartment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "department"
                ],
                "summary": "[BETA] Update department.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Department"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDepartment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "department"
                ],
                "summary": "Delete department by ID",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/division": {
            "get": {
                "tags": [
                    "division"
                ],
                "summary": "[BETA] Get divisions.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDivision"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "division"
                ],
                "summary": "[BETA] Create division.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Division"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDivision"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/division/list": {
            "put": {
                "tags": [
                    "division"
                ],
                "summary": "[BETA] Update multiple divisions.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Division"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDivision"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "division"
                ],
                "summary": "[BETA] Create divisions.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Division"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDivision"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/division/{id}": {
            "put": {
                "tags": [
                    "division"
                ],
                "summary": "[BETA] Update division information.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Division"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDivision"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/document/{id}": {
            "get": {
                "tags": [
                    "document"
                ],
                "summary": "[BETA] Get document by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocument"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/document/{id}/content": {
            "get": {
                "tags": [
                    "document"
                ],
                "summary": "[BETA] Get content of document given by ID.",
                "operationId": "downloadContent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of document to download content from.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/account/{id}": {
            "get": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Find documents archived associated with account object type.",
                "operationId": "getAccount",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "periodDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload file to Account Document Archive.",
                "operationId": "accountPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/customer/{id}": {
            "get": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Find documents archived associated with customer object type.",
                "operationId": "getCustomer",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "periodDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload file to Customer Document Archive.",
                "operationId": "customerPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/employee/{id}": {
            "get": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Find documents archived associated with employee object type.",
                "operationId": "getEmployee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "periodDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload file to Employee Document Archive.",
                "operationId": "employeePost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/product/{id}": {
            "get": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Find documents archived associated with product object type.",
                "operationId": "getProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "periodDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload file to Product Document Archive.",
                "operationId": "productPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/project/{id}": {
            "get": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Find documents archived associated with project object type.",
                "operationId": "getProject",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "periodDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload file to Project Document Archive.",
                "operationId": "projectPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/prospect/{id}": {
            "get": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Find documents archived associated with prospect object type.",
                "operationId": "getProspect",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "periodDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload file to Prospect Document Archive.",
                "operationId": "prospectPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/reception": {
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload a file to the document archive reception. Send as multipart form.",
                "operationId": "receptionPost",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/supplier/{id}": {
            "get": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Find documents archived associated with supplier object type.",
                "operationId": "getSupplier",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "periodDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Upload file to Supplier Document Archive.",
                "operationId": "supplierPost",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/documentArchive/{id}": {
            "put": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Update document archive.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentArchive"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "documentArchive"
                ],
                "summary": "[BETA] Delete document archive.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee": {
            "get": {
                "tags": [
                    "employee"
                ],
                "summary": "Find employees corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeNumber",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allowInformationRegistration",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeContacts",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "onlyProjectManagers",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "periodStart",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "periodEnd",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmployee"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "employee"
                ],
                "summary": "[BETA] Create one employee.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Employee"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmployee"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/employment": {
            "get": {
                "tags": [
                    "employee/employment"
                ],
                "summary": "Find all employments for employee.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmployment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "employee/employment"
                ],
                "summary": "[BETA] Create employment.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Employment"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmployment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/employment/details": {
            "get": {
                "tags": [
                    "employee/employment/details"
                ],
                "summary": "[BETA] Find all employmentdetails for employment.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "employmentId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmploymentDetails"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "employee/employment/details"
                ],
                "summary": "[BETA] Create employment details.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/EmploymentDetails"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/employment/details/{id}": {
            "get": {
                "tags": [
                    "employee/employment/details"
                ],
                "summary": "[BETA] Find employment details by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "employee/employment/details"
                ],
                "summary": "[BETA] Update employment details. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/EmploymentDetails"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmploymentDetails"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/employment/employmentType": {
            "get": {
                "tags": [
                    "employee/employment/employmentType"
                ],
                "summary": "[BETA] Find all employment type IDs.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmploymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/employmentType/maritimeEmploymentType": {
            "get": {
                "tags": [
                    "employee/employment/employmentType"
                ],
                "summary": "[BETA] Find all maritime employment type IDs.",
                "operationId": "getMaritimeEmploymentType",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "maritimeEmploymentType",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SHIP_REGISTER",
                                "SHIP_TYPE",
                                "TRADE_AREA"
                            ]
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmploymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/employmentType/salaryType": {
            "get": {
                "tags": [
                    "employee/employment/employmentType"
                ],
                "summary": "[BETA] Find all salary type IDs.",
                "operationId": "getSalaryType",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmploymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/employmentType/scheduleType": {
            "get": {
                "tags": [
                    "employee/employment/employmentType"
                ],
                "summary": "[BETA] Find all schedule type IDs.",
                "operationId": "getScheduleType",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmploymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/leaveOfAbsence": {
            "post": {
                "tags": [
                    "employee/employment/leaveOfAbsence"
                ],
                "summary": "[BETA] Create leave of absence.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/LeaveOfAbsence"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/employment/leaveOfAbsence/list": {
            "post": {
                "tags": [
                    "employee/employment/leaveOfAbsence"
                ],
                "summary": "[BETA] Create multiple leave of absences.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LeaveOfAbsence"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseLeaveOfAbsence"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/employment/leaveOfAbsence/{id}": {
            "get": {
                "tags": [
                    "employee/employment/leaveOfAbsence"
                ],
                "summary": "[BETA] Find leave of absence by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "employee/employment/leaveOfAbsence"
                ],
                "summary": "[BETA] Update leave of absence. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/LeaveOfAbsence"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperLeaveOfAbsence"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/employment/leaveOfAbsenceType": {
            "get": {
                "tags": [
                    "employee/employment/leaveOfAbsenceType"
                ],
                "summary": "[BETA] Find all leave of absence type IDs.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseLeaveOfAbsenceType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/occupationCode": {
            "get": {
                "tags": [
                    "employee/employment/occupationCode"
                ],
                "summary": "[BETA] Find all profession codes.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "nameNO",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseOccupationCode"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/remunerationType": {
            "get": {
                "tags": [
                    "employee/employment/remunerationType"
                ],
                "summary": "[BETA] Find all remuneration type IDs.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseRemunerationType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/workingHoursScheme": {
            "get": {
                "tags": [
                    "employee/employment/workingHoursScheme"
                ],
                "summary": "[BETA] Find working hours scheme ID.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseWorkingHoursScheme"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/employment/{id}": {
            "get": {
                "tags": [
                    "employee/employment"
                ],
                "summary": "Find employment by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmployment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "employee/employment"
                ],
                "summary": "[BETA] Update employemnt. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Employment"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmployment"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/entitlement": {
            "get": {
                "tags": [
                    "employee/entitlement"
                ],
                "summary": "Find all entitlements for user.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEntitlement"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/entitlement/:grantClientEntitlementsByTemplate": {
            "put": {
                "tags": [
                    "employee/entitlement"
                ],
                "summary": "[BETA] Update employee entitlements in client account.",
                "operationId": "grantClientEntitlementsByTemplate",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Client ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "template",
                        "in": "query",
                        "description": "Template",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NONE_PRIVILEGES",
                                "STANDARD_PRIVILEGES_ACCOUNTANT",
                                "STANDARD_PRIVILEGES_AUDITOR",
                                "ALL_PRIVILEGES",
                                "AGRO_READ_ONLY",
                                "AGRO_READ_APPROVE",
                                "AGRO_READ_WRITE",
                                "AGRO_READ_WRITE_APPROVE",
                                "MAMUT_PAYROLL_ADMIN",
                                "MAMUT_PAYROLL_CLERK",
                                "AGRO_PAYROLL_ADMIN",
                                "AGRO_PAYROLL_CLERK",
                                "AGRO_INVOICE_ADMIN",
                                "AGRO_INVOICE_CLERK"
                            ]
                        }
                    },
                    {
                        "name": "addToExisting",
                        "in": "query",
                        "description": "Add template to existing entitlements",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/entitlement/:grantEntitlementsByTemplate": {
            "put": {
                "tags": [
                    "employee/entitlement"
                ],
                "summary": "[BETA] Update employee entitlements.",
                "description": "The user will only receive the entitlements which are possible with the registered user type",
                "operationId": "grantEntitlementsByTemplate",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "template",
                        "in": "query",
                        "description": "Template",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NONE_PRIVILEGES",
                                "ALL_PRIVILEGES",
                                "INVOICING_MANAGER",
                                "PERSONELL_MANAGER",
                                "ACCOUNTANT",
                                "AUDITOR",
                                "DEPARTMENT_LEADER",
                                "MAMUT_USER_ADMIN",
                                "MAMUT_USER"
                            ]
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/entitlement/client": {
            "get": {
                "tags": [
                    "employee/entitlement"
                ],
                "summary": "[BETA] Find all entitlements at client for user.",
                "operationId": "client",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Client ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEntitlement"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/entitlement/{id}": {
            "get": {
                "tags": [
                    "employee/entitlement"
                ],
                "summary": "Get entitlement by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEntitlement"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/employee/hourlyCostAndRate": {
            "get": {
                "tags": [
                    "employee/hourlyCostAndRate"
                ],
                "summary": "Find all hourly cost and rates for employee.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseHourlyCostAndRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "employee/hourlyCostAndRate"
                ],
                "summary": "[BETA] Create hourly cost and rate.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/HourlyCostAndRate"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/hourlyCostAndRate/{id}": {
            "get": {
                "tags": [
                    "employee/hourlyCostAndRate"
                ],
                "summary": "[BETA] Find hourly cost and rate by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "employee/hourlyCostAndRate"
                ],
                "summary": "[BETA] Update hourly cost and rate. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/HourlyCostAndRate"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperHourlyCostAndRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/list": {
            "post": {
                "tags": [
                    "employee"
                ],
                "summary": "[BETA] Create several employees.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Employee"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseEmployee"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/nextOfKin": {
            "get": {
                "tags": [
                    "employee/nextOfKin"
                ],
                "summary": "Find all next of kin for employee.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseNextOfKin"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "employee/nextOfKin"
                ],
                "summary": "[BETA] Create next of kin.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/NextOfKin"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/nextOfKin/{id}": {
            "get": {
                "tags": [
                    "employee/nextOfKin"
                ],
                "summary": "[BETA] Find next of kin by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "employee/nextOfKin"
                ],
                "summary": "[BETA] Update next of kin. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/NextOfKin"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperNextOfKin"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/standardTime": {
            "get": {
                "tags": [
                    "employee/standardTime"
                ],
                "summary": "[BETA] Find all standard times for employee.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseStandardTime"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "employee/standardTime"
                ],
                "summary": "[BETA] Create standard time.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/StandardTime"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/standardTime/{id}": {
            "get": {
                "tags": [
                    "employee/standardTime"
                ],
                "summary": "[BETA] Find standard time by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "employee/standardTime"
                ],
                "summary": "[BETA] Update standard time. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/StandardTime"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperStandardTime"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/employee/{id}": {
            "get": {
                "tags": [
                    "employee"
                ],
                "summary": "Get employee by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmployee"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "employee"
                ],
                "summary": "Update employee.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Employee"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmployee"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/event": {
            "get": {
                "tags": [
                    "event"
                ],
                "summary": "[BETA] Get all (WebHook) event keys.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperMapStringEventInfoDescription"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/event/subscription": {
            "get": {
                "tags": [
                    "event/subscription"
                ],
                "summary": "[BETA] Find all ongoing subscriptions.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseSubscription"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "event/subscription"
                ],
                "summary": "[BETA] Create a new subscription for current EmployeeToken.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscription"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSubscription"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/event/subscription/{id}": {
            "get": {
                "tags": [
                    "event/subscription"
                ],
                "summary": "[BETA] Get subscription by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSubscription"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "event/subscription"
                ],
                "summary": "[BETA] Change a current subscription, based on id.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/Subscription"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSubscription"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "event/subscription"
                ],
                "summary": "[BETA] Delete the given subscription.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/event/{eventType}": {
            "get": {
                "tags": [
                    "event"
                ],
                "summary": "[BETA] Get example webhook payload",
                "operationId": "example",
                "parameters": [
                    {
                        "name": "eventType",
                        "in": "path",
                        "description": "Event type, from /event endpoint",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEventInfoDTO"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/inventory": {
            "get": {
                "tags": [
                    "inventory"
                ],
                "summary": "Find inventory corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isMainInventory",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseInventory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "inventory"
                ],
                "summary": "[BETA] Create new inventory.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Inventory"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInventory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/inventory/inventories": {
            "get": {
                "tags": [
                    "inventory/inventories"
                ],
                "summary": "[BETA] Find inventories corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseInventories"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/inventory/stocktaking": {
            "get": {
                "tags": [
                    "inventory/stocktaking"
                ],
                "summary": "[BETA] Find stocktaking corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isCompleted",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "inventoryId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseStocktaking"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "inventory/stocktaking"
                ],
                "summary": "[BETA] Create new stocktaking.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Stocktaking"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/inventory/stocktaking/productline": {
            "get": {
                "tags": [
                    "inventory/stocktaking/productline"
                ],
                "summary": "[BETA] Find all product lines by stocktaking ID.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "stocktakingId",
                        "in": "query",
                        "description": "Equals",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProductLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "inventory/stocktaking/productline"
                ],
                "summary": "[BETA] Create product line. When creating several product lines, use /list for better performance.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductLine"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/inventory/stocktaking/productline/{id}": {
            "get": {
                "tags": [
                    "inventory/stocktaking/productline"
                ],
                "summary": "[BETA] Get product line by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "inventory/stocktaking/productline"
                ],
                "summary": "[BETA] Update product line.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductLine"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "inventory/stocktaking/productline"
                ],
                "summary": "[BETA] Delete product line.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/inventory/stocktaking/{id}": {
            "get": {
                "tags": [
                    "inventory/stocktaking"
                ],
                "summary": "[BETA] Get stocktaking by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "inventory/stocktaking"
                ],
                "summary": "[BETA] Update stocktaking.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Stocktaking"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperStocktaking"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "inventory/stocktaking"
                ],
                "summary": "[BETA] Delete stocktaking.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/inventory/{id}": {
            "get": {
                "tags": [
                    "inventory"
                ],
                "summary": "Get inventory by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInventory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "inventory"
                ],
                "summary": "[BETA] Update inventory.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Inventory"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInventory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "inventory"
                ],
                "summary": "[BETA] Delete inventory.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice": {
            "get": {
                "tags": [
                    "invoice"
                ],
                "summary": "Find invoices corresponding with sent data. Includes charged outgoing invoices only.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceNumber",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "kid",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "voucherId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "invoice"
                ],
                "summary": "Create invoice.",
                "operationId": "post",
                "parameters": [
                    {
                        "name": "sendToCustomer",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "paymentTypeId",
                        "in": "query",
                        "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "paidAmount",
                        "in": "query",
                        "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Invoice"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/invoice/details": {
            "get": {
                "tags": [
                    "invoice/details"
                ],
                "summary": "Find ProjectInvoiceDetails corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectInvoiceDetails"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/details/{id}": {
            "get": {
                "tags": [
                    "invoice/details"
                ],
                "summary": "Get ProjectInvoiceDetails by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectInvoiceDetails"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/paymentType": {
            "get": {
                "tags": [
                    "invoice/paymentType"
                ],
                "summary": "Find payment type corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePaymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/paymentType/{id}": {
            "get": {
                "tags": [
                    "invoice/paymentType"
                ],
                "summary": "Get payment type by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPaymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/{id}": {
            "get": {
                "tags": [
                    "invoice"
                ],
                "summary": "Get invoice by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/{id}/:createCreditNote": {
            "put": {
                "tags": [
                    "invoice"
                ],
                "summary": "Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.",
                "operationId": "createCreditNote",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Credit note date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment",
                        "in": "query",
                        "description": "Comment",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creditNoteEmail",
                        "in": "query",
                        "description": "The credit note will be sent electronically if this field is filled out",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/{id}/:createReminder": {
            "put": {
                "tags": [
                    "invoice"
                ],
                "summary": "Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.",
                "operationId": "createReminder",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "type",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SOFT_REMINDER",
                                "REMINDER",
                                "NOTICE_OF_DEBT_COLLECTION",
                                "DEBT_COLLECTION"
                            ]
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "yyyy-MM-dd. Defaults to today.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeCharge",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "includeInterest",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "dispatchType",
                        "in": "query",
                        "description": "dispatchType",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NETS_PRINT",
                                "EMAIL",
                                "SMS"
                            ]
                        }
                    },
                    {
                        "name": "smsNumber",
                        "in": "query",
                        "description": "SMS number (must be a valid Norwegian telephone number)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/{id}/:payment": {
            "put": {
                "tags": [
                    "invoice"
                ],
                "summary": "Update invoice. The invoice is updated with payment information. The amount is in the invoice??????s currency.",
                "operationId": "payment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "paymentDate",
                        "in": "query",
                        "description": "Payment date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentTypeId",
                        "in": "query",
                        "description": "PaymentType id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "paidAmount",
                        "in": "query",
                        "description": "Amount paid by customer in the company currency, typically NOK.",
                        "required": true,
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "paidAmountCurrency",
                        "in": "query",
                        "description": "Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/{id}/:send": {
            "put": {
                "tags": [
                    "invoice"
                ],
                "summary": "Send invoice by ID and sendType. Optionally override email recipient.",
                "operationId": "send",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sendType",
                        "in": "query",
                        "description": "SendType",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "EMAIL",
                                "EHF",
                                "EFAKTURA",
                                "VIPPS",
                                "PAPER"
                            ]
                        }
                    },
                    {
                        "name": "overrideEmailAddress",
                        "in": "query",
                        "description": "Will override email address if sendType = EMAIL",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/invoice/{invoiceId}/pdf": {
            "get": {
                "tags": [
                    "invoice"
                ],
                "summary": "Get invoice document by invoice ID.",
                "operationId": "downloadPdf",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "Invoice ID from which PDF is downloaded.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger": {
            "get": {
                "tags": [
                    "ledger"
                ],
                "summary": "Get ledger (hovedbok).",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "openPostings",
                        "in": "query",
                        "description": "Deprecated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "productId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseLedgerAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/account": {
            "get": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "Find accounts corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isBankAccount",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isApplicableForSupplierInvoice",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "[BETA] Create a new account.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/ledger/account/list": {
            "put": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "[BETA] Update multiple accounts.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "[BETA] Create several accounts.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "[BETA] Delete multiple accounts.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/account/{id}": {
            "get": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "Get account by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "[BETA] Update account.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Account"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "ledger/account"
                ],
                "summary": "[BETA] Delete account.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/accountingPeriod": {
            "get": {
                "tags": [
                    "ledger/accountingPeriod"
                ],
                "summary": "Find accounting periods corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "numberFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "numberTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "startFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "endFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "endTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 1400
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseAccountingPeriod"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/accountingPeriod/{id}": {
            "get": {
                "tags": [
                    "ledger/accountingPeriod"
                ],
                "summary": "Get accounting period by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAccountingPeriod"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/annualAccount": {
            "get": {
                "tags": [
                    "ledger/annualAccount"
                ],
                "summary": "Find annual accounts corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "yearFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "yearTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseAnnualAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/annualAccount/{id}": {
            "get": {
                "tags": [
                    "ledger/annualAccount"
                ],
                "summary": "Get annual account by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAnnualAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/closeGroup": {
            "get": {
                "tags": [
                    "ledger/closeGroup"
                ],
                "summary": "Find close groups corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCloseGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/closeGroup/{id}": {
            "get": {
                "tags": [
                    "ledger/closeGroup"
                ],
                "summary": "Get close group by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCloseGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/openPost": {
            "get": {
                "tags": [
                    "ledger"
                ],
                "summary": "Find open posts corresponding with sent data.",
                "operationId": "openPost",
                "parameters": [
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "productId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseLedgerAccount"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/paymentTypeOut": {
            "get": {
                "tags": [
                    "ledger/paymentTypeOut"
                ],
                "summary": "[BETA] Gets payment types for outgoing payments",
                "description": "This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section \u0027Outgoing Payments\u0027 under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "ledger/paymentTypeOut"
                ],
                "summary": "[BETA] Create new payment type for outgoing payments",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentTypeOut"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/ledger/paymentTypeOut/list": {
            "put": {
                "tags": [
                    "ledger/paymentTypeOut"
                ],
                "summary": "[BETA] Update multiple payment types for outgoing payments at once",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PaymentTypeOut"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "ledger/paymentTypeOut"
                ],
                "summary": "[BETA] Create multiple payment types for outgoing payments at once",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PaymentTypeOut"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePaymentTypeOut"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/ledger/paymentTypeOut/{id}": {
            "get": {
                "tags": [
                    "ledger/paymentTypeOut"
                ],
                "summary": "[BETA] Get payment type for outgoing payments by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "ledger/paymentTypeOut"
                ],
                "summary": "[BETA] Update existing payment type for outgoing payments",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentTypeOut"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPaymentTypeOut"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "ledger/paymentTypeOut"
                ],
                "summary": "[BETA] Delete payment type for outgoing payments by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/posting": {
            "get": {
                "tags": [
                    "ledger/posting"
                ],
                "summary": "Find postings corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "openPostings",
                        "in": "query",
                        "description": "Deprecated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "productId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePosting"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/posting/openPost": {
            "get": {
                "tags": [
                    "ledger/posting"
                ],
                "summary": "Find open posts corresponding with sent data.",
                "operationId": "openPost",
                "parameters": [
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "productId",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePosting"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/posting/{id}": {
            "get": {
                "tags": [
                    "ledger/posting"
                ],
                "summary": "Find postings by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPosting"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/vatType": {
            "get": {
                "tags": [
                    "ledger/vatType"
                ],
                "summary": "Find vat types corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseVatType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/vatType/{id}": {
            "get": {
                "tags": [
                    "ledger/vatType"
                ],
                "summary": "Get vat type by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVatType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher": {
            "get": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "Find vouchers corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "numberFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "numberTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "typeId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/VoucherSearchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used",
                "operationId": "post",
                "parameters": [
                    {
                        "name": "sendToLedger",
                        "in": "query",
                        "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Voucher"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/ledger/voucher/\u003enonPosted": {
            "get": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Find non-posted vouchers.",
                "operationId": "nonPosted",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeNonApproved",
                        "in": "query",
                        "description": "Include non-approved vouchers in the result.",
                        "required": true,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "changedSince",
                        "in": "query",
                        "description": "Only return elements that have changed since this date and time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/importDocument": {
            "post": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG, TIFF and EHF. Send as multipart form.",
                "operationId": "importDocument",
                "parameters": [
                    {
                        "name": "split",
                        "in": "query",
                        "description": "If the document consists of several pages, should the document be split into one voucher per page?",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Optional description to use for the voucher(s). If omitted the file name will be used."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/importGbat10": {
            "post": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "Import GBAT10. Send as multipart form.",
                "operationId": "importGbat10",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file",
                                    "generateVatPostings"
                                ],
                                "properties": {
                                    "generateVatPostings": {
                                        "type": "boolean",
                                        "description": "If the import should generate VAT postings"
                                    },
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    },
                                    "encoding": {
                                        "type": "string",
                                        "description": "The file encoding",
                                        "default": "utf-8"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/list": {
            "put": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Update multiple vouchers. Postings with guiRow==0 will be deleted and regenerated.",
                "operationId": "putList",
                "parameters": [
                    {
                        "name": "sendToLedger",
                        "in": "query",
                        "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Voucher"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/ledger/voucher/{id}": {
            "get": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "Get voucher by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Update voucher. Postings with guiRow==0 will be deleted and regenerated.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "sendToLedger",
                        "in": "query",
                        "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Voucher"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Delete voucher by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{id}/:reverse": {
            "put": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.",
                "operationId": "reverse",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of voucher that should be reversed.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Reverse voucher date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{id}/:sendToInbox": {
            "put": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Send voucher to inbox.",
                "operationId": "sendToInbox",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of voucher that should be sent to inbox.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of voucher that should be sent to inbox.",
                        "schema": {
                            "minimum": 0.0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "comment",
                        "in": "query",
                        "description": "Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{id}/:sendToLedger": {
            "put": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Send voucher to ledger.",
                "operationId": "sendToLedger",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of voucher that should be sent to ledger.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of voucher that should be sent to ledger.",
                        "schema": {
                            "minimum": 0.0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Voucher number to use. If omitted or 0 the system will assign the number.",
                        "schema": {
                            "minimum": 0.0,
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucher"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{id}/attachment": {
            "delete": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Delete attachment.",
                "operationId": "deleteAttachment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of voucher containing the attachment to delete.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of voucher containing the attachment to delete.",
                        "schema": {
                            "minimum": 0.0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sendToInbox",
                        "in": "query",
                        "description": "Should the attachment be sent to inbox rather than deleted?",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "split",
                        "in": "query",
                        "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{id}/options": {
            "get": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[BETA] Returns a data structure containing meta information about operations that are available for this voucher. Currently only implemented for DELETE: It is possible to check if the voucher is deletable.",
                "operationId": "options",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucherOptions"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{voucherId}/attachment": {
            "post": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.",
                "operationId": "uploadAttachment",
                "parameters": [
                    {
                        "name": "voucherId",
                        "in": "path",
                        "description": "Voucher ID to upload attachment to.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{voucherId}/pdf": {
            "get": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "Get PDF representation of voucher by ID.",
                "operationId": "downloadPdf",
                "parameters": [
                    {
                        "name": "voucherId",
                        "in": "path",
                        "description": "Voucher ID from which PDF is downloaded.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucher/{voucherId}/pdf/{fileName}": {
            "post": {
                "tags": [
                    "ledger/voucher"
                ],
                "summary": "[DEPRECATED] Use POST ledger/voucher/{voucherId}/attachment instead.",
                "operationId": "uploadPdf",
                "parameters": [
                    {
                        "name": "voucherId",
                        "in": "path",
                        "description": "Voucher ID to upload PDF to.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fileName",
                        "in": "path",
                        "description": "File name to store the pdf under. Will not be the same as the filename on the file returned.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucherType": {
            "get": {
                "tags": [
                    "ledger/voucherType"
                ],
                "summary": "Find voucher types corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseVoucherType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/ledger/voucherType/{id}": {
            "get": {
                "tags": [
                    "ledger/voucherType"
                ],
                "summary": "Get voucher type by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperVoucherType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/municipality": {
            "get": {
                "tags": [
                    "municipality"
                ],
                "summary": "[BETA] Get municipalities.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "includePayrollTaxZones",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseMunicipality"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/order": {
            "get": {
                "tags": [
                    "order"
                ],
                "summary": "Find orders corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isClosed",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isSubscription",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "order"
                ],
                "summary": "Create order.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/order/:invoiceMultipleOrders": {
            "put": {
                "tags": [
                    "order"
                ],
                "summary": "[BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email and attn.",
                "operationId": "invoiceMultipleOrders",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of Order IDs - to the same customer, separated by comma.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceDate",
                        "in": "query",
                        "description": "The invoice date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/order/orderline": {
            "post": {
                "tags": [
                    "order/orderline"
                ],
                "summary": "Create order line. When creating several order lines, use /list for better performance.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderLine"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/order/orderline/list": {
            "post": {
                "tags": [
                    "order/orderline"
                ],
                "summary": "Create multiple order lines.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OrderLine"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/order/orderline/{id}": {
            "get": {
                "tags": [
                    "order/orderline"
                ],
                "summary": "Get order line by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "order/orderline"
                ],
                "summary": "[BETA] Delete order line by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/order/{id}": {
            "get": {
                "tags": [
                    "order"
                ],
                "summary": "Get order by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "order"
                ],
                "summary": "Update order.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Order"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/order/{id}/:approveSubscriptionInvoice": {
            "put": {
                "tags": [
                    "order"
                ],
                "summary": "To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.",
                "operationId": "approveSubscriptionInvoice",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of order to approve for subscription invoicing.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "invoiceDate",
                        "in": "query",
                        "description": "The approval date for the subscription.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/order/{id}/:attach": {
            "put": {
                "tags": [
                    "order"
                ],
                "summary": "Attach document to specified order ID.",
                "operationId": "attach",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDocumentArchive"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/order/{id}/:invoice": {
            "put": {
                "tags": [
                    "order"
                ],
                "summary": "Create new invoice from order.",
                "operationId": "invoice",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of order to invoice.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "invoiceDate",
                        "in": "query",
                        "description": "The invoice date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sendToCustomer",
                        "in": "query",
                        "description": "Send invoice to customer",
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    },
                    {
                        "name": "paymentTypeId",
                        "in": "query",
                        "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "paidAmount",
                        "in": "query",
                        "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/order/{id}/:unApproveSubscriptionInvoice": {
            "put": {
                "tags": [
                    "order"
                ],
                "summary": "Unapproves the order for subscription invoicing.",
                "operationId": "unApproveSubscriptionInvoice",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of order to unapprove for subscription invoicing.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product": {
            "get": {
                "tags": [
                    "product"
                ],
                "summary": "Find products corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "number",
                        "in": "query",
                        "description": "DEPRECATED. List of product numbers (Integer only)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productNumber",
                        "in": "query",
                        "description": "List of valid product numbers",
                        "style": "form",
                        "explode": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ean",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isStockItem",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "currencyId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vatTypeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productUnitId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "costExcludingVatCurrencyFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "costExcludingVatCurrencyTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "priceExcludingVatCurrencyFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "priceExcludingVatCurrencyTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "priceIncludingVatCurrencyFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "priceIncludingVatCurrencyTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "product"
                ],
                "summary": "Create new product.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/product/external": {
            "get": {
                "tags": [
                    "product/external"
                ],
                "summary": "[BETA] Find external products corresponding with sent data. The sorting-field is not in use on this endpoint.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "wholesaler",
                        "in": "query",
                        "description": "Wholesaler",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "AHLSELL",
                                "BROEDRENE_DAHL",
                                "ELEKTROSKANDIA",
                                "HEIDENREICH",
                                "ONNINEN",
                                "OTRA",
                                "SOLAR",
                                "BERGAARD_AMUNDSEN",
                                "BERGAARD_AMUNDSEN_STAVANGER",
                                "SORLANDET_ELEKTRO",
                                "ETMAN_DISTRIBUSJON",
                                "ETM_OST",
                                "CENIKA",
                                "EP_ENGROS",
                                "BETEK",
                                "DGROUP",
                                "FAGERHULT",
                                "GLAMOX",
                                "SCHNEIDER",
                                "STOKKAN",
                                "WURTH",
                                "ELEKTROIMPORTOEREN",
                                "THERMOFLOOR",
                                "LYSKOMPONENTER",
                                "NORDESIGN"
                            ]
                        }
                    },
                    {
                        "name": "organizationNumber",
                        "in": "query",
                        "description": "Wholesaler organization number. Mandatory if Wholesaler is not selected. If Wholesaler is selected, this field is ignored.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "elNumber",
                        "in": "query",
                        "description": "List of valid el numbers",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nrfNumber",
                        "in": "query",
                        "description": "List of valid nrf numbers",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseExternalProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/external/{id}": {
            "get": {
                "tags": [
                    "product/external"
                ],
                "summary": "[BETA] Get external product by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperExternalProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/group": {
            "get": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Find product group with sent data",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProductGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Create new product group.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductGroup"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/product/group/list": {
            "put": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Update a list of product groups.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProductGroup"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProductGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Add multiple products groups.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProductGroup"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProductGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Delete multiple product groups.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/group/{id}": {
            "get": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Find product group by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Update product group.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductGroup"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "product/group"
                ],
                "summary": "[BETA] Delete product group.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/groupRelation": {
            "get": {
                "tags": [
                    "product/groupRelation"
                ],
                "summary": "[BETA] Find product group relation with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productGroupId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProductGroupRelation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "product/groupRelation"
                ],
                "summary": "[BETA] Create new product group relation.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductGroupRelation"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductGroupRelation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/product/groupRelation/list": {
            "post": {
                "tags": [
                    "product/groupRelation"
                ],
                "summary": "[BETA] Add multiple products group relations.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProductGroupRelation"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProductGroupRelation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "product/groupRelation"
                ],
                "summary": "[BETA] Delete multiple product group relations.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/groupRelation/{id}": {
            "get": {
                "tags": [
                    "product/groupRelation"
                ],
                "summary": "[BETA] Find product group relation by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductGroupRelation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "product/groupRelation"
                ],
                "summary": "[BETA] Delete product group relation.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/list": {
            "put": {
                "tags": [
                    "product"
                ],
                "summary": "[BETA] Update a list of products.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "product"
                ],
                "summary": "[BETA] Add multiple products.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/product/unit": {
            "get": {
                "tags": [
                    "product/unit"
                ],
                "summary": "Find product units corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Names",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nameShort",
                        "in": "query",
                        "description": "Short names",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commonCode",
                        "in": "query",
                        "description": "Common codes",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProductUnit"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/unit/{id}": {
            "get": {
                "tags": [
                    "product/unit"
                ],
                "summary": "Get product unit by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProductUnit"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/product/{id}": {
            "get": {
                "tags": [
                    "product"
                ],
                "summary": "Get product by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "product"
                ],
                "summary": "Update product.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Product"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProduct"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "product"
                ],
                "summary": "[BETA] Delete product.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project": {
            "get": {
                "tags": [
                    "project"
                ],
                "summary": "Find projects corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isOffer",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "projectManagerId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeInProjectId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "endDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "endDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isClosed",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "externalAccountsNumber",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "project"
                ],
                "summary": "[BETA] Add new project.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Project"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project"
                ],
                "summary": "[BETA] Delete multiple projects.",
                "operationId": "deleteList",
                "requestBody": {
                    "description": "JSON representing objects to delete. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/\u003eforTimeSheet": {
            "get": {
                "tags": [
                    "project"
                ],
                "summary": "Find projects applicable for time sheet registration on a specific day.",
                "operationId": "getForTimeSheet",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "yyyy-MM-dd. Defaults to today.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/category": {
            "get": {
                "tags": [
                    "project/category"
                ],
                "summary": "Find project categories corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "project/category"
                ],
                "summary": "Add new project category.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCategory"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/category/{id}": {
            "get": {
                "tags": [
                    "project/category"
                ],
                "summary": "Find project category by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "project/category"
                ],
                "summary": "Update project category.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectCategory"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/controlForm": {
            "get": {
                "tags": [
                    "project/controlForm"
                ],
                "summary": "[BETA] Get project control forms by project ID.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectControlForm"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/controlForm/{id}": {
            "get": {
                "tags": [
                    "project/controlForm"
                ],
                "summary": "[BETA] Get project control form by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectControlForm"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/hourlyRates": {
            "get": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Find project hourly rates corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TYPE_PREDEFINED_HOURLY_RATES",
                                "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                                "TYPE_FIXED_HOURLY_RATE"
                            ]
                        }
                    },
                    {
                        "name": "startDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showInProjectOrder",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Create a project hourly rate. ",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectHourlyRate"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/hourlyRates/list": {
            "put": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Update multiple project hourly rates.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProjectHourlyRate"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Create multiple project hourly rates.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProjectHourlyRate"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectHourlyRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Delete project hourly rates.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/hourlyRates/projectSpecificRates": {
            "get": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Find project specific rates corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectHourlyRateId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Create new project specific rate. ",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectSpecificRate"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/hourlyRates/projectSpecificRates/list": {
            "put": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Update multiple project specific rates.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProjectSpecificRate"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Create multiple new project specific rates.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProjectSpecificRate"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectSpecificRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Delete project specific rates.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/hourlyRates/projectSpecificRates/{id}": {
            "get": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Find project specific rate by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Update a project specific rate.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectSpecificRate"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectSpecificRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project/hourlyRates/projectSpecificRates"
                ],
                "summary": "Delete project specific rate ",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/hourlyRates/{id}": {
            "get": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Find project hourly rate by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Update a project hourly rate.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectHourlyRate"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectHourlyRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project/hourlyRates"
                ],
                "summary": "Delete Project Hourly Rate ",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/list": {
            "put": {
                "tags": [
                    "project"
                ],
                "summary": "[BETA] Update multiple projects.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "project"
                ],
                "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Project"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project"
                ],
                "summary": "[BETA] Delete projects.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/orderline": {
            "get": {
                "tags": [
                    "project/orderline"
                ],
                "summary": "[BETA] Find all order lines for project.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Equals",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "project/orderline"
                ],
                "summary": "[BETA] Create order line. When creating several order lines, use /list for better performance.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectOrderLine"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/orderline/list": {
            "post": {
                "tags": [
                    "project/orderline"
                ],
                "summary": "[BETA] Create multiple order lines.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProjectOrderLine"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/orderline/{id}": {
            "get": {
                "tags": [
                    "project/orderline"
                ],
                "summary": "[BETA] Get order line by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "project/orderline"
                ],
                "summary": "[BETA] Update project orderline.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectOrderLine"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectOrderLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project/orderline"
                ],
                "summary": "Delete order line by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/participant": {
            "post": {
                "tags": [
                    "project/participant"
                ],
                "summary": "[BETA] Add new project participant.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectParticipant"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/participant/list": {
            "post": {
                "tags": [
                    "project/participant"
                ],
                "summary": "[BETA] Add new project participant. Multiple project participants can be sent in the same request.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ProjectParticipant"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectParticipant"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project/participant"
                ],
                "summary": "[BETA] Delete project participants.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/participant/{id}": {
            "get": {
                "tags": [
                    "project/participant"
                ],
                "summary": "[BETA] Find project participant by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "project/participant"
                ],
                "summary": "[BETA] Update project participant.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectParticipant"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectParticipant"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/projectActivity": {
            "post": {
                "tags": [
                    "project/projectActivity"
                ],
                "summary": "Add project activity.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectActivity"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/project/projectActivity/list": {
            "delete": {
                "tags": [
                    "project/projectActivity"
                ],
                "summary": "Delete project activities",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/projectActivity/{id}": {
            "get": {
                "tags": [
                    "project/projectActivity"
                ],
                "summary": "Find project activity by id",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "project/projectActivity"
                ],
                "summary": "Delete project activity",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/task": {
            "get": {
                "tags": [
                    "project/task"
                ],
                "summary": "Find all tasks for project.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTask"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/{id}": {
            "get": {
                "tags": [
                    "project"
                ],
                "summary": "Find project by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "project"
                ],
                "summary": "[BETA] Update project.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Project"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "project"
                ],
                "summary": "[BETA] Delete project.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/{id}/period/hourlistReport": {
            "get": {
                "tags": [
                    "project/period"
                ],
                "summary": "Find hourlist report by project period.",
                "operationId": "hourlistReport",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectPeriodHourlyReport"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/{id}/period/invoiced": {
            "get": {
                "tags": [
                    "project/period"
                ],
                "summary": "Find invoiced info by project period.",
                "operationId": "invoiced",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectPeriodInvoiced"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/{id}/period/invoicingReserve": {
            "get": {
                "tags": [
                    "project/period"
                ],
                "summary": "Find invoicing reserve by project period.",
                "operationId": "invoicingReserve",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectPeriodInvoicingReserve"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/{id}/period/monthlyStatus": {
            "get": {
                "tags": [
                    "project/period"
                ],
                "summary": "Find overall status by project period.",
                "operationId": "monthlyStatus",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProjectPeriodMonthlyStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/project/{id}/period/overallStatus": {
            "get": {
                "tags": [
                    "project/period"
                ],
                "summary": "Find overall status by project period.",
                "operationId": "overallStatus",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperProjectPeriodOverallStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder": {
            "get": {
                "tags": [
                    "purchaseOrder"
                ],
                "summary": "[BETA] Find purchase orders with send data",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deliveryDateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deliveryDateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and incl.).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creationDateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creationDateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and incl.).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isClosed",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "withDeviationOnly",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "purchaseOrder"
                ],
                "summary": "[BETA] Creates a new purchase order",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PurchaseOrder"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/purchaseOrder/deviation": {
            "get": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Find handled deviations for purchase order. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "purchaseOrderId",
                        "in": "query",
                        "description": "Equals",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDeviation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Register deviation on goods receipt. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Deviation"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDeviation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/purchaseOrder/deviation/list": {
            "put": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Update multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Deviation"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDeviation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Register multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Deviation"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseDeviation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/purchaseOrder/deviation/{id}": {
            "get": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": " [BETA] Get deviation by order line ID. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDeviation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "Update deviation. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Deviation"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDeviation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Delete goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/deviation/{id}/:approve": {
            "put": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Approve deviations. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "approve",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Purchase Order ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/deviation/{id}/:deliver": {
            "put": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Send deviations to approval. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "deliver",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Purchase Order ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/deviation/{id}/:undeliver": {
            "put": {
                "tags": [
                    "purchaseOrder/deviation"
                ],
                "summary": "[BETA] Undeliver the deviations. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "undeliver",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Purchase Order ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/goodsReceipt": {
            "get": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Get goods receipt. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "receivedDateFrom",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "receivedDateTo",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and incl.).",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "STATUS_OPEN",
                                "STATUS_CONFIRMED"
                            ]
                        }
                    },
                    {
                        "name": "withoutPurchase",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseGoodsReceipt"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/GoodsReceipt"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/purchaseOrder/goodsReceipt/list": {
            "post": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GoodsReceipt"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseGoodsReceipt"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/goodsReceipt/{id}": {
            "get": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Update goods receipt. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Goods Receipt ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/GoodsReceipt"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/goodsReceipt/{id}/:confirm": {
            "put": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Confirm goods receipt. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "confirm",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Purchase Order ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "createRestOrder",
                        "in": "query",
                        "description": "Create restorder if quantity received is less than ordered",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm": {
            "put": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "receiveAndConfirm",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Purchase Order ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "receivedDate",
                        "in": "query",
                        "description": "The approval date for the subscription.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryId",
                        "in": "query",
                        "description": "ID of inventory. Main inventory is set as default",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt": {
            "put": {
                "tags": [
                    "purchaseOrder/goodsReceipt"
                ],
                "summary": "[BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "registerGoodsReceipt",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Purchase Order ID.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "registrationDate",
                        "in": "query",
                        "description": "yyyy-MM-dd. Defaults to today.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryId",
                        "in": "query",
                        "description": "ID of inventory. Main inventory is set as default",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperGoodsReceipt"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/goodsReceiptLine": {
            "get": {
                "tags": [
                    "purchaseOrder/goodsReceiptLine"
                ],
                "summary": "[BETA] Find goods receipt lines for purchase order. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "purchaseOrderId",
                        "in": "query",
                        "description": "Equals",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseGoodsReceiptLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "purchaseOrder/goodsReceiptLine"
                ],
                "summary": "[BETA] Register new goods receipt; new product on an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/GoodsReceiptLine"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/purchaseOrder/goodsReceiptLine/list": {
            "post": {
                "tags": [
                    "purchaseOrder/goodsReceiptLine"
                ],
                "summary": "[BETA] Register multiple new goods receipt on an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/GoodsReceiptLine"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseGoodsReceiptLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/purchaseOrder/goodsReceiptLine/{id}": {
            "get": {
                "tags": [
                    "purchaseOrder/goodsReceiptLine"
                ],
                "summary": "[BETA] Get goods receipt line by purchase order line ID. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "purchaseOrder/goodsReceiptLine"
                ],
                "summary": "[BETA] Enter goods receipt on purchase order line. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Purchase Order Line ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/GoodsReceiptLine"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperGoodsReceiptLine"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "purchaseOrder/goodsReceiptLine"
                ],
                "summary": "[BETA] Delete goods receipt line by ID. Only available for users that have activated the Logistics Plus Beta-program in \u0027Our customer account\u0027",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/orderline": {
            "post": {
                "tags": [
                    "purchaseOrder/orderline"
                ],
                "summary": " [BETA] Creates purchase order line.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PurchaseOrderline"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/purchaseOrder/orderline/{id}": {
            "get": {
                "tags": [
                    "purchaseOrder/orderline"
                ],
                "summary": " [BETA] Find purchase order line by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "purchaseOrder/orderline"
                ],
                "summary": " [BETA] Updates purchase order line",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PurchaseOrderline"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrderline"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "purchaseOrder/orderline"
                ],
                "summary": " [BETA] Delete purchase order line.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/{id}": {
            "get": {
                "tags": [
                    "purchaseOrder"
                ],
                "summary": " [BETA] Find purchase order by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "purchaseOrder"
                ],
                "summary": " [BETA] Update purchase order.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PurchaseOrder"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "purchaseOrder"
                ],
                "summary": " [BETA] Delete purchase order.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/{id}/:send": {
            "put": {
                "tags": [
                    "purchaseOrder"
                ],
                "summary": "[BETA] Send purchase order by id and sendType.",
                "operationId": "send",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sendType",
                        "in": "query",
                        "description": "Send type.DEFAULT will determine the send parameter based on the supplier type.",
                        "schema": {
                            "type": "string",
                            "default": "DEFAULT",
                            "enum": [
                                "DEFAULT",
                                "EMAIL",
                                "FTP"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/purchaseOrder/{id}/:sendByEmail": {
            "put": {
                "tags": [
                    "purchaseOrder"
                ],
                "summary": "[BETA] Send purchase order by customisable email.",
                "operationId": "sendByEmail",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "emailAddress",
                        "in": "query",
                        "description": "Email address",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject",
                        "in": "query",
                        "description": "Subject",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "Message",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPurchaseOrder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/reminder": {
            "get": {
                "tags": [
                    "reminder"
                ],
                "summary": "Find reminders corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "termOfPaymentTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "termOfPaymentFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseReminder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/reminder/{id}": {
            "get": {
                "tags": [
                    "reminder"
                ],
                "summary": "Get reminder by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperReminder"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/compilation": {
            "get": {
                "tags": [
                    "salary/compilation"
                ],
                "summary": "[BETA] Find salary compilation by employee.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Must be between 1900-2100. Defaults to previous year.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSalaryCompilation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/compilation/pdf": {
            "get": {
                "tags": [
                    "salary/compilation"
                ],
                "summary": "[BETA] Find salary compilation (PDF document) by employee.",
                "operationId": "downloadPdf",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Must be between 1900-2100. Defaults to previous year.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/payslip": {
            "get": {
                "tags": [
                    "salary/payslip"
                ],
                "summary": "[BETA] Find payslips corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "wageTransactionId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "yearFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "yearTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "monthFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "monthTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "voucherDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "voucherDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePayslip"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/payslip/{id}": {
            "get": {
                "tags": [
                    "salary/payslip"
                ],
                "summary": "[BETA] Find payslip by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPayslip"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/payslip/{id}/pdf": {
            "get": {
                "tags": [
                    "salary/payslip"
                ],
                "summary": "[BETA] Find payslip (PDF document) by ID.",
                "operationId": "downloadPdf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/settings": {
            "get": {
                "tags": [
                    "salary/settings"
                ],
                "summary": "[BETA] Get salary settings of logged in company.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSalarySettings"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "salary/settings"
                ],
                "summary": "[BETA] Update settings of logged in company.",
                "operationId": "put",
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SalarySettings"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSalarySettings"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/salary/settings/holiday": {
            "get": {
                "tags": [
                    "salary/settings/holiday"
                ],
                "summary": "[BETA] Find holiday settings of current logged in company.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "salary/settings/holiday"
                ],
                "summary": "[BETA] Create a holiday setting of current logged in company.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CompanyHoliday"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCompanyHoliday"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/salary/settings/holiday/list": {
            "put": {
                "tags": [
                    "salary/settings/holiday"
                ],
                "summary": "[BETA] update multiple holiday settings of current logged in company.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CompanyHoliday"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "salary/settings/holiday"
                ],
                "summary": "[BETA] Create multiple holiday settings of current logged in company.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CompanyHoliday"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCompanyHoliday"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "salary/settings/holiday"
                ],
                "summary": "[BETA] delete multiple holiday settings of current logged in company.",
                "operationId": "deleteByIds",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "ID of the elements",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/settings/holiday/{id}": {
            "put": {
                "tags": [
                    "salary/settings/holiday"
                ],
                "summary": "[BETA] update a holiday setting of current logged in company.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/CompanyHoliday"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCompanyHoliday"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/salary/transaction": {
            "post": {
                "tags": [
                    "salary/transaction"
                ],
                "summary": "[BETA] Create a new salary transaction.",
                "operationId": "post",
                "parameters": [
                    {
                        "name": "generateTaxDeduction",
                        "in": "query",
                        "description": "Generate tax deduction",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/SalaryTransaction"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSalaryTransaction"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/salary/transaction/{id}": {
            "get": {
                "tags": [
                    "salary/transaction"
                ],
                "summary": "[BETA] Find salary transaction by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSalaryTransaction"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "salary/transaction"
                ],
                "summary": "[BETA] Delete salary transaction by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/type": {
            "get": {
                "tags": [
                    "salary/type"
                ],
                "summary": "[BETA] Find salary type corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "showInTimesheet",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "employeeIds",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseSalaryType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/salary/type/{id}": {
            "get": {
                "tags": [
                    "salary/type"
                ],
                "summary": "[BETA] Find salary type by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSalaryType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/supplier": {
            "get": {
                "tags": [
                    "supplier"
                ],
                "summary": "Find suppliers corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierNumber",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organizationNumber",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceEmail",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "accountManagerId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "changedSince",
                        "in": "query",
                        "description": "Only return elements that have changed since this date and time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isWholesaler",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "showProducts",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseSupplier"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "supplier"
                ],
                "summary": "Create supplier. Related supplier addresses may also be created.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Supplier"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSupplier"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/supplier/list": {
            "put": {
                "tags": [
                    "supplier"
                ],
                "summary": "[BETA] Update multiple suppliers. Addresses can also be updated.",
                "operationId": "putList",
                "requestBody": {
                    "description": "JSON representing updates to object. Should have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Supplier"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseSupplier"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "supplier"
                ],
                "summary": "[BETA] Create multiple suppliers. Related supplier addresses may also be created.",
                "operationId": "postList",
                "requestBody": {
                    "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Supplier"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseSupplier"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/supplier/{id}": {
            "get": {
                "tags": [
                    "supplier"
                ],
                "summary": "Get supplier by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSupplier"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "supplier"
                ],
                "summary": "Update supplier. ",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Supplier"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSupplier"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/supplierInvoice": {
            "get": {
                "tags": [
                    "supplierInvoice"
                ],
                "summary": "[BETA] Find supplierInvoices corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invoiceNumber",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "kid",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "voucherId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseSupplierInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/supplierInvoice/{id}": {
            "get": {
                "tags": [
                    "supplierInvoice"
                ],
                "summary": "[BETA] Get supplierInvoice by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSupplierInvoice"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/supplierInvoice/{invoiceId}/pdf": {
            "get": {
                "tags": [
                    "supplierInvoice"
                ],
                "summary": "[BETA] Get supplierInvoice document by invoice ID.",
                "operationId": "downloadPdf",
                "parameters": [
                    {
                        "name": "invoiceId",
                        "in": "path",
                        "description": "Invoice ID from which document is downloaded.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/entry": {
            "get": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Find timesheet entry corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "comment",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TimesheetEntrySearchResponse"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Add new timesheet entry. Only one entry per employee/date/activity/project combination is supported.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/TimesheetEntry"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/timesheet/entry/\u003erecentActivities": {
            "get": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Find recently used timesheet activities.",
                "operationId": "getRecentActivities",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "ID of employee to find activities for. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "ID of project to find activities for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseActivity"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/entry/\u003erecentProjects": {
            "get": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Find projects with recent activities (timesheet entry registered).",
                "operationId": "getRecentProjects",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "ID of employee with recent project hours Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseProject"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/entry/\u003etotalHours": {
            "get": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Find total hours registered on an employee in a specific period.",
                "operationId": "getTotalHours",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "ID of employee to find hours for. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "startDate",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (from and incl.). Defaults to today.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperDouble"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/entry/list": {
            "put": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Update timesheet entry. Multiple objects for different users can be sent in the same request.",
                "operationId": "putList",
                "requestBody": {
                    "description": "List of timesheet entry objects to update",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TimesheetEntry"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTimesheetEntry"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "post": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Add new timesheet entry. Multiple objects for several users can be sent in the same request.",
                "operationId": "postList",
                "requestBody": {
                    "description": "List of timesheet entry objects",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TimesheetEntry"
                                }
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTimesheetEntry"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/timesheet/entry/{id}": {
            "get": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Find timesheet entry by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Update timesheet entry by ID. Note: Timesheet entry object fields which are present but not set, or set to 0, will be nulled.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/TimesheetEntry"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimesheetEntry"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "timesheet/entry"
                ],
                "summary": "Delete timesheet entry by ID.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Number of current version",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/month/:approve": {
            "put": {
                "tags": [
                    "timesheet/month"
                ],
                "summary": "approve month(s).  If id is provided the other args are ignored",
                "operationId": "approve",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeIds",
                        "in": "query",
                        "description": "List of IDs. Defaults to ID of token owner.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "monthYear",
                        "in": "query",
                        "description": "2020-01",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "approvedUntilDate",
                        "in": "query",
                        "description": "yyyy-MM-dd. Defaults to today.. Defaults to end of month",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/month/:complete": {
            "put": {
                "tags": [
                    "timesheet/month"
                ],
                "summary": "complete month(s).  If id is provided the other args are ignored",
                "operationId": "complete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeIds",
                        "in": "query",
                        "description": "List of IDs. Defaults to ID of token owner.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "monthYear",
                        "in": "query",
                        "description": "2020-01",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/month/:reopen": {
            "put": {
                "tags": [
                    "timesheet/month"
                ],
                "summary": "reopen month(s).  If id is provided the other args are ignored",
                "operationId": "reopen",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeIds",
                        "in": "query",
                        "description": "List of IDs. Defaults to ID of token owner.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "monthYear",
                        "in": "query",
                        "description": "2020-01",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/month/:unapprove": {
            "put": {
                "tags": [
                    "timesheet/month"
                ],
                "summary": "unapprove month(s).  If id is provided the other args are ignored",
                "operationId": "unapprove",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Element ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeIds",
                        "in": "query",
                        "description": "List of IDs. Defaults to ID of token owner.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "monthYear",
                        "in": "query",
                        "description": "2020-01",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/month/byMonthNumber": {
            "get": {
                "tags": [
                    "timesheet/month"
                ],
                "summary": "Find monthly status for given month.",
                "operationId": "getByMonthNumber",
                "parameters": [
                    {
                        "name": "employeeIds",
                        "in": "query",
                        "description": "List of IDs. Defaults to ID of token owner.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "monthYear",
                        "in": "query",
                        "description": "2020-01",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseMonthlyStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/month/{id}": {
            "get": {
                "tags": [
                    "timesheet/month"
                ],
                "summary": "Find monthly status entry by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperMonthlyStatus"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/salaryTypeSpecification": {
            "get": {
                "tags": [
                    "timesheet/salaryTypeSpecification"
                ],
                "summary": "[BETA] Get list of timesheet SalaryType Specifications",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTimesheetSalaryTypeSpecification"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "timesheet/salaryTypeSpecification"
                ],
                "summary": "[BETA] Create a timesheet SalaryType Specification. Only one entry per employee/date/SalaryType",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/timesheet/salaryTypeSpecification/{id}": {
            "get": {
                "tags": [
                    "timesheet/salaryTypeSpecification"
                ],
                "summary": "[BETA] Get timesheet SalaryType Specification for a specific ID",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "timesheet/salaryTypeSpecification"
                ],
                "summary": "[BETA] Update a timesheet SalaryType Specification",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimesheetSalaryTypeSpecification"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "timesheet/salaryTypeSpecification"
                ],
                "summary": "[BETA] Delete a timesheet SalaryType Specification",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/settings": {
            "get": {
                "tags": [
                    "timesheet/settings"
                ],
                "summary": "[BETA] Get timesheet settings of logged in company.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimesheetSettings"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/timeClock": {
            "get": {
                "tags": [
                    "timesheet/timeClock"
                ],
                "summary": "Find time clock entries corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hourId",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isRunning",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTimeClock"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/timeClock/:start": {
            "put": {
                "tags": [
                    "timesheet/timeClock"
                ],
                "summary": "Start time clock.",
                "operationId": "start",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Project ID",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    },
                    {
                        "name": "activityId",
                        "in": "query",
                        "description": "Activity ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Optional. Default is today??????s date",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/timeClock/present": {
            "get": {
                "tags": [
                    "timesheet/timeClock"
                ],
                "summary": "Find a user??????s present running time clock.",
                "operationId": "getPresent",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Employee ID. Defaults to ID of token owner.",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/timeClock/{id}": {
            "get": {
                "tags": [
                    "timesheet/timeClock"
                ],
                "summary": "Find time clock entry by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "timesheet/timeClock"
                ],
                "summary": "Update time clock by ID.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/TimeClock"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTimeClock"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/timesheet/timeClock/{id}/:stop": {
            "put": {
                "tags": [
                    "timesheet/timeClock"
                ],
                "summary": "Stop time clock.",
                "operationId": "stop",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Number of current version",
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/week": {
            "get": {
                "tags": [
                    "timesheet/week"
                ],
                "summary": "Find weekly status By ID, week/year combination, employeeId. or an approver",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeIds",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "weekYear",
                        "in": "query",
                        "description": "ISO-8601 week-year",
                        "schema": {
                            "type": "string"
                        },
                        "example": "2018-12"
                    },
                    {
                        "name": "approvedBy",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseWeek"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/week/:approve": {
            "put": {
                "tags": [
                    "timesheet/week"
                ],
                "summary": "Approve week. By ID or (ISO-8601 week and employeeId combination).",
                "operationId": "approve",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "weekYear",
                        "in": "query",
                        "description": "ISO-8601 week-year",
                        "schema": {
                            "type": "string"
                        },
                        "example": "2018-12"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperWeek"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/week/:complete": {
            "put": {
                "tags": [
                    "timesheet/week"
                ],
                "summary": "Complete week. By ID or (ISO-8601 week and employeeId combination).",
                "operationId": "complete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "weekYear",
                        "in": "query",
                        "description": "ISO-8601 week-year",
                        "schema": {
                            "type": "string"
                        },
                        "example": "2018-12"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperWeek"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/week/:reopen": {
            "put": {
                "tags": [
                    "timesheet/week"
                ],
                "summary": "Reopen week. By ID or (ISO-8601 week and employeeId combination).",
                "operationId": "reopen",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "weekYear",
                        "in": "query",
                        "description": "ISO-8601 week-year",
                        "schema": {
                            "type": "string"
                        },
                        "example": "2018-12"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperWeek"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/timesheet/week/:unapprove": {
            "put": {
                "tags": [
                    "timesheet/week"
                ],
                "summary": "Unapprove week. By ID or (ISO-8601 week and employeeId combination).",
                "operationId": "unapprove",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "weekYear",
                        "in": "query",
                        "description": "ISO-8601 week-year",
                        "schema": {
                            "type": "string"
                        },
                        "example": "2018-12"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperWeek"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/token/consumer/byToken": {
            "get": {
                "tags": [
                    "token/consumer"
                ],
                "summary": "Get consumer token by token string.",
                "operationId": "getByToken",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperConsumerToken"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/token/employee/:create": {
            "put": {
                "tags": [
                    "token/employee"
                ],
                "summary": "Create an employee token. Only selected consumers are allowed",
                "operationId": "create",
                "parameters": [
                    {
                        "name": "tokenName",
                        "in": "query",
                        "description": "A user defined name for the new token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "consumerName",
                        "in": "query",
                        "description": "The name of the consumer",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "The id of the employee",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "companyOwned",
                        "in": "query",
                        "description": "Is the key company owned",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "expirationDate",
                        "in": "query",
                        "description": "Expiration date for the employeeToken",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperEmployeeToken"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/token/session/:create": {
            "put": {
                "tags": [
                    "token/session"
                ],
                "summary": "Create session token.",
                "operationId": "create",
                "parameters": [
                    {
                        "name": "consumerToken",
                        "in": "query",
                        "description": "Token of the API consumer",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "employeeToken",
                        "in": "query",
                        "description": "The employees token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expirationDate",
                        "in": "query",
                        "description": "Expiration date for the combined token",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperSessionToken"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/token/session/\u003ewhoAmI": {
            "get": {
                "tags": [
                    "token/session"
                ],
                "summary": "Find information about the current user.",
                "operationId": "whoAmI",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperLoggedInUserInfoDTO"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/token/session/{token}": {
            "delete": {
                "tags": [
                    "token/session"
                ],
                "summary": "Delete session token.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The login token string to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense": {
            "get": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Find travel expenses corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "employeeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "departmentId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectManagerId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "departureDateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "returnDateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "category",
                        "schema": {
                            "type": "string",
                            "default": "ALL",
                            "enum": [
                                "ALL",
                                "OPEN",
                                "APPROVED",
                                "SALARY_PAID",
                                "DELIVERED"
                            ]
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Create travel expense.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/TravelExpense"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/travelExpense/:approve": {
            "put": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Approve travel expenses.",
                "operationId": "approve",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the elements",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/:copy": {
            "put": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Copy travel expense.",
                "operationId": "copy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/:createVouchers": {
            "put": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Create vouchers",
                "operationId": "createVouchers",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the elements",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "yyyy-MM-dd. Defaults to today.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/:deliver": {
            "put": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Deliver travel expenses.",
                "operationId": "deliver",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the elements",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/:unapprove": {
            "put": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Unapprove travel expenses.",
                "operationId": "unapprove",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the elements",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/:undeliver": {
            "put": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Undeliver travel expenses.",
                "operationId": "undeliver",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "ID of the elements",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/accommodationAllowance": {
            "get": {
                "tags": [
                    "travelExpense/accommodationAllowance"
                ],
                "summary": "[BETA] Find accommodation allowances corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateTypeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateCategoryId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "rateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "countFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "countTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "amountFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "amountTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseAccommodationAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "travelExpense/accommodationAllowance"
                ],
                "summary": "[BETA] Create accommodation allowance.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/AccommodationAllowance"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/travelExpense/accommodationAllowance/{id}": {
            "get": {
                "tags": [
                    "travelExpense/accommodationAllowance"
                ],
                "summary": "[BETA] Get travel accommodation allowance by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "travelExpense/accommodationAllowance"
                ],
                "summary": "[BETA] Update accommodation allowance.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/AccommodationAllowance"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperAccommodationAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "travelExpense/accommodationAllowance"
                ],
                "summary": "[BETA] Delete accommodation allowance.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/cost": {
            "get": {
                "tags": [
                    "travelExpense/cost"
                ],
                "summary": "[BETA] Find costs corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vatTypeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "currencyId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "rateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "countFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "countTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "amountFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "amountTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseCost"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "travelExpense/cost"
                ],
                "summary": "[BETA] Create cost.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Cost"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCost"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/travelExpense/cost/{id}": {
            "get": {
                "tags": [
                    "travelExpense/cost"
                ],
                "summary": "[BETA] Get cost by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCost"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "travelExpense/cost"
                ],
                "summary": "[BETA] Update cost.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Cost"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperCost"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "travelExpense/cost"
                ],
                "summary": "[BETA] Delete cost.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/costCategory": {
            "get": {
                "tags": [
                    "travelExpense/costCategory"
                ],
                "summary": "[BETA] Find cost category corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "showOnEmployeeExpenses",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelCostCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/costCategory/{id}": {
            "get": {
                "tags": [
                    "travelExpense/costCategory"
                ],
                "summary": "[BETA] Get cost category by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelCostCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/mileageAllowance": {
            "get": {
                "tags": [
                    "travelExpense/mileageAllowance"
                ],
                "summary": "[BETA] Find mileage allowances corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateTypeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateCategoryId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "kmFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "kmTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "rateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "rateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "amountFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "amountTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "departureLocation",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "destination",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isCompanyCar",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseMileageAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "travelExpense/mileageAllowance"
                ],
                "summary": "[BETA] Create mileage allowance.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/MileageAllowance"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/travelExpense/mileageAllowance/{id}": {
            "get": {
                "tags": [
                    "travelExpense/mileageAllowance"
                ],
                "summary": "[BETA] Get mileage allowance by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "travelExpense/mileageAllowance"
                ],
                "summary": "[BETA] Update mileage allowance.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/MileageAllowance"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperMileageAllowance"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "travelExpense/mileageAllowance"
                ],
                "summary": "[BETA] Delete mileage allowance.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/passenger": {
            "get": {
                "tags": [
                    "travelExpense/passenger"
                ],
                "summary": "[BETA] Find passengers corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "mileageAllowance",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePassenger"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "travelExpense/passenger"
                ],
                "summary": "[BETA] Create passenger.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Passenger"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPassenger"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/travelExpense/passenger/{id}": {
            "get": {
                "tags": [
                    "travelExpense/passenger"
                ],
                "summary": "[BETA] Get passenger by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPassenger"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "travelExpense/passenger"
                ],
                "summary": "[BETA] Update passenger.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/Passenger"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPassenger"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "travelExpense/passenger"
                ],
                "summary": "[BETA] Delete passenger.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/paymentType": {
            "get": {
                "tags": [
                    "travelExpense/paymentType"
                ],
                "summary": "[BETA] Find payment type corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isInactive",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "showOnEmployeeExpenses",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelPaymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/paymentType/{id}": {
            "get": {
                "tags": [
                    "travelExpense/paymentType"
                ],
                "summary": "[BETA] Get payment type by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelPaymentType"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/perDiemCompensation": {
            "get": {
                "tags": [
                    "travelExpense/perDiemCompensation"
                ],
                "summary": "[BETA] Find per diem compensations corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateTypeId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rateCategoryId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "overnightAccommodation",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "NONE",
                                "HOTEL",
                                "BOARDING_HOUSE_WITHOUT_COOKING",
                                "BOARDING_HOUSE_WITH_COOKING"
                            ]
                        }
                    },
                    {
                        "name": "countFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "countTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "rateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "rateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "amountFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "amountTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isDeductionForBreakfast",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isLunchDeduction",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isDinnerDeduction",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponsePerDiemCompensation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "travelExpense/perDiemCompensation"
                ],
                "summary": "[BETA] Create per diem compensation.",
                "operationId": "post",
                "requestBody": {
                    "description": "JSON representing the new object to be created. Should not have ID and version set.",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PerDiemCompensation"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "201": {
                        "description": "successfully created",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        },
        "/travelExpense/perDiemCompensation/{id}": {
            "get": {
                "tags": [
                    "travelExpense/perDiemCompensation"
                ],
                "summary": "[BETA] Get per diem compensation by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "travelExpense/perDiemCompensation"
                ],
                "summary": "[BETA] Update per diem compensation.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/PerDiemCompensation"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperPerDiemCompensation"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "travelExpense/perDiemCompensation"
                ],
                "summary": "[BETA] Delete per diem compensation.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/rate": {
            "get": {
                "tags": [
                    "travelExpense/rate"
                ],
                "summary": "[BETA] Find rates corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "rateCategoryId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PER_DIEM",
                                "ACCOMMODATION_ALLOWANCE",
                                "MILEAGE_ALLOWANCE"
                            ]
                        }
                    },
                    {
                        "name": "isValidDayTrip",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isValidAccommodation",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isValidDomestic",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isValidForeignTravel",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "requiresZone",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "requiresOvernightAccommodation",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpenseRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/rate/{id}": {
            "get": {
                "tags": [
                    "travelExpense/rate"
                ],
                "summary": "[BETA] Get travel expense rate by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRate"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/rateCategory": {
            "get": {
                "tags": [
                    "travelExpense/rateCategory"
                ],
                "summary": "[BETA] Find rate categories corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "PER_DIEM",
                                "ACCOMMODATION_ALLOWANCE",
                                "MILEAGE_ALLOWANCE"
                            ]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "travelReportRateCategoryGroupId",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "ameldingWageCode",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "wageCodeNumber",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isValidDayTrip",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isValidAccommodation",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isValidDomestic",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "requiresZone",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isRequiresOvernightAccommodation",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpenseRateCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/rateCategory/{id}": {
            "get": {
                "tags": [
                    "travelExpense/rateCategory"
                ],
                "summary": "[BETA] Get travel expense rate category by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRateCategory"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/rateCategoryGroup": {
            "get": {
                "tags": [
                    "travelExpense/rateCategoryGroup"
                ],
                "summary": "[BETA] Find rate categoriy groups corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Containing",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isForeignTravel",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "dateFrom",
                        "in": "query",
                        "description": "From and including",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dateTo",
                        "in": "query",
                        "description": "To and excluding",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpenseRateCategoryGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/rateCategoryGroup/{id}": {
            "get": {
                "tags": [
                    "travelExpense/rateCategoryGroup"
                ],
                "summary": "[BETA] Get travel report rate category group by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpenseRateCategoryGroup"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/settings": {
            "get": {
                "tags": [
                    "travelExpense/settings"
                ],
                "summary": "[BETA] Get travel expense settings of logged in company.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpenseSettings"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/zone": {
            "get": {
                "tags": [
                    "travelExpensezone"
                ],
                "summary": "Find travel expense zones corresponding with sent data.",
                "operationId": "search",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "query",
                        "description": "List of IDs",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isDisabled",
                        "in": "query",
                        "description": "Equals",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "From index",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "Number of elements to return",
                        "schema": {
                            "type": "integer",
                            "default": 1000
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "description": "Sorting pattern",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponseTravelExpenseZone"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/zone/{id}": {
            "get": {
                "tags": [
                    "travelExpensezone"
                ],
                "summary": "Get travel expense zone by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpenseZone"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/{id}": {
            "get": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Get travel expense by ID.",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields filter pattern",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Update travel expense.",
                "operationId": "put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Partial object describing what should be updated",
                    "content": {
                        "application/json; charset=utf-8": {
                            "schema": {
                                "$ref": "#/components/schemas/TravelExpense"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResponseWrapperTravelExpense"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            },
            "delete": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Delete travel expense.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Element ID",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/{travelExpenseId}/attachment": {
            "get": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "Get attachment by travel expense ID.",
                "operationId": "downloadAttachment",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "path",
                        "description": "Travel Expense ID from which PDF is downloaded.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "byte"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "Upload attachment to travel expense.",
                "operationId": "uploadAttachment",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "path",
                        "description": "Travel Expense ID to upload attachment to.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "createNewCost",
                        "in": "query",
                        "description": "Create new cost row when you add the attachment",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The file",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "[BETA] Delete attachment.",
                "operationId": "deleteAttachment",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "path",
                        "description": "ID of attachment containing the attachment to delete.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of voucher containing the attachment to delete.",
                        "schema": {
                            "minimum": 0.0,
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "sendToInbox",
                        "in": "query",
                        "description": "Should the attachment be sent to inbox rather than deleted?",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "name": "split",
                        "in": "query",
                        "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ]
            }
        },
        "/travelExpense/{travelExpenseId}/attachment/list": {
            "post": {
                "tags": [
                    "travelExpense"
                ],
                "summary": "Upload multiple attachments to travel expense.",
                "operationId": "uploadAttachments",
                "parameters": [
                    {
                        "name": "travelExpenseId",
                        "in": "path",
                        "description": "Travel Expense ID to upload attachment to.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "createNewCost",
                        "in": "query",
                        "description": "Create new cost row when you add the attachment",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "requestBody": {
                    "description": "Multipart files",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/FormDataMultiPart"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            
                        }
                    }
                },
                "security": [
                    {
                        "tokenAuthScheme": [
                            
                        ]
                    }
                ],
                "x-codegen-request-body-name": "body"
            }
        }
    },
    "components": {
        "schemas": {
            "Delete": {
                "type": "object",
                "properties": {
                    "available": {
                        "type": "boolean",
                        "description": "Is the delete operation available for this Voucher?",
                        "readOnly": true,
                        "default": false
                    },
                    "reasons": {
                        "type": "array",
                        "description": "If the delete operation is not available then this is a list of reasons why. Otherwise the list will be empty",
                        "readOnly": true,
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ResponseWrapperProspect": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Prospect"
                    }
                }
            },
            "ResponseWrapperPayslip": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Payslip"
                    }
                }
            },
            "Customer": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "organizationNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "supplierNumber": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    },
                    "customerNumber": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    },
                    "isSupplier": {
                        "type": "boolean",
                        "description": "Defines if the customer is also a supplier.",
                        "default": false
                    },
                    "isCustomer": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isInactive": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "accountManager": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "email": {
                        "maxLength": 254,
                        "minLength": 0,
                        "type": "string",
                        "format": "email"
                    },
                    "invoiceEmail": {
                        "maxLength": 254,
                        "minLength": 0,
                        "type": "string"
                    },
                    "overdueNoticeEmail": {
                        "maxLength": 254,
                        "minLength": 0,
                        "type": "string",
                        "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
                        "format": "email"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "description": "List of the bank account numbers for this customer. Norwegian bank account numbers only.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "phoneNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "phoneNumberMobile": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "isPrivateIndividual": {
                        "type": "boolean",
                        "default": false
                    },
                    "singleCustomerInvoice": {
                        "type": "boolean",
                        "description": "Enables various orders on one customer invoice.",
                        "default": false
                    },
                    "invoiceSendMethod": {
                        "type": "string",
                        "description": "Define the invoicing method for the customer.\u003cbr\u003eEMAIL: Send invoices as email.\u003cbr\u003eEHF: Send invoices as EHF.\u003cbr\u003eEFAKTURA: Send invoices as EFAKTURA.\u003cbr\u003eVIPPS: Send invoices through VIPPS.\u003cbr\u003ePAPER: Send invoices as paper invoice.\u003cbr\u003eMANUAL: User will have to send invocie manually.\u003cbr\u003e",
                        "enum": [
                            "EMAIL",
                            "EHF",
                            "EFAKTURA",
                            "VIPPS",
                            "PAPER",
                            "MANUAL"
                        ]
                    },
                    "emailAttachmentType": {
                        "type": "string",
                        "description": "Define the invoice attachment type for emailing to the customer.\u003cbr\u003eLINK: Send invoice as link in email.\u003cbr\u003eATTACHMENT: Send invoice as attachment in email.\u003cbr\u003e",
                        "enum": [
                            "LINK",
                            "ATTACHMENT"
                        ]
                    },
                    "postalAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "physicalAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/DeliveryAddress"
                    },
                    "category1": {
                        "$ref": "#/components/schemas/CustomerCategory"
                    },
                    "category2": {
                        "$ref": "#/components/schemas/CustomerCategory"
                    },
                    "category3": {
                        "$ref": "#/components/schemas/CustomerCategory"
                    },
                    "invoicesDueIn": {
                        "maximum": 10000,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of days/months in which invoices created from this customer is due",
                        "format": "int32"
                    },
                    "invoicesDueInType": {
                        "type": "string",
                        "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this customer. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
                        "enum": [
                            "DAYS",
                            "MONTHS",
                            "RECURRING_DAY_OF_MONTH"
                        ]
                    }
                }
            },
            "Product": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "ean": {
                        "maxLength": 14,
                        "type": "string"
                    },
                    "elNumber": {
                        "maxLength": 14,
                        "type": "string",
                        "readOnly": true
                    },
                    "nrfNumber": {
                        "maxLength": 14,
                        "type": "string",
                        "readOnly": true
                    },
                    "costExcludingVatCurrency": {
                        "type": "number",
                        "description": "Price purchase (cost) excluding VAT in the product\u0027s currency"
                    },
                    "priceExcludingVatCurrency": {
                        "type": "number",
                        "description": "Price of purchase excluding VAT in the product\u0027s currency"
                    },
                    "priceIncludingVatCurrency": {
                        "type": "number",
                        "description": "Price of purchase including VAT in the product\u0027s currency"
                    },
                    "isInactive": {
                        "type": "boolean",
                        "default": false
                    },
                    "productUnit": {
                        "$ref": "#/components/schemas/ProductUnit"
                    },
                    "isStockItem": {
                        "type": "boolean",
                        "default": false
                    },
                    "stockOfGoods": {
                        "type": "number",
                        "readOnly": true
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "discountPrice": {
                        "type": "number",
                        "readOnly": true
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/Supplier"
                    },
                    "resaleProduct": {
                        "$ref": "#/components/schemas/Product"
                    }
                }
            },
            "ListResponseTimeClock": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TimeClock"
                        }
                    }
                }
            },
            "PG2CallbackDTO": {
                "required": [
                    "_odpcompanyID",
                    "_odpcustomerID",
                    "autoPayKey",
                    "autoPayKeyLastGeneratedDate",
                    "pgRequestId",
                    "tenantId"
                ],
                "type": "object",
                "properties": {
                    "_odpcustomerID": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "_odpcompanyID": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pgRequestId": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "string"
                    },
                    "autoPayKey": {
                        "type": "string"
                    },
                    "autoPayKeyLastGeneratedDate": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "ResponseWrapperCompanyAuthorityDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/CompanyAuthorityDTO"
                    }
                }
            },
            "SearchCompletionDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "alternateName": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "postalArea": {
                        "type": "string"
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SEARCH1881",
                                "TRIPLETEX",
                                "NICKNAME",
                                "EMPLOYEE",
                                "CONTACT",
                                "ACTIVITY",
                                "PROJECT",
                                "ORDER",
                                "OFFER",
                                "CUSTOMER",
                                "COMPANY",
                                "CONTROLSCHEMA",
                                "HOUR",
                                "TRAVELEXPENSE"
                            ]
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    }
                }
            },
            "ListResponseEmploymentDetails": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmploymentDetails"
                        }
                    }
                }
            },
            "ResponseWrapperCompanyHoliday": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/CompanyHoliday"
                    }
                }
            },
            "ListResponsePayslip": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Payslip"
                        }
                    }
                }
            },
            "MobileAppLogin": {
                "required": [
                    "appSecret",
                    "expirationDate",
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Users username (email)"
                    },
                    "password": {
                        "type": "string",
                        "description": "Users password"
                    },
                    "appSecret": {
                        "type": "string",
                        "description": "App secret"
                    },
                    "mfaCode": {
                        "type": "integer",
                        "description": "Optional mfa auth code",
                        "format": "int32"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "Expiration date for the combined token"
                    },
                    "employeeId": {
                        "type": "integer",
                        "description": "Optional employee ID. Default employee is used when null",
                        "format": "int32"
                    }
                }
            },
            "ResponseWrapperPayment": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Payment"
                    }
                }
            },
            "EmployeeEmail": {
                "required": [
                    "email"
                ],
                "type": "object",
                "properties": {
                    "email": {
                        "minLength": 1,
                        "type": "string",
                        "description": "Employee e-mail address",
                        "format": "email"
                    }
                }
            },
            "ProjectControlForm": {
                "required": [
                    "comment",
                    "title"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "title": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "comment": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "completed": {
                        "type": "boolean",
                        "default": false
                    },
                    "signatureRequired": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "signed": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "controlForm": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "Employee": {
                "required": [
                    "firstName",
                    "lastName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "firstName": {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    },
                    "lastName": {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    },
                    "employeeNumber": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "dateOfBirth": {
                        "type": "string"
                    },
                    "email": {
                        "maxLength": 100,
                        "type": "string",
                        "format": "email"
                    },
                    "phoneNumberMobileCountry": {
                        "$ref": "#/components/schemas/Country"
                    },
                    "phoneNumberMobile": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "phoneNumberHome": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "phoneNumberWork": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "nationalIdentityNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "dnumber": {
                        "maxLength": 11,
                        "type": "string"
                    },
                    "internationalId": {
                        "$ref": "#/components/schemas/InternationalId"
                    },
                    "bankAccountNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "iban": {
                        "type": "string",
                        "description": "IBAN field -- pilot program"
                    },
                    "bic": {
                        "type": "string",
                        "description": "Bic (swift) field -- pilot program"
                    },
                    "creditorBankCountryId": {
                        "type": "integer",
                        "description": "Country of creditor bank field -- pilot program",
                        "format": "int32"
                    },
                    "usesAbroadPayment": {
                        "type": "boolean",
                        "description": "UsesAbroadPayment field -- pilot program. Determines if we should use domestic or abroad remittance. To be able to use abroad remittance, one has to: 1: have Autopay 2: have valid combination of the fields Iban, Bic (swift) and Country of creditor bank. ",
                        "default": false
                    },
                    "userType": {
                        "type": "string",
                        "description": "Define the employee\u0027s user type.\u003cbr\u003eSTANDARD: Reduced access. Users with limited system entitlements.\u003cbr\u003eEXTENDED: Users can be given all system entitlements.\u003cbr\u003eNO_ACCESS: User with no log on access.\u003cbr\u003eUsers with access to Tripletex must confirm the email address.",
                        "enum": [
                            "STANDARD",
                            "EXTENDED",
                            "NO_ACCESS"
                        ]
                    },
                    "allowInformationRegistration": {
                        "type": "boolean",
                        "description": "Determines if salary information can be registered on the user including hours, travel expenses and employee expenses. The user may also be selected as a project member on projects.",
                        "readOnly": true,
                        "default": false
                    },
                    "isContact": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "comments": {
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "employments": {
                        "type": "array",
                        "description": "Employments tied to the employee",
                        "items": {
                            "$ref": "#/components/schemas/Employment"
                        }
                    },
                    "holidayAllowanceEarned": {
                        "$ref": "#/components/schemas/HolidayAllowanceEarned"
                    }
                }
            },
            "ResponseWrapperSystemMessage": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SystemMessage"
                    }
                }
            },
            "ListResponsePayment": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Payment"
                        }
                    }
                }
            },
            "ResponseWrapperSalesForceOpportunity": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalesForceOpportunity"
                    }
                }
            },
            "ApiError": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    },
                    "link": {
                        "type": "string"
                    },
                    "developerMessage": {
                        "type": "string"
                    },
                    "validationMessages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiValidationMessage"
                        }
                    },
                    "requestId": {
                        "type": "string"
                    }
                }
            },
            "Week": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "timesheetEntries": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/TimesheetEntry"
                        }
                    },
                    "year": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "week": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "completed": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "approved": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "approvedBy": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "approvedDate": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "Link": {
                "type": "object",
                "properties": {
                    "rel": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "POST",
                            "PUT",
                            "GET",
                            "DELETE"
                        ]
                    },
                    "href": {
                        "type": "string"
                    }
                }
            },
            "ListResponseBankReconciliationMatch": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankReconciliationMatch"
                        }
                    }
                }
            },
            "ListResponsePerDiemCompensationTransientDTO": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PerDiemCompensationTransientDTO"
                        }
                    }
                }
            },
            "AnnualAccount": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "year": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "start": {
                        "type": "string",
                        "readOnly": true
                    },
                    "end": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "CustomerTripletexAccount": {
                "required": [
                    "accountType",
                    "modules",
                    "numberOfVouchers",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "administrator": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "customerId": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The customer id to an already created customer to create a Tripletex account for.",
                        "format": "int32"
                    },
                    "accountType": {
                        "type": "string",
                        "enum": [
                            "TEST",
                            "PAYING"
                        ]
                    },
                    "modules": {
                        "$ref": "#/components/schemas/Modules"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "ENK",
                            "AS",
                            "NUF",
                            "ANS",
                            "DA",
                            "PRE",
                            "KS",
                            "ASA",
                            "BBL",
                            "BRL",
                            "GFS",
                            "SPA",
                            "SF",
                            "IKS",
                            "KF_FKF",
                            "FCD",
                            "EOFG",
                            "BA",
                            "STI",
                            "ORG",
                            "ESEK",
                            "SA",
                            "SAM",
                            "BO",
                            "VPFO",
                            "OS",
                            "Other"
                        ]
                    },
                    "sendEmails": {
                        "type": "boolean",
                        "description": "Should the emails normally sent during creation be sent in this case?",
                        "default": false
                    },
                    "autoValidateUserLogin": {
                        "type": "boolean",
                        "description": "Should the user be automatically validated?",
                        "default": false
                    },
                    "createApiToken": {
                        "type": "boolean",
                        "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.",
                        "default": false
                    },
                    "sendInvoiceToCustomer": {
                        "type": "boolean",
                        "description": "Should the invoices for this account be sent to the customer?",
                        "default": false
                    },
                    "customerInvoiceEmail": {
                        "type": "string",
                        "description": "The address to send the invoice to at the customer."
                    },
                    "numberOfEmployees": {
                        "type": "integer",
                        "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet.",
                        "format": "int32"
                    },
                    "numberOfVouchers": {
                        "type": "string",
                        "description": "Number of vouchers each year. Used to calculate prices.",
                        "enum": [
                            "INTERVAL_0_100",
                            "INTERVAL_101_500",
                            "INTERVAL_0_500",
                            "INTERVAL_501_1000",
                            "INTERVAL_1001_2000",
                            "INTERVAL_2001_3500",
                            "INTERVAL_3501_5000",
                            "INTERVAL_5001_10000",
                            "INTERVAL_UNLIMITED"
                        ]
                    },
                    "administratorPassword": {
                        "type": "string",
                        "description": "The password of the administrator user."
                    },
                    "chartOfAccountsType": {
                        "type": "string",
                        "description": "The chart of accounts to use for the new company",
                        "enum": [
                            "DEFAULT",
                            "MAMUT_STD_PAYROLL",
                            "MAMUT_NARF_PAYROLL",
                            "AGRO_FORRETNING_PAYROLL",
                            "AGRO_LANDBRUK_PAYROLL",
                            "AGRO_FISKE_PAYROLL",
                            "AGRO_FORSOKSRING_PAYROLL",
                            "AGRO_IDRETTSLAG_PAYROLL",
                            "AGRO_FORENING_PAYROLL"
                        ]
                    }
                }
            },
            "ListResponseCurrency": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Currency"
                        }
                    }
                }
            },
            "Notification": {
                "required": [
                    "date",
                    "message",
                    "title",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string"
                    },
                    "title": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "message": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "type": {
                        "maxLength": 50,
                        "type": "string"
                    },
                    "category": {
                        "type": "string"
                    },
                    "link": {
                        "maxLength": 255,
                        "type": "string"
                    }
                }
            },
            "ListResponseWeek": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Week"
                        }
                    }
                }
            },
            "ListResponseActivity": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Activity"
                        }
                    }
                }
            },
            "TimesheetEntrySearchResponse": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TimesheetEntry"
                        }
                    },
                    "sumAllHours": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "ListResponseVoucher": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Voucher"
                        }
                    }
                }
            },
            "OrderLine": {
                "required": [
                    "order"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "inventory": {
                        "$ref": "#/components/schemas/Inventory"
                    },
                    "description": {
                        "type": "string"
                    },
                    "count": {
                        "type": "number",
                        "format": "double"
                    },
                    "unitCostCurrency": {
                        "type": "number",
                        "description": "Unit price purchase (cost) excluding VAT in the order\u0027s currency"
                    },
                    "unitPriceExcludingVatCurrency": {
                        "type": "number",
                        "description": "Unit price of purchase excluding VAT in the order\u0027s currency"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "markup": {
                        "type": "number",
                        "description": "Markup given as a percentage (%)",
                        "format": "double"
                    },
                    "discount": {
                        "type": "number",
                        "description": "Discount given as a percentage (%)",
                        "format": "double"
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "amountExcludingVatCurrency": {
                        "type": "number",
                        "description": "Total amount on order line excluding VAT in the order\u0027s currency",
                        "readOnly": true
                    },
                    "amountIncludingVatCurrency": {
                        "type": "number",
                        "description": "Total amount on order line including VAT in the order\u0027s currency",
                        "readOnly": true
                    },
                    "order": {
                        "$ref": "#/components/schemas/Order"
                    },
                    "unitPriceIncludingVatCurrency": {
                        "type": "number",
                        "description": "Unit price of purchase including VAT in the order\u0027s currency"
                    },
                    "isSubscription": {
                        "type": "boolean",
                        "default": false
                    },
                    "subscriptionPeriodStart": {
                        "type": "string"
                    },
                    "subscriptionPeriodEnd": {
                        "type": "string"
                    }
                }
            },
            "ListResponseCost": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Cost"
                        }
                    }
                }
            },
            "SalesForceEmployee": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "firstName": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "lastName": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "email": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "phoneNumberMobile": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "phoneNumberHome": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "phoneNumberWork": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "companyId": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "customerId": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "phoneNumberSmsCertified": {
                        "type": "string",
                        "readOnly": true
                    },
                    "isUserAdministrator": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isAccountAdministrator": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "allowLogin": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isExternal": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isTripletexCertified": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isDefaultLogin": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "loginEndDate": {
                        "type": "string",
                        "description": "Login end date",
                        "readOnly": true
                    },
                    "address": {
                        "$ref": "#/components/schemas/SalesForceAddress"
                    }
                }
            },
            "ApiConsumer": {
                "required": [
                    "consumerName",
                    "emails"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "consumerName": {
                        "maxLength": 100,
                        "minLength": 5,
                        "type": "string"
                    },
                    "emails": {
                        "maxLength": 255,
                        "type": "string",
                        "format": "email"
                    }
                }
            },
            "ProjectPeriodInvoiced": {
                "type": "object",
                "properties": {
                    "sumAmountPaid": {
                        "type": "number",
                        "readOnly": true
                    },
                    "sumAmountOutstanding": {
                        "type": "number",
                        "readOnly": true
                    },
                    "sumAmountDue": {
                        "type": "number",
                        "readOnly": true
                    },
                    "sumAmountDueOutstanding": {
                        "type": "number",
                        "readOnly": true
                    },
                    "sumAmount": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperLegacyAddress": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/LegacyAddress"
                    }
                }
            },
            "ListResponseProjectParticipant": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectParticipant"
                        }
                    }
                }
            },
            "ResponseWrapperMileageAllowance": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/MileageAllowance"
                    }
                }
            },
            "ResponseWrapperTravelPaymentType": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelPaymentType"
                    }
                }
            },
            "Reminder": {
                "required": [
                    "termOfPayment",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "reminderDate": {
                        "type": "string",
                        "description": "Creation date of the invoice reminder.",
                        "readOnly": true
                    },
                    "charge": {
                        "type": "number",
                        "description": "The fee part of the reminder, in the company\u0027s currency.",
                        "readOnly": true
                    },
                    "chargeCurrency": {
                        "type": "number",
                        "description": "The fee part of the reminder, in the invoice currency.",
                        "readOnly": true
                    },
                    "totalCharge": {
                        "type": "number",
                        "description": "The total fee part of all reminders, in the company\u0027s currency.",
                        "readOnly": true
                    },
                    "totalChargeCurrency": {
                        "type": "number",
                        "description": "The total fee part of all reminders, in the invoice currency.",
                        "readOnly": true
                    },
                    "totalAmountCurrency": {
                        "type": "number",
                        "description": "The total amount to pay in reminder\u0027s currency.",
                        "readOnly": true
                    },
                    "interests": {
                        "type": "number",
                        "description": "The interests part of the reminder.",
                        "readOnly": true
                    },
                    "interestRate": {
                        "type": "number",
                        "description": "The reminder interest rate.",
                        "readOnly": true
                    },
                    "termOfPayment": {
                        "type": "string",
                        "description": "The reminder term of payment date."
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "SOFT_REMINDER",
                            "REMINDER",
                            "NOTICE_OF_DEBT_COLLECTION",
                            "DEBT_COLLECTION"
                        ]
                    },
                    "comment": {
                        "type": "string"
                    },
                    "kid": {
                        "maxLength": 25,
                        "type": "string",
                        "description": "KID - Kundeidentifikasjonsnummer."
                    },
                    "bankAccountNumber": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "bankAccountIBAN": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "bankAccountSWIFT": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "bank": {
                        "maxLength": 255,
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperMapStringEventInfoDescription": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/EventInfoDescription"
                        }
                    }
                }
            },
            "ResponseWrapperStandardTime": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/StandardTime"
                    }
                }
            },
            "ListResponseProductGroup": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductGroup"
                        }
                    }
                }
            },
            "ResponseWrapperObject": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "object",
                        "properties": {
                            
                        }
                    }
                }
            },
            "ResponseWrapperProjectControlForm": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectControlForm"
                    }
                }
            },
            "GoodsReceiptLine": {
                "required": [
                    "product",
                    "quantityReceived"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "purchaseOrder": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "inventory": {
                        "$ref": "#/components/schemas/Inventory"
                    },
                    "quantityOrdered": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "quantityReceived": {
                        "type": "number",
                        "format": "double"
                    },
                    "quantityRest": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "deviation": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperBankTransaction": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/BankTransaction"
                    }
                }
            },
            "DashboardDTO": {
                "required": [
                    "content",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "version": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    },
                    "content": {
                        "minLength": 1,
                        "type": "string"
                    }
                }
            },
            "BankReconciliation": {
                "required": [
                    "account",
                    "accountingPeriod",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "accountingPeriod": {
                        "$ref": "#/components/schemas/AccountingPeriod"
                    },
                    "voucher": {
                        "$ref": "#/components/schemas/Voucher"
                    },
                    "transactions": {
                        "type": "array",
                        "description": "Bank transactions tied to the bank reconciliation",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BankTransaction"
                        }
                    },
                    "isClosed": {
                        "type": "boolean",
                        "default": false
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Bank Reconciliation.",
                        "enum": [
                            "MANUAL",
                            "AUTOMATIC"
                        ]
                    },
                    "bankAccountClosingBalanceCurrency": {
                        "type": "number"
                    },
                    "closedDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "closedByContact": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "closedByEmployee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "approvable": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ResponseWrapperGoodsReceipt": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/GoodsReceipt"
                    }
                }
            },
            "ProductUnit": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "nameShort": {
                        "maxLength": 50,
                        "type": "string"
                    },
                    "commonCode": {
                        "maxLength": 50,
                        "type": "string"
                    }
                }
            },
            "TravelCostCategory": {
                "required": [
                    "description"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "isVatLocked": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "showOnTravelExpenses": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "showOnEmployeeExpenses": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isInactive": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ResponseWrapperConsumerToken": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ConsumerToken"
                    }
                }
            },
            "TravelExpense": {
                "required": [
                    "employee"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "approvedBy": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "completedBy": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "payslip": {
                        "$ref": "#/components/schemas/Payslip"
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "paymentCurrency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "travelDetails": {
                        "$ref": "#/components/schemas/TravelDetails"
                    },
                    "voucher": {
                        "$ref": "#/components/schemas/Voucher"
                    },
                    "attachment": {
                        "$ref": "#/components/schemas/Document"
                    },
                    "isCompleted": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isApproved": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isChargeable": {
                        "type": "boolean",
                        "default": false
                    },
                    "isFixedInvoicedAmount": {
                        "type": "boolean",
                        "default": false
                    },
                    "isIncludeAttachedReceiptsWhenReinvoicing": {
                        "type": "boolean",
                        "default": false
                    },
                    "completedDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "approvedDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string",
                        "readOnly": true
                    },
                    "travelAdvance": {
                        "type": "number"
                    },
                    "fixedInvoicedAmount": {
                        "type": "number"
                    },
                    "amount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "paymentAmount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "chargeableAmount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "lowRateVAT": {
                        "type": "number",
                        "readOnly": true
                    },
                    "mediumRateVAT": {
                        "type": "number",
                        "readOnly": true
                    },
                    "highRateVAT": {
                        "type": "number",
                        "readOnly": true
                    },
                    "paymentAmountCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "number": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "invoice": {
                        "$ref": "#/components/schemas/Invoice"
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "perDiemCompensations": {
                        "type": "array",
                        "description": "Link to individual per diem compensations.",
                        "items": {
                            "$ref": "#/components/schemas/PerDiemCompensation"
                        }
                    },
                    "mileageAllowances": {
                        "type": "array",
                        "description": "Link to individual mileage allowances.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/MileageAllowance"
                        }
                    },
                    "accommodationAllowances": {
                        "type": "array",
                        "description": "Link to individual accommodation allowances.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/AccommodationAllowance"
                        }
                    },
                    "costs": {
                        "type": "array",
                        "description": "Link to individual costs.",
                        "items": {
                            "$ref": "#/components/schemas/Cost"
                        }
                    },
                    "attachmentCount": {
                        "maximum": 2147483647,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "state": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "ALL",
                            "OPEN",
                            "APPROVED",
                            "SALARY_PAID",
                            "DELIVERED"
                        ]
                    },
                    "actions": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "isSalaryAdmin": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "showPayslip": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "accountingPeriodClosed": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "accountingPeriodVATClosed": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ListResponseDeliveryAddress": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeliveryAddress"
                        }
                    }
                }
            },
            "ResponseWrapperProjectPeriodInvoiced": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectPeriodInvoiced"
                    }
                }
            },
            "ListResponseGoodsReceiptLine": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GoodsReceiptLine"
                        }
                    }
                }
            },
            "PurchaseOrderline": {
                "required": [
                    "purchaseOrder"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "purchaseOrder": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "description": {
                        "type": "string"
                    },
                    "count": {
                        "minimum": 1,
                        "type": "number",
                        "format": "double"
                    },
                    "unitCostCurrency": {
                        "type": "number",
                        "description": "Unit price purchase (cost) excluding VAT in the order\u0027s currency"
                    },
                    "unitPriceExcludingVatCurrency": {
                        "type": "number",
                        "description": "Unit price of purchase excluding VAT in the order\u0027s currency"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "discount": {
                        "type": "number",
                        "description": "Discount given as a percentage (%)",
                        "format": "double"
                    },
                    "amountExcludingVatCurrency": {
                        "type": "number",
                        "description": "Total amount on order line excluding VAT in the order\u0027s currency",
                        "readOnly": true
                    },
                    "amountIncludingVatCurrency": {
                        "type": "number",
                        "description": "Total amount on order line including VAT in the order\u0027s currency",
                        "readOnly": true
                    }
                }
            },
            "ListResponseAccount": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Account"
                        }
                    }
                }
            },
            "ListResponsePerDiemCompensation": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PerDiemCompensation"
                        }
                    }
                }
            },
            "VatType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "number": {
                        "maxLength": 10,
                        "type": "string"
                    },
                    "percentage": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "CustomerTripletexAccount2": {
                "required": [
                    "accountType",
                    "modules",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "administrator": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "customerId": {
                        "type": "integer",
                        "description": "The customer id to an already created customer to create a Tripletex account for.",
                        "format": "int32"
                    },
                    "accountType": {
                        "type": "string",
                        "enum": [
                            "TEST",
                            "PAYING"
                        ]
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SalesModuleDTO"
                        }
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "ENK",
                            "AS",
                            "NUF",
                            "ANS",
                            "DA",
                            "PRE",
                            "KS",
                            "ASA",
                            "BBL",
                            "BRL",
                            "GFS",
                            "SPA",
                            "SF",
                            "IKS",
                            "KF_FKF",
                            "FCD",
                            "EOFG",
                            "BA",
                            "STI",
                            "ORG",
                            "ESEK",
                            "SA",
                            "SAM",
                            "BO",
                            "VPFO",
                            "OS",
                            "Other"
                        ]
                    },
                    "sendEmails": {
                        "type": "boolean",
                        "description": "Should the emails normally sent during creation be sent in this case?",
                        "default": false
                    },
                    "autoValidateUserLogin": {
                        "type": "boolean",
                        "description": "Should the user be automatically validated?",
                        "default": false
                    },
                    "createApiToken": {
                        "type": "boolean",
                        "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.",
                        "default": false
                    },
                    "sendInvoiceToCustomer": {
                        "type": "boolean",
                        "description": "Should the invoices for this account be sent to the customer?",
                        "default": false
                    },
                    "customerInvoiceEmail": {
                        "type": "string",
                        "description": "The address to send the invoice to at the customer."
                    },
                    "numberOfEmployees": {
                        "type": "integer",
                        "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet.",
                        "format": "int32"
                    },
                    "administratorPassword": {
                        "type": "string",
                        "description": "The password of the administrator user."
                    },
                    "chartOfAccountsType": {
                        "type": "string",
                        "description": "The chart of accounts to use for the new company",
                        "enum": [
                            "DEFAULT",
                            "MAMUT_STD_PAYROLL",
                            "MAMUT_NARF_PAYROLL",
                            "AGRO_FORRETNING_PAYROLL",
                            "AGRO_LANDBRUK_PAYROLL",
                            "AGRO_FISKE_PAYROLL",
                            "AGRO_FORSOKSRING_PAYROLL",
                            "AGRO_IDRETTSLAG_PAYROLL",
                            "AGRO_FORENING_PAYROLL"
                        ]
                    },
                    "vatStatusType": {
                        "type": "string",
                        "description": "VAT type",
                        "enum": [
                            "VAT_REGISTERED",
                            "VAT_NOT_REGISTERED",
                            "VAT_APPLICANT"
                        ]
                    }
                }
            },
            "ResponseWrapperTravelCostCategory": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelCostCategory"
                    }
                }
            },
            "ListResponsePaymentTypeOut": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentTypeOut"
                        }
                    }
                }
            },
            "ResponseWrapperTravelExpenseRate": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelExpenseRate"
                    }
                }
            },
            "TimesheetSalaryTypeSpecification": {
                "required": [
                    "count",
                    "date",
                    "employee",
                    "salaryType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "salaryType": {
                        "$ref": "#/components/schemas/SalaryType"
                    },
                    "description": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "count": {
                        "type": "number"
                    }
                }
            },
            "SalaryCompilation": {
                "type": "object",
                "properties": {
                    "employee": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "year": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "vacationPayBasis": {
                        "type": "number",
                        "readOnly": true
                    },
                    "wages": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SalaryCompilationLine"
                        }
                    },
                    "expenses": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SalaryCompilationLine"
                        }
                    },
                    "deductions": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/SalaryCompilationLine"
                        }
                    }
                }
            },
            "ResponseWrapperAutoLogin": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/AutoLogin"
                    }
                }
            },
            "ResponseWrapperAltinnCompanyModule": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/AltinnCompanyModule"
                    }
                }
            },
            "ResponseWrapperSupplier": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Supplier"
                    }
                }
            },
            "MessageBodyWorkers": {
                "type": "object"
            },
            "LeaveOfAbsenceType": {
                "required": [
                    "leaveOfAbsenceType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "leaveOfAbsenceType": {
                        "type": "string",
                        "description": "Defines the leave of absence type option.",
                        "enum": [
                            "LEAVE_OF_ABSENCE",
                            "FURLOUGH",
                            "PARENTAL_BENEFITS",
                            "MILITARY_SERVICE",
                            "EDUCATIONAL",
                            "COMPASSIONATE"
                        ]
                    },
                    "nameNO": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "code": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "SalesForceAccountInfo": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "customerId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "customerCompanyId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "isReseller": {
                        "type": "boolean",
                        "default": false
                    },
                    "isAccountant": {
                        "type": "boolean",
                        "default": false
                    },
                    "isAuditor": {
                        "type": "boolean",
                        "default": false
                    },
                    "isSuspended": {
                        "type": "boolean",
                        "default": false
                    },
                    "registerDate": {
                        "type": "string",
                        "description": "Tripletex account register Date",
                        "readOnly": true
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Tripletex account start Date",
                        "readOnly": true
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Tripletex account end Date",
                        "readOnly": true
                    }
                }
            },
            "Prediction": {
                "type": "object",
                "properties": {
                    "predictedValue": {
                        "type": "string"
                    },
                    "correctedValue": {
                        "type": "string"
                    },
                    "confidence": {
                        "type": "string"
                    }
                }
            },
            "ListResponseSupplier": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Supplier"
                        }
                    }
                }
            },
            "ResponseWrapperVoucherOptions": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/VoucherOptions"
                    }
                }
            },
            "ResponseWrapperPurchaseOrderline": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/PurchaseOrderline"
                    }
                }
            },
            "ResponseWrapperProductGroupRelation": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProductGroupRelation"
                    }
                }
            },
            "ListResponseDepartment": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Department"
                        }
                    }
                }
            },
            "ResponseWrapperDepartment": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Department"
                    }
                }
            },
            "ResponseWrapperOrderOffer": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/OrderOffer"
                    }
                }
            },
            "ListResponseAnnualAccount": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AnnualAccount"
                        }
                    }
                }
            },
            "ProjectInvoiceDetails": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "feeAmount": {
                        "type": "number",
                        "description": "Fee amount of the project. For example: 100 NOK.",
                        "readOnly": true
                    },
                    "feeAmountCurrency": {
                        "type": "number",
                        "description": "Fee amount of the project in the invoice currency.",
                        "readOnly": true
                    },
                    "markupPercent": {
                        "type": "number",
                        "description": "The percentage value of mark-up of amountFee. For example: 10%.",
                        "readOnly": true
                    },
                    "markupAmount": {
                        "type": "number",
                        "description": "The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.",
                        "readOnly": true
                    },
                    "markupAmountCurrency": {
                        "type": "number",
                        "description": "The amount value of mark-up of amountFee on the project invoice, in the invoice currency.",
                        "readOnly": true
                    },
                    "amountOrderLinesAndReinvoicing": {
                        "type": "number",
                        "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice.",
                        "readOnly": true
                    },
                    "amountOrderLinesAndReinvoicingCurrency": {
                        "type": "number",
                        "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.",
                        "readOnly": true
                    },
                    "amountTravelReportsAndExpenses": {
                        "type": "number",
                        "description": "The amount of travel costs and expenses on the project invoice.",
                        "readOnly": true
                    },
                    "amountTravelReportsAndExpensesCurrency": {
                        "type": "number",
                        "description": "The amount of travel costs and expenses on the project invoice, in the invoice currency.",
                        "readOnly": true
                    },
                    "feeInvoiceText": {
                        "type": "string",
                        "description": "The fee comment on the project invoice.",
                        "readOnly": true
                    },
                    "invoiceText": {
                        "type": "string",
                        "description": "The comment on the project invoice.",
                        "readOnly": true
                    },
                    "includeOrderLinesAndReinvoicing": {
                        "type": "boolean",
                        "description": "Determines if extra costs should be included on the project invoice.",
                        "readOnly": true,
                        "default": false
                    },
                    "includeHours": {
                        "type": "boolean",
                        "description": "Determines if hours should be included on the project invoice.",
                        "readOnly": true,
                        "default": false
                    },
                    "includeOnAccountBalance": {
                        "type": "boolean",
                        "description": "Determines if akonto should be included on the project invoice.",
                        "readOnly": true,
                        "default": false
                    },
                    "onAccountBalanceAmount": {
                        "type": "number",
                        "description": "The akonto amount on the project invoice.",
                        "readOnly": true
                    },
                    "onAccountBalanceAmountCurrency": {
                        "type": "number",
                        "description": "The akonto amount on the project invoice in the invoice currency.",
                        "readOnly": true
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "invoice": {
                        "$ref": "#/components/schemas/Invoice"
                    }
                }
            },
            "Deviation": {
                "required": [
                    "date",
                    "purchaseOrderLine"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "purchaseOrderLine": {
                        "$ref": "#/components/schemas/OrderLine"
                    },
                    "date": {
                        "type": "string"
                    },
                    "cause": {
                        "type": "string",
                        "enum": [
                            "CAUSE_DEFECT",
                            "CAUSE_TOO_FEW",
                            "CAUSE_TOO_MANY",
                            "CAUSE_REPLACEMENT"
                        ]
                    },
                    "action": {
                        "type": "string",
                        "enum": [
                            "ACTION_IGNORE",
                            "ACTION_GENERATE_RESTORDER",
                            "ACTION_RETURN",
                            "ACTION_RETURN_GENERATE_RESTORDER"
                        ]
                    },
                    "comment": {
                        "type": "string"
                    },
                    "receivedBy": {
                        "type": "string",
                        "readOnly": true
                    },
                    "quantityOrdered": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "quantityReceived": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "deviation": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    }
                }
            },
            "ListResponseProject": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Project"
                        }
                    }
                }
            },
            "CompanyHoliday": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "year": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "days": {
                        "type": "number"
                    },
                    "vacationPayPercentage1": {
                        "type": "number"
                    },
                    "vacationPayPercentage2": {
                        "type": "number"
                    },
                    "isMaxPercentage2Amount6G": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ResponseWrapperAppSpecific": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/AppSpecific"
                    }
                }
            },
            "PersonAutoCompleteDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "alternateName": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "postalArea": {
                        "type": "string"
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SEARCH1881",
                                "TRIPLETEX",
                                "NICKNAME",
                                "EMPLOYEE",
                                "CONTACT",
                                "ACTIVITY",
                                "PROJECT",
                                "ORDER",
                                "OFFER",
                                "CUSTOMER",
                                "COMPANY",
                                "CONTROLSCHEMA",
                                "HOUR",
                                "TRAVELEXPENSE"
                            ]
                        }
                    },
                    "firstname": {
                        "type": "string"
                    },
                    "lastname": {
                        "type": "string"
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "phoneNumberMobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "countryId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "reserved": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "Posting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "voucher": {
                        "$ref": "#/components/schemas/Voucher"
                    },
                    "date": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/Supplier"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "amountCurrency": {
                        "type": "number"
                    },
                    "amountGross": {
                        "type": "number"
                    },
                    "amountGrossCurrency": {
                        "type": "number"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "closeGroup": {
                        "$ref": "#/components/schemas/CloseGroup"
                    },
                    "invoiceNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "termOfPayment": {
                        "type": "string"
                    },
                    "row": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    },
                    "systemGenerated": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ResponseWrapperInventory": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Inventory"
                    }
                }
            },
            "ListResponseSubscription": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Subscription"
                        }
                    }
                }
            },
            "ResponseWrapperBankReconciliation": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/BankReconciliation"
                    }
                }
            },
            "TimesheetSettings": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "timeClock": {
                        "type": "boolean",
                        "default": false
                    },
                    "timesheetCompleted": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ResponseWrapperProject": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Project"
                    }
                }
            },
            "BankTransaction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "postedDate": {
                        "type": "string"
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "amountCurrency": {
                        "type": "number"
                    },
                    "bankStatement": {
                        "$ref": "#/components/schemas/BankStatement"
                    }
                }
            },
            "Employment": {
                "required": [
                    "startDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "employmentId": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Existing employment ID used by the current accounting system"
                    },
                    "startDate": {
                        "type": "string"
                    },
                    "endDate": {
                        "type": "string"
                    },
                    "division": {
                        "$ref": "#/components/schemas/Division"
                    },
                    "lastSalaryChangeDate": {
                        "type": "string"
                    },
                    "noEmploymentRelationship": {
                        "type": "boolean",
                        "description": "Activate pensions and other benefits with no employment relationship.",
                        "default": false
                    },
                    "isMainEmployer": {
                        "type": "boolean",
                        "description": "Determines if company is main employer for the employee. Default value is true.\u003cbr /\u003eSome values will be default set if not sent upon creation of employment: \u003cbr/\u003e If isMainEmployer is NOT sent and tax deduction code loennFraHovedarbeidsgiver is sent, isMainEmployer will be set to true. \u003cbr /\u003e If isMainEmployer is NOT sent and tax deduction code loennFraBiarbeidsgiver is sent, isMainEmployer will be set to false. \u003cbr /\u003e If true and deduction code is NOT sent, value of tax deduction code will be set to loennFraHovedarbeidsgiver. \u003cbr /\u003e If false and deduction code is NOT sent, value of tax deduction code will be set to loennFraBiarbeidsgiver. \u003cbr /\u003e For other types of Tax Deduction Codes, isMainEmployer does not influence anything.",
                        "default": false
                    },
                    "taxDeductionCode": {
                        "type": "string",
                        "description": "EMPTY - represents that a tax deduction code is not set on the employment. It is illegal to set the field to this value.  \u003cbr /\u003e Default value of this field is loennFraHovedarbeidsgiver or loennFraBiarbeidsgiver depending on boolean isMainEmployer",
                        "enum": [
                            "loennFraHovedarbeidsgiver",
                            "loennFraBiarbeidsgiver",
                            "pensjon",
                            "loennTilUtenrikstjenestemann",
                            "loennKunTrygdeavgiftTilUtenlandskBorger",
                            "loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger",
                            "introduksjonsstoenad",
                            "ufoereytelserFraAndre",
                            "EMPTY"
                        ]
                    },
                    "employmentDetails": {
                        "type": "array",
                        "description": "Employment types tied to the employment",
                        "items": {
                            "$ref": "#/components/schemas/EmploymentDetails"
                        }
                    }
                }
            },
            "ListResponseTravelExpenseZone": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TravelExpenseZone"
                        }
                    }
                }
            },
            "SupplierInvoice": {
                "required": [
                    "invoiceDate",
                    "invoiceDueDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "invoiceNumber": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "If value is set to 0, the invoice number will be generated.",
                        "format": "int32"
                    },
                    "invoiceDate": {
                        "type": "string"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/Supplier"
                    },
                    "invoiceDueDate": {
                        "type": "string"
                    },
                    "kidOrReceiverReference": {
                        "type": "string",
                        "description": "KID or message"
                    },
                    "voucher": {
                        "$ref": "#/components/schemas/Voucher"
                    },
                    "amount": {
                        "type": "number",
                        "description": "In the company??????s currency, typically NOK. Is 0 if value is missing.",
                        "readOnly": true
                    },
                    "amountCurrency": {
                        "type": "number",
                        "description": "In the specified currency.",
                        "readOnly": true
                    },
                    "amountExcludingVat": {
                        "type": "number",
                        "description": "Amount excluding VAT (NOK). Is 0 if value is missing.",
                        "readOnly": true
                    },
                    "amountExcludingVatCurrency": {
                        "type": "number",
                        "description": "Amount excluding VAT in the specified currency. Is 0 if value is missing.",
                        "readOnly": true
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "isCreditNote": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "orderLines": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/OrderLine"
                        }
                    },
                    "payments": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    }
                }
            },
            "ListResponseProjectOrderLine": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectOrderLine"
                        }
                    }
                }
            },
            "ListResponseLeaveOfAbsence": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LeaveOfAbsence"
                        }
                    }
                }
            },
            "ListResponseTravelExpenseRateCategory": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TravelExpenseRateCategory"
                        }
                    }
                }
            },
            "InternationalId": {
                "type": "object",
                "properties": {
                    "intAmeldingType": {
                        "type": "string",
                        "description": "Define the employee\u0027s International Identificator.\u003cbr\u003ePASSPORT_NO\u003cbr\u003eNATIONAL_INSURANCE_NO\u003cbr\u003eTAX_IDENTIFICATION_NO\u003cbr\u003eVALUE_ADDED_TAX_IDENTIFICATION_NO",
                        "enum": [
                            "PASSPORT_NO",
                            "NATIONAL_INSURANCE_NO",
                            "TAX_IDENTIFICATION_NO",
                            "VALUE_ADDED_TAX_IDENTIFICATION_NO"
                        ]
                    },
                    "country": {
                        "$ref": "#/components/schemas/Country"
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "ListResponseBankReconciliationPaymentType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankReconciliationPaymentType"
                        }
                    }
                }
            },
            "ListResponseOrderLine": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderLine"
                        }
                    }
                }
            },
            "ResponseWrapperVoucherType": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/VoucherType"
                    }
                }
            },
            "ListResponseLeaveOfAbsenceType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LeaveOfAbsenceType"
                        }
                    }
                }
            },
            "ProjectOrderLine": {
                "required": [
                    "date",
                    "project"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "inventory": {
                        "$ref": "#/components/schemas/Inventory"
                    },
                    "description": {
                        "type": "string"
                    },
                    "count": {
                        "type": "number",
                        "format": "double"
                    },
                    "unitCostCurrency": {
                        "type": "number",
                        "description": "Unit price purchase (cost) excluding VAT in the order\u0027s currency"
                    },
                    "unitPriceExcludingVatCurrency": {
                        "type": "number",
                        "description": "Unit price of purchase excluding VAT in the order\u0027s currency"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "markup": {
                        "type": "number",
                        "description": "Markup given as a percentage (%)",
                        "format": "double"
                    },
                    "discount": {
                        "type": "number",
                        "description": "Discount given as a percentage (%)",
                        "format": "double"
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "amountExcludingVatCurrency": {
                        "type": "number",
                        "description": "Total amount on order line excluding VAT in the order\u0027s currency",
                        "readOnly": true
                    },
                    "amountIncludingVatCurrency": {
                        "type": "number",
                        "description": "Total amount on order line including VAT in the order\u0027s currency",
                        "readOnly": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "date": {
                        "type": "string"
                    },
                    "isChargeable": {
                        "type": "boolean",
                        "default": false
                    },
                    "isBudget": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "invoice": {
                        "$ref": "#/components/schemas/Invoice"
                    }
                }
            },
            "MonthlyStatus": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "timesheetEntries": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/TimesheetEntry"
                        }
                    },
                    "approvedDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "completed": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "approvedBy": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "approved": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "approvedUntilDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "monthYear": {
                        "type": "string",
                        "readOnly": true
                    },
                    "hoursPayout": {
                        "type": "number"
                    },
                    "vacationPayout": {
                        "type": "number"
                    },
                    "hourSummary": {
                        "$ref": "#/components/schemas/HourSummary"
                    },
                    "flexSummary": {
                        "$ref": "#/components/schemas/FlexSummary"
                    },
                    "vacationSummary": {
                        "$ref": "#/components/schemas/EmployeePeriod"
                    }
                }
            },
            "ResponseWrapperSalesForceEmployee": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalesForceEmployee"
                    }
                }
            },
            "ResponseWrapperProjectPeriodHourlyReport": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectPeriodHourlyReport"
                    }
                }
            },
            "ResponseWrapperSalarySpecification": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalarySpecification"
                    }
                }
            },
            "Entitlement": {
                "required": [
                    "customer",
                    "employee",
                    "entitlementId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "name": {
                        "type": "string",
                        "description": "Descriptive name for the privilege. Might change between releases.",
                        "readOnly": true
                    },
                    "entitlementId": {
                        "type": "integer",
                        "description": "Unique id for the type of privilege.",
                        "format": "int32"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Company"
                    }
                }
            },
            "ResponseWrapperVoucher": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Voucher"
                    }
                }
            },
            "ResponseWrapperSalesForceAccountInfo": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalesForceAccountInfo"
                    }
                }
            },
            "Address": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "addressLine1": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "addressLine2": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "postalCode": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "city": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "country": {
                        "$ref": "#/components/schemas/Country"
                    }
                }
            },
            "ListResponseCompany": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Company"
                        }
                    }
                }
            },
            "BankReconciliationPaymentType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Description",
                        "readOnly": true
                    },
                    "debitAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "creditAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "isInactive": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ResponseWrapperProjectInvoiceDetails": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectInvoiceDetails"
                    }
                }
            },
            "ResponseWrapperNextOfKin": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/NextOfKin"
                    }
                }
            },
            "SalaryType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "maxLength": 10,
                        "type": "string"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "showInTimesheet": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ResponseWrapperVatType": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/VatType"
                    }
                }
            },
            "Stocktaking": {
                "required": [
                    "date",
                    "inventory",
                    "typeOfStocktaking"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "typeOfStocktaking": {
                        "type": "string",
                        "description": "Define the type of stoctaking.\u003cbr\u003eALL_PRODUCTS_WITH_INVENTORIES: Create a stocktaking for all products with inventories.\u003cbr\u003eINCLUDE_PRODUCTS: Create a stocktaking which includes all products.\u003cbr\u003eNO_PRODUCTS: Create a stocktaking without products.\u003cbr\u003eIf not specified, the value \u0027ALL_PRODUCTS_WITH_INVENTORIES\u0027 is used.",
                        "enum": [
                            "ALL_PRODUCTS_WITH_INVENTORIES",
                            "INCLUDE_PRODUCTS",
                            "NO_PRODUCTS"
                        ]
                    },
                    "inventory": {
                        "$ref": "#/components/schemas/Inventory"
                    },
                    "isCompleted": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "CloseGroup": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string"
                    },
                    "postings": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    }
                }
            },
            "ListResponsePaymentType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentType"
                        }
                    }
                }
            },
            "ProjectSpecificRate": {
                "required": [
                    "hourlyRate",
                    "projectHourlyRate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "hourlyRate": {
                        "type": "number"
                    },
                    "hourlyCostPercentage": {
                        "type": "number"
                    },
                    "projectHourlyRate": {
                        "$ref": "#/components/schemas/ProjectHourlyRate"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "activity": {
                        "$ref": "#/components/schemas/Activity"
                    }
                }
            },
            "CurrencyExchangeRate": {
                "required": [
                    "sourceCurrency",
                    "targetCurrency"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "targetCurrency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "sourceCurrency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "rate": {
                        "minimum": 0,
                        "type": "number"
                    },
                    "source": {
                        "type": "string",
                        "description": "Source of exchange rates, i.e Norges Bank",
                        "enum": [
                            "NORGES_BANK",
                            "HALLONEN"
                        ]
                    },
                    "date": {
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperPaymentTypeOut": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/PaymentTypeOut"
                    }
                }
            },
            "ExternalProduct": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "elNumber": {
                        "maxLength": 14,
                        "type": "string"
                    },
                    "nrfNumber": {
                        "maxLength": 14,
                        "type": "string"
                    },
                    "costExcludingVatCurrency": {
                        "type": "number",
                        "description": "Price purchase (cost) excluding VAT in the product\u0027s currency",
                        "readOnly": true
                    },
                    "priceExcludingVatCurrency": {
                        "type": "number",
                        "description": "Price of purchase excluding VAT in the product\u0027s currency"
                    },
                    "priceIncludingVatCurrency": {
                        "type": "number",
                        "description": "Price of purchase including VAT in the product\u0027s currency"
                    },
                    "isInactive": {
                        "type": "boolean",
                        "default": false
                    },
                    "productUnit": {
                        "$ref": "#/components/schemas/ProductUnit"
                    },
                    "isStockItem": {
                        "type": "boolean",
                        "default": false
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "discountPrice": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperString": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    }
                }
            },
            "CustomerCategory": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "TriggerDTO": {
                "type": "object",
                "properties": {
                    "calendarName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nextFireTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "previousFireTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "state": {
                        "type": "string"
                    }
                }
            },
            "NextOfKin": {
                "required": [
                    "name",
                    "phoneNumber"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "phoneNumber": {
                        "maxLength": 20,
                        "type": "string"
                    },
                    "address": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "typeOfRelationship": {
                        "type": "string",
                        "description": "Define the employee\u0027s next of kin relationtype.\u003cbr\u003eSPOUSE\u003cbr\u003ePARTNER\u003cbr\u003ePARENT\u003cbr\u003eCHILD\u003cbr\u003eSIBLING",
                        "enum": [
                            "SPOUSE",
                            "PARTNER",
                            "PARENT",
                            "CHILD",
                            "SIBLING"
                        ]
                    }
                }
            },
            "OrderOffer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "offerDate": {
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    }
                }
            },
            "ResponseWrapperTimeClock": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TimeClock"
                    }
                }
            },
            "TimeClock": {
                "required": [
                    "date",
                    "employee",
                    "timeStart",
                    "timeStop",
                    "timesheetEntry"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "activity": {
                        "$ref": "#/components/schemas/Activity"
                    },
                    "timesheetEntry": {
                        "$ref": "#/components/schemas/TimesheetEntry"
                    },
                    "date": {
                        "type": "string"
                    },
                    "timeStart": {
                        "type": "string"
                    },
                    "timeStop": {
                        "type": "string"
                    },
                    "hoursStart": {
                        "minimum": 0,
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "ListResponseBankReconciliation": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankReconciliation"
                        }
                    }
                }
            },
            "ResponseWrapperCustomer": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Customer"
                    }
                }
            },
            "BankReconciliationMatch": {
                "required": [
                    "bankReconciliation"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "bankReconciliation": {
                        "$ref": "#/components/schemas/BankReconciliation"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of match, MANUAL and APPROVED_SUGGESTION are considered part of reconciliation.",
                        "enum": [
                            "MANUAL",
                            "PENDING_SUGGESTION",
                            "REJECTED_SUGGESTION",
                            "APPROVED_SUGGESTION",
                            "ADJUSTMENT",
                            "AUTO_MATCHED",
                            "REJECTED_AUTO_MATCH"
                        ]
                    },
                    "transactions": {
                        "type": "array",
                        "description": "Match transactions",
                        "items": {
                            "$ref": "#/components/schemas/BankTransaction"
                        }
                    },
                    "postings": {
                        "type": "array",
                        "description": "Match postings",
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    }
                }
            },
            "ListResponseTravelCostCategory": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TravelCostCategory"
                        }
                    }
                }
            },
            "ListResponseOrderOffer": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderOffer"
                        }
                    }
                }
            },
            "ResponseWrapperNotification": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Notification"
                    }
                }
            },
            "FormDataContentDisposition": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modificationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "readDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "SupplierBalance": {
                "type": "object",
                "properties": {
                    "supplier": {
                        "$ref": "#/components/schemas/Supplier"
                    },
                    "balanceIn": {
                        "type": "number",
                        "readOnly": true
                    },
                    "balanceChange": {
                        "type": "number",
                        "readOnly": true
                    },
                    "balanceOut": {
                        "type": "number",
                        "readOnly": true
                    },
                    "balanceInCurrencies": {
                        "type": "array",
                        "description": "Currencies that have been used prior to this period, for the given filter",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Currency"
                        }
                    },
                    "sumAmountNegative": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "SalesForceAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "addressLine1": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "addressLine2": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "postalCode": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "city": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "country": {
                        "$ref": "#/components/schemas/SalesForceCountry"
                    }
                }
            },
            "LegacyAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "addressLine1": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "addressLine2": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "postalCode": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "city": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "country": {
                        "$ref": "#/components/schemas/Country"
                    },
                    "name": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "CompanyAutoCompleteDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "alternateName": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "postalCode": {
                        "type": "string"
                    },
                    "postalArea": {
                        "type": "string"
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "score": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "SEARCH1881",
                                "TRIPLETEX",
                                "NICKNAME",
                                "EMPLOYEE",
                                "CONTACT",
                                "ACTIVITY",
                                "PROJECT",
                                "ORDER",
                                "OFFER",
                                "CUSTOMER",
                                "COMPANY",
                                "CONTROLSCHEMA",
                                "HOUR",
                                "TRAVELEXPENSE"
                            ]
                        }
                    },
                    "companyCode": {
                        "type": "string"
                    },
                    "companyType": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "phoneNumberMobile": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "countryId": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ResponseWrapperSupplierInvoice": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SupplierInvoice"
                    }
                }
            },
            "ListResponseWorkingHoursScheme": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WorkingHoursScheme"
                        }
                    }
                }
            },
            "ListResponseTravelExpenseRateCategoryGroup": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TravelExpenseRateCategoryGroup"
                        }
                    }
                }
            },
            "LedgerAccount": {
                "type": "object",
                "properties": {
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "sumAmount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "sumAmountCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "openingBalance": {
                        "type": "number",
                        "readOnly": true
                    },
                    "openingBalanceCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "closingBalance": {
                        "type": "number",
                        "readOnly": true
                    },
                    "closingBalanceCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "postings": {
                        "type": "array",
                        "description": "Link to postings on this account.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    }
                }
            },
            "ResponseWrapperBankReconciliationPaymentType": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/BankReconciliationPaymentType"
                    }
                }
            },
            "Division": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "startDate": {
                        "type": "string"
                    },
                    "endDate": {
                        "type": "string"
                    },
                    "organizationNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "municipality": {
                        "$ref": "#/components/schemas/Municipality"
                    }
                }
            },
            "Supplier": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "organizationNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "supplierNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "customerNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "isSupplier": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isCustomer": {
                        "type": "boolean",
                        "description": "Determine if the supplier is also a customer",
                        "default": false
                    },
                    "isInactive": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "email": {
                        "maxLength": 254,
                        "minLength": 0,
                        "type": "string",
                        "format": "email"
                    },
                    "bankAccounts": {
                        "type": "array",
                        "description": "List of the bank account numbers for this supplier.  Norwegian bank account numbers only.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "invoiceEmail": {
                        "maxLength": 254,
                        "minLength": 0,
                        "type": "string",
                        "format": "email"
                    },
                    "overdueNoticeEmail": {
                        "maxLength": 254,
                        "minLength": 0,
                        "type": "string",
                        "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
                        "format": "email"
                    },
                    "phoneNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "phoneNumberMobile": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "isPrivateIndividual": {
                        "type": "boolean",
                        "default": false
                    },
                    "showProducts": {
                        "type": "boolean",
                        "default": false
                    },
                    "accountManager": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "postalAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "physicalAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/DeliveryAddress"
                    },
                    "category1": {
                        "$ref": "#/components/schemas/CustomerCategory"
                    },
                    "category2": {
                        "$ref": "#/components/schemas/CustomerCategory"
                    },
                    "category3": {
                        "$ref": "#/components/schemas/CustomerCategory"
                    }
                }
            },
            "ProjectParticipant": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "adminAccess": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ListResponseExternalProduct": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ExternalProduct"
                        }
                    }
                }
            },
            "ProjectPeriodHourlyReport": {
                "type": "object",
                "properties": {
                    "chargeableHours": {
                        "type": "number",
                        "readOnly": true
                    },
                    "nonChargeableHours": {
                        "type": "number",
                        "readOnly": true
                    },
                    "approvedButUnchargedHours": {
                        "type": "number",
                        "readOnly": true
                    },
                    "nonApprovedHours": {
                        "type": "number",
                        "readOnly": true
                    },
                    "registeredHours": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "ListResponseOccupationCode": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OccupationCode"
                        }
                    }
                }
            },
            "ResponseWrapperSalesModuleDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalesModuleDTO"
                    }
                }
            },
            "SessionToken": {
                "required": [
                    "expirationDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "consumerToken": {
                        "$ref": "#/components/schemas/ConsumerToken"
                    },
                    "employeeToken": {
                        "$ref": "#/components/schemas/EmployeeToken"
                    },
                    "expirationDate": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    },
                    "encryptionKey": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "Banner": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "bannerType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "title": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "readOnly": true
                    },
                    "button": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "link": {
                        "type": "string",
                        "readOnly": true
                    },
                    "tag": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "done": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ListResponseContact": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Contact"
                        }
                    }
                }
            },
            "ResponseWrapperTravelExpense": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelExpense"
                    }
                }
            },
            "FormDataBodyPart": {
                "type": "object",
                "properties": {
                    "contentDisposition": {
                        "$ref": "#/components/schemas/ContentDisposition"
                    },
                    "entity": {
                        "type": "object",
                        "properties": {
                            
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                    },
                    "messageBodyWorkers": {
                        "$ref": "#/components/schemas/MessageBodyWorkers"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MultiPart"
                    },
                    "providers": {
                        "$ref": "#/components/schemas/Providers"
                    },
                    "simple": {
                        "type": "boolean",
                        "default": false
                    },
                    "formDataContentDisposition": {
                        "$ref": "#/components/schemas/FormDataContentDisposition"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "parameterizedHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ParameterizedHeader"
                            }
                        }
                    }
                }
            },
            "PurchaseOrder": {
                "required": [
                    "deliveryDate",
                    "ourContact",
                    "supplier"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string",
                        "description": "Purchase order number",
                        "readOnly": true
                    },
                    "receiverEmail": {
                        "maxLength": 100,
                        "type": "string",
                        "description": "Email when purchase order is send by email."
                    },
                    "discount": {
                        "type": "number",
                        "description": "Discount Percentage",
                        "format": "double"
                    },
                    "packingNoteMessage": {
                        "maxLength": 50,
                        "type": "string",
                        "description": "Message on packing note.Wholesaler specific."
                    },
                    "transporterMessage": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Message to transporter.Wholesaler specific."
                    },
                    "comments": {
                        "type": "string",
                        "description": "Delivery information and invoice comments"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/Supplier"
                    },
                    "deliveryDate": {
                        "type": "string"
                    },
                    "orderLines": {
                        "type": "array",
                        "description": "Order lines tied to the purchase order",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/PurchaseOrderline"
                        }
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "creationDate": {
                        "type": "string"
                    },
                    "isClosed": {
                        "type": "boolean",
                        "default": false
                    },
                    "ourContact": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "supplierContact": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "attention": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "STATUS_OPEN",
                            "STATUS_SENT",
                            "STATUS_RECEIVING",
                            "STATUS_CONFIRMED_DEVIATION_DETECTED",
                            "STATUS_DEVIATION_OPEN",
                            "STATUS_DEVIATION_CONFIRMED",
                            "STATUS_CONFIRMED"
                        ]
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "restorder": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                    }
                }
            },
            "Prospect": {
                "required": [
                    "createdDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "createdDate": {
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "salesEmployee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "isClosed": {
                        "type": "boolean",
                        "default": false
                    },
                    "closedReason": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    },
                    "closedDate": {
                        "type": "string"
                    },
                    "competitor": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "prospectType": {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "projectOffer": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "finalIncomeDate": {
                        "type": "string",
                        "description": "The estimated start date for income on the prospect."
                    },
                    "finalInitialValue": {
                        "type": "number",
                        "description": "The estimated startup fee on this prospect."
                    },
                    "finalMonthlyValue": {
                        "type": "number",
                        "description": "The estimated monthly fee on this prospect."
                    },
                    "finalAdditionalServicesValue": {
                        "type": "number",
                        "description": "Tripletex specific."
                    },
                    "totalValue": {
                        "type": "number",
                        "description": "The estimated total fee on this prospect.",
                        "readOnly": true
                    }
                }
            },
            "BodyPart": {
                "type": "object",
                "properties": {
                    "contentDisposition": {
                        "$ref": "#/components/schemas/ContentDisposition"
                    },
                    "entity": {
                        "type": "object",
                        "properties": {
                            
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                    },
                    "messageBodyWorkers": {
                        "$ref": "#/components/schemas/MessageBodyWorkers"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MultiPart"
                    },
                    "providers": {
                        "$ref": "#/components/schemas/Providers"
                    },
                    "parameterizedHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ParameterizedHeader"
                            }
                        }
                    }
                }
            },
            "ResponseWrapperBoolean": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "Task": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "Inventories": {
                "type": "object",
                "properties": {
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "stock": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Stock"
                        }
                    }
                }
            },
            "SalaryCompilationLine": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "readOnly": true
                    },
                    "amount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "taxable": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "taxableDescription": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperDeviation": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Deviation"
                    }
                }
            },
            "TravelPaymentType": {
                "required": [
                    "description"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "showOnTravelExpenses": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "showOnEmployeeExpenses": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isInactive": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "OccupationCode": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "nameNO": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "code": {
                        "maxLength": 7,
                        "type": "string"
                    }
                }
            },
            "EmploymentType": {
                "required": [
                    "employmentType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employmentType": {
                        "type": "string",
                        "description": "Defines the employment type option. ",
                        "enum": [
                            "ORDINARY",
                            "MARITIME",
                            "FREELANCE"
                        ]
                    },
                    "nameNO": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "code": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "BankStatementBalanceDTO": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Balance on the given date.",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperPerDiemCompensation": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/PerDiemCompensation"
                    }
                }
            },
            "StandardTime": {
                "required": [
                    "fromDate",
                    "hoursPerDay"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "fromDate": {
                        "type": "string"
                    },
                    "hoursPerDay": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "TripletexAccount2": {
                "required": [
                    "accountType",
                    "administratorPassword",
                    "company",
                    "modules",
                    "numberOfVouchers"
                ],
                "type": "object",
                "properties": {
                    "company": {
                        "$ref": "#/components/schemas/Company"
                    },
                    "administrator": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "accountType": {
                        "type": "string",
                        "description": "Is this a test account or a paying account?",
                        "enum": [
                            "TEST",
                            "PAYING"
                        ]
                    },
                    "modules": {
                        "type": "array",
                        "description": "Sales modules (functionality in the application) to activate for the newly created account. Some modules have extra costs.",
                        "items": {
                            "$ref": "#/components/schemas/SalesModuleDTO"
                        }
                    },
                    "administratorPassword": {
                        "type": "string",
                        "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)"
                    },
                    "sendEmails": {
                        "type": "boolean",
                        "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true",
                        "default": false
                    },
                    "autoValidateUserLogin": {
                        "type": "boolean",
                        "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS.",
                        "default": false
                    },
                    "createAdministratorApiToken": {
                        "type": "boolean",
                        "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response.",
                        "default": false
                    },
                    "createCompanyOwnedApiToken": {
                        "type": "boolean",
                        "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response.",
                        "default": false
                    },
                    "mayCreateTripletexAccounts": {
                        "type": "boolean",
                        "description": "Should the company we are creating be able to create new Tripletex accounts?",
                        "default": false
                    },
                    "numberOfVouchers": {
                        "type": "string",
                        "description": "Used to calculate prices.",
                        "enum": [
                            "INTERVAL_0_100",
                            "INTERVAL_101_500",
                            "INTERVAL_0_500",
                            "INTERVAL_501_1000",
                            "INTERVAL_1001_2000",
                            "INTERVAL_2001_3500",
                            "INTERVAL_3501_5000",
                            "INTERVAL_5001_10000",
                            "INTERVAL_UNLIMITED"
                        ]
                    },
                    "chartOfAccountsType": {
                        "type": "string",
                        "description": "The chart of accounts to use for the new company",
                        "enum": [
                            "DEFAULT",
                            "MAMUT_STD_PAYROLL",
                            "MAMUT_NARF_PAYROLL",
                            "AGRO_FORRETNING_PAYROLL",
                            "AGRO_LANDBRUK_PAYROLL",
                            "AGRO_FISKE_PAYROLL",
                            "AGRO_FORSOKSRING_PAYROLL",
                            "AGRO_IDRETTSLAG_PAYROLL",
                            "AGRO_FORENING_PAYROLL"
                        ]
                    },
                    "vatStatusType": {
                        "type": "string",
                        "description": "VAT type",
                        "enum": [
                            "VAT_REGISTERED",
                            "VAT_NOT_REGISTERED",
                            "VAT_APPLICANT"
                        ]
                    },
                    "reseller": {
                        "type": "boolean",
                        "default": false
                    },
                    "accountingOffice": {
                        "type": "boolean",
                        "default": false
                    },
                    "auditor": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ListResponseNotification": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Notification"
                        }
                    }
                }
            },
            "ResponseWrapperInvoice": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Invoice"
                    }
                }
            },
            "ResponseWrapperApiConsumer": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ApiConsumer"
                    }
                }
            },
            "EventInfoDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "payloadModel": {
                        "type": "string"
                    },
                    "examples": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebHookWrapper"
                        }
                    }
                }
            },
            "VoucherSearchResponse": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Voucher"
                        }
                    },
                    "totalNumberOfPostings": {
                        "type": "integer",
                        "description": "[DEPRECATED] Number of postings returned (if postings are returned)",
                        "format": "int32"
                    }
                }
            },
            "ResponseWrapperAccount": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Account"
                    }
                }
            },
            "ListResponseDeviation": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Deviation"
                        }
                    }
                }
            },
            "ResponseWrapperSalaryTransaction": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalaryTransaction"
                    }
                }
            },
            "CompanyAuthorityDTO": {
                "type": "object",
                "properties": {
                    "hasCompanyAuthority": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ResponseWrapperDashboardDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/DashboardDTO"
                    }
                }
            },
            "Payslip": {
                "required": [
                    "employee"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "transaction": {
                        "$ref": "#/components/schemas/SalaryTransaction"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "date": {
                        "type": "string",
                        "description": "Voucher date."
                    },
                    "year": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "month": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "specifications": {
                        "type": "array",
                        "description": "Link to salary specifications.",
                        "items": {
                            "$ref": "#/components/schemas/SalarySpecification"
                        }
                    },
                    "vacationAllowanceAmount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "grossAmount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "amount": {
                        "type": "number",
                        "readOnly": true
                    },
                    "number": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    }
                }
            },
            "MaventaEventDataDTO": {
                "required": [
                    "destination",
                    "invoice_id",
                    "invoice_number",
                    "recipient_bid",
                    "recipient_name"
                ],
                "type": "object",
                "properties": {
                    "invoice_id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "invoice_number": {
                        "type": "string",
                        "readOnly": true
                    },
                    "destination": {
                        "type": "string",
                        "readOnly": true
                    },
                    "recipient_name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "recipient_bid": {
                        "type": "string",
                        "readOnly": true
                    },
                    "error_message": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperProductLine": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProductLine"
                    }
                }
            },
            "Payment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "paymentDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "bookingDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "valueDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "amountCurrency": {
                        "type": "number",
                        "description": "In the specified currency.",
                        "readOnly": true
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "creditorBankName": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "creditorBankAddress": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "creditorBankPostalCode": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "creditorBankPostalCity": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "status": {
                        "type": "string",
                        "description": "The payment status.NOT_APPROVED: Payment not approved yet.\u003cbr\u003eAPPROVED: Payment approved, but not yet sent to bank.\u003cbr\u003eSENT_TO_AUTOPAY: Payment sent to bank.\u003cbr\u003eRECEIVED_BY_BANK: Payment received by the bank.\u003cbr\u003eACCEPTED_BY_BANK: Payment that was accepted by the bank.\u003cbr\u003eFAILED: Payment that failed.\u003cbr\u003eCANCELLED: Cancelled payment.\u003cbr\u003eSUCCESS: Payment that ended successfully.\u003cbr\u003e",
                        "readOnly": true,
                        "enum": [
                            "NOT_APPROVED",
                            "APPROVED",
                            "SENT_TO_AUTOPAY",
                            "RECEIVED_BY_BANK",
                            "ACCEPTED_BY_BANK",
                            "FAILED",
                            "CANCELLED",
                            "SUCCESS"
                        ]
                    },
                    "isFinalStatus": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isForeignPayment": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isSalary": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "kid": {
                        "maxLength": 25,
                        "type": "string",
                        "description": "KID - Kundeidentifikasjonsnummer.",
                        "readOnly": true
                    },
                    "receiverReference": {
                        "maxLength": 250,
                        "type": "string",
                        "readOnly": true
                    },
                    "sourceVoucher": {
                        "$ref": "#/components/schemas/Voucher"
                    },
                    "postings": {
                        "$ref": "#/components/schemas/Posting"
                    },
                    "account": {
                        "$ref": "#/components/schemas/Account"
                    }
                }
            },
            "ListResponseProductUnit": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductUnit"
                        }
                    }
                }
            },
            "UnreadCountDTO": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "readCursor": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "DocumentArchive": {
                "required": [
                    "fileName",
                    "mimeType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "fileName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The name of the document."
                    },
                    "size": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The size of the document in readable format.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "archiveDate": {
                        "type": "string"
                    },
                    "mimeType": {
                        "maxLength": 100,
                        "type": "string",
                        "description": "Type of the document"
                    }
                }
            },
            "SalesForceEmployeeRole": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "companyId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "employeeId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "roleId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "userId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "tripletexCustomerId": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "TravelExpenseSettings": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "useRates": {
                        "type": "boolean",
                        "default": false
                    },
                    "approvalRequired": {
                        "type": "boolean",
                        "default": false
                    },
                    "taxFreePerDiemRates": {
                        "type": "boolean",
                        "default": false
                    },
                    "taxFreeMileageRates": {
                        "type": "boolean",
                        "default": false
                    },
                    "perDiemNotCompensated": {
                        "type": "boolean",
                        "default": false
                    },
                    "accommodationNotCompensated": {
                        "type": "boolean",
                        "default": false
                    },
                    "mileageNotCompensated": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ListResponseTravelExpense": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TravelExpense"
                        }
                    }
                }
            },
            "ResponseWrapperSalaryCompilation": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalaryCompilation"
                    }
                }
            },
            "ListResponseSupplierBalance": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SupplierBalance"
                        }
                    }
                }
            },
            "TravelExpenseRateCategory": {
                "required": [
                    "fromDate",
                    "toDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "ameldingWageCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "wageCodeNumber": {
                        "maxLength": 10,
                        "type": "string"
                    },
                    "isValidDayTrip": {
                        "type": "boolean",
                        "default": false
                    },
                    "isValidAccommodation": {
                        "type": "boolean",
                        "default": false
                    },
                    "isValidDomestic": {
                        "type": "boolean",
                        "default": false
                    },
                    "isValidForeignTravel": {
                        "type": "boolean",
                        "default": false
                    },
                    "isRequiresZone": {
                        "type": "boolean",
                        "default": false
                    },
                    "isRequiresOvernightAccommodation": {
                        "type": "boolean",
                        "default": false
                    },
                    "fromDate": {
                        "type": "string"
                    },
                    "toDate": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "PER_DIEM",
                            "ACCOMMODATION_ALLOWANCE",
                            "MILEAGE_ALLOWANCE"
                        ]
                    }
                }
            },
            "EmployeeToken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "apiConsumer": {
                        "$ref": "#/components/schemas/ApiConsumer"
                    },
                    "token": {
                        "type": "string"
                    },
                    "expirationDate": {
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperTravelExpenseSettings": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelExpenseSettings"
                    }
                }
            },
            "ResponseWrapperPageOptions": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/PageOptions"
                    }
                }
            },
            "ResponseWrapperPosting": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Posting"
                    }
                }
            },
            "PaymentType": {
                "required": [
                    "description"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "debitAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "creditAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "supplier": {
                        "$ref": "#/components/schemas/Supplier"
                    }
                }
            },
            "ResponseWrapperSessionToken": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SessionToken"
                    }
                }
            },
            "ListResponseRemunerationType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RemunerationType"
                        }
                    }
                }
            },
            "ResponseWrapperProjectActivity": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectActivity"
                    }
                }
            },
            "HourlyCostAndRate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "date": {
                        "type": "string"
                    },
                    "rate": {
                        "type": "number"
                    },
                    "budgetRate": {
                        "type": "number"
                    },
                    "hourCostRate": {
                        "type": "number"
                    }
                }
            },
            "ListResponseDocumentArchive": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DocumentArchive"
                        }
                    }
                }
            },
            "ListResponseCustomer": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Customer"
                        }
                    }
                }
            },
            "ResponseWrapperTripletexAccountReturn": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TripletexAccountReturn"
                    }
                }
            },
            "ListResponseEmployeeCompanyDTO": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmployeeCompanyDTO"
                        }
                    }
                }
            },
            "ResponseWrapperProjectSpecificRate": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectSpecificRate"
                    }
                }
            },
            "ListResponseHourlyCostAndRate": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HourlyCostAndRate"
                        }
                    }
                }
            },
            "ResponseWrapperCustomerCategory": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/CustomerCategory"
                    }
                }
            },
            "ResponseWrapperProjectParticipant": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectParticipant"
                    }
                }
            },
            "ListResponseTravelPaymentType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TravelPaymentType"
                        }
                    }
                }
            },
            "ProductGroup": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Product group name"
                    },
                    "parentGroup": {
                        "$ref": "#/components/schemas/ProductGroup"
                    }
                }
            },
            "ResponseWrapperWeek": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Week"
                    }
                }
            },
            "ListResponseProductGroupRelation": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductGroupRelation"
                        }
                    }
                }
            },
            "ResponseWrapperExternalProduct": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ExternalProduct"
                    }
                }
            },
            "Activity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "activityType": {
                        "type": "string",
                        "description": "PROJECT_SPECIFIC_ACTIVITY are made via project/projectactivity, as they must be part of a project.",
                        "enum": [
                            "GENERAL_ACTIVITY",
                            "PROJECT_GENERAL_ACTIVITY",
                            "PROJECT_SPECIFIC_ACTIVITY",
                            "TASK"
                        ]
                    },
                    "isProjectActivity": {
                        "type": "boolean",
                        "description": "Manipulate these with ActivityType",
                        "readOnly": true,
                        "default": false
                    },
                    "isGeneral": {
                        "type": "boolean",
                        "description": "Manipulate these with ActivityType",
                        "readOnly": true,
                        "default": false
                    },
                    "isTask": {
                        "type": "boolean",
                        "description": "Manipulate these with ActivityType",
                        "readOnly": true,
                        "default": false
                    },
                    "isDisabled": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isChargeable": {
                        "type": "boolean",
                        "default": false
                    },
                    "rate": {
                        "type": "number"
                    }
                }
            },
            "ListResponseNextOfKin": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NextOfKin"
                        }
                    }
                }
            },
            "ListResponseSupplierInvoice": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SupplierInvoice"
                        }
                    }
                }
            },
            "Document": {
                "required": [
                    "fileName"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "fileName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The name of the document."
                    },
                    "size": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The size of the document in bytes.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "mimeType": {
                        "maxLength": 100,
                        "type": "string",
                        "description": "Type of the document",
                        "readOnly": true,
                        "example": "type/subtype of resource. E.g. application/pdf"
                    }
                }
            },
            "ResponseWrapperEventInfoDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/EventInfoDTO"
                    }
                }
            },
            "ResponseWrapperMonthlyStatus": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/MonthlyStatus"
                    }
                }
            },
            "Department": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "departmentNumber": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "departmentManager": {
                        "$ref": "#/components/schemas/Employee"
                    }
                }
            },
            "ProjectPeriodInvoicingReserve": {
                "type": "object",
                "properties": {
                    "invoiceFeeReserveCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "periodOrderLinesIncomeCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "invoiceExtracostsReserveCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "invoiceAkontoReserveAmountCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "invoiceReserveTotalAmountCurrency": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "ListResponseGoodsReceipt": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GoodsReceipt"
                        }
                    }
                }
            },
            "ListResponseSalarySpecification": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SalarySpecification"
                        }
                    }
                }
            },
            "Currency": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "code": {
                        "maxLength": 10,
                        "type": "string"
                    },
                    "description": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "factor": {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ResponseWrapperProjectHourlyRate": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectHourlyRate"
                    }
                }
            },
            "ListResponseBankStatement": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankStatement"
                        }
                    }
                }
            },
            "MediaType": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "subtype": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "wildcardType": {
                        "type": "boolean",
                        "default": false
                    },
                    "wildcardSubtype": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ListResponseEmployee": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Employee"
                        }
                    }
                }
            },
            "ListResponseStandardTime": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StandardTime"
                        }
                    }
                }
            },
            "ListResponseBank": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Bank"
                        }
                    }
                }
            },
            "ResponseWrapperCost": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Cost"
                    }
                }
            },
            "AccountingPeriod": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "maximum": 11,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "start": {
                        "type": "string",
                        "readOnly": true
                    },
                    "end": {
                        "type": "string",
                        "readOnly": true
                    },
                    "isClosed": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ProjectHourlyRate": {
                "required": [
                    "hourlyRateModel",
                    "startDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "startDate": {
                        "type": "string"
                    },
                    "showInProjectOrder": {
                        "type": "boolean",
                        "description": "Show on contract confirmation/offers",
                        "default": false
                    },
                    "hourlyRateModel": {
                        "type": "string",
                        "description": "Defines the model used for the hourly rate.",
                        "enum": [
                            "TYPE_PREDEFINED_HOURLY_RATES",
                            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
                            "TYPE_FIXED_HOURLY_RATE"
                        ]
                    },
                    "projectSpecificRates": {
                        "type": "array",
                        "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
                        "items": {
                            "$ref": "#/components/schemas/ProjectSpecificRate"
                        }
                    },
                    "fixedRate": {
                        "type": "number",
                        "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE."
                    }
                }
            },
            "ResponseWrapperProjectPeriodInvoicingReserve": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectPeriodInvoicingReserve"
                    }
                }
            },
            "Project": {
                "required": [
                    "isInternal",
                    "name",
                    "projectManager",
                    "startDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "projectManager": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "mainProject": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "startDate": {
                        "type": "string"
                    },
                    "endDate": {
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "isClosed": {
                        "type": "boolean",
                        "default": false
                    },
                    "isReadyForInvoicing": {
                        "type": "boolean",
                        "default": false
                    },
                    "isInternal": {
                        "type": "boolean",
                        "default": false
                    },
                    "isOffer": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isFixedPrice": {
                        "type": "boolean",
                        "description": "Project is fixed price if set to true, hourly rate if set to false.",
                        "default": false
                    },
                    "projectCategory": {
                        "$ref": "#/components/schemas/ProjectCategory"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/DeliveryAddress"
                    },
                    "displayNameFormat": {
                        "type": "string",
                        "description": "Defines project name presentation in overviews.",
                        "enum": [
                            "NAME_STANDARD",
                            "NAME_INCL_CUSTOMER_NAME",
                            "NAME_INCL_PARENT_NAME",
                            "NAME_INCL_PARENT_NUMBER",
                            "NAME_INCL_PARENT_NAME_AND_NUMBER"
                        ]
                    },
                    "externalAccountsNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "discountPercentage": {
                        "type": "number",
                        "description": "Project discount percentage.",
                        "readOnly": true
                    },
                    "extraPercentOrderLines": {
                        "type": "number",
                        "description": "Project markup percentage.",
                        "readOnly": true
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "fixedprice": {
                        "type": "number",
                        "description": "Fixed price amount, in the project\u0027s currency."
                    },
                    "contributionMarginPercent": {
                        "type": "number",
                        "readOnly": true
                    },
                    "numberOfSubProjects": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "numberOfProjectParticipants": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "orderLines": {
                        "type": "array",
                        "description": "Order lines tied to the order",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProjectOrderLine"
                        }
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "markUpOrderLines": {
                        "type": "number",
                        "description": "Set mark-up (%) for order lines."
                    },
                    "markUpFeesEarned": {
                        "type": "number",
                        "description": "Set mark-up (%) for fees earned."
                    },
                    "isPriceCeiling": {
                        "type": "boolean",
                        "description": "Set to true if an hourly rate project has a price ceiling.",
                        "default": false
                    },
                    "priceCeilingAmount": {
                        "type": "number",
                        "description": "Price ceiling amount, in the project\u0027s currency."
                    },
                    "projectHourlyRates": {
                        "type": "array",
                        "description": "Project Rate Types tied to the project.",
                        "items": {
                            "$ref": "#/components/schemas/ProjectHourlyRate"
                        }
                    },
                    "forParticipantsOnly": {
                        "type": "boolean",
                        "description": "Set to true if only project participants can register information on the project",
                        "default": false
                    },
                    "participants": {
                        "type": "array",
                        "description": "Link to individual project participants.",
                        "items": {
                            "$ref": "#/components/schemas/ProjectParticipant"
                        }
                    },
                    "contact": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "invoicingPlan": {
                        "type": "array",
                        "description": "Invoicing plans tied to the project",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Invoice"
                        }
                    },
                    "preliminaryInvoice": {
                        "$ref": "#/components/schemas/Invoice"
                    },
                    "generalProjectActivitiesPerProjectOnly": {
                        "type": "boolean",
                        "description": "Set to true if a general project activity must be linked to project to allow time tracking.",
                        "default": false
                    },
                    "projectActivities": {
                        "type": "array",
                        "description": "Project Activities",
                        "items": {
                            "$ref": "#/components/schemas/ProjectActivity"
                        }
                    }
                }
            },
            "ListResponseAccountingPeriod": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccountingPeriod"
                        }
                    }
                }
            },
            "ResponseWrapperProjectCategory": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectCategory"
                    }
                }
            },
            "LoggedInUserInfoDTO": {
                "type": "object",
                "properties": {
                    "employeeId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "companyId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "company": {
                        "$ref": "#/components/schemas/Company"
                    },
                    "language": {
                        "type": "string"
                    }
                }
            },
            "TripletexAccountReturn": {
                "type": "object",
                "properties": {
                    "company": {
                        "$ref": "#/components/schemas/Company"
                    },
                    "administrator": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "administratorApiToken": {
                        "$ref": "#/components/schemas/EmployeeToken"
                    },
                    "companyOwnedApiToken": {
                        "$ref": "#/components/schemas/EmployeeToken"
                    },
                    "companyOwnedApiTokenRobotId": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Inventory": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "number": {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    },
                    "isMainInventory": {
                        "type": "boolean",
                        "default": false
                    },
                    "isInactive": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "Stock": {
                "type": "object",
                "properties": {
                    "inventory": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "openingStock": {
                        "type": "number",
                        "readOnly": true
                    },
                    "changesInPeriod": {
                        "type": "number",
                        "readOnly": true
                    },
                    "closingStock": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperTravelExpenseZone": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelExpenseZone"
                    }
                }
            },
            "ListResponsePosting": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    }
                }
            },
            "ParameterizedHeader": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "Bank": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Bank name",
                        "readOnly": true
                    },
                    "bankStatementFileFormatSupport": {
                        "type": "array",
                        "description": "Bank statement file formats supported.",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "enum": [
                                "DNB_CSV",
                                "EIKA_TELEPAY",
                                "SPAREBANK1_TELEPAY",
                                "VISMA_ACCOUNT_STATEMENT",
                                "HANDELSBANKEN_TELEPAY",
                                "SPAREBANKEN_VEST_TELEPAY",
                                "NORDEA_CSV",
                                "TRANSFERWISE",
                                "SPAREBANKEN_SOR_TELEPAY",
                                "SPAREBANKEN_OST_TELEPAY",
                                "DANSKE_BANK_CSV"
                            ]
                        }
                    },
                    "registerNumbers": {
                        "type": "array",
                        "description": "Register numbers belonging to bank.",
                        "readOnly": true,
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                }
            },
            "BankStatement": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "openingBalanceCurrency": {
                        "type": "number",
                        "description": "Opening balance on the account.",
                        "readOnly": true
                    },
                    "closingBalanceCurrency": {
                        "type": "number",
                        "description": "Closing balance on the account.",
                        "readOnly": true
                    },
                    "fileName": {
                        "type": "string",
                        "description": "Bank statement file name.",
                        "readOnly": true
                    },
                    "bank": {
                        "$ref": "#/components/schemas/Bank"
                    },
                    "fromDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "toDate": {
                        "type": "string",
                        "readOnly": true
                    },
                    "transactions": {
                        "type": "array",
                        "description": "Bank transactions tied to the bank statement",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/BankTransaction"
                        }
                    }
                }
            },
            "ResponseWrapperProductUnit": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProductUnit"
                    }
                }
            },
            "AutoLoginPayloadDTO": {
                "type": "object",
                "properties": {
                    "redirectPath": {
                        "type": "string"
                    }
                }
            },
            "DeliveryAddress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "addressLine1": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "addressLine2": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string"
                    },
                    "postalCode": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "city": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "country": {
                        "$ref": "#/components/schemas/Country"
                    },
                    "name": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperTravelExpenseRateCategoryGroup": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelExpenseRateCategoryGroup"
                    }
                }
            },
            "Providers": {
                "type": "object"
            },
            "ResponseWrapperBankReconciliationMatch": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/BankReconciliationMatch"
                    }
                }
            },
            "ApiValidationMessage": {
                "type": "object",
                "properties": {
                    "field": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "rootId": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ListResponseReminder": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reminder"
                        }
                    }
                }
            },
            "ResponseWrapperSalarySettings": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalarySettings"
                    }
                }
            },
            "ResponseWrapperBankStatementBalanceDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/BankStatementBalanceDTO"
                    }
                }
            },
            "FormDataMultiPart": {
                "type": "object",
                "properties": {
                    "contentDisposition": {
                        "$ref": "#/components/schemas/ContentDisposition"
                    },
                    "entity": {
                        "type": "object",
                        "properties": {
                            
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                    },
                    "messageBodyWorkers": {
                        "$ref": "#/components/schemas/MessageBodyWorkers"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MultiPart"
                    },
                    "providers": {
                        "$ref": "#/components/schemas/Providers"
                    },
                    "bodyParts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BodyPart"
                        }
                    },
                    "fields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/FormDataBodyPart"
                            }
                        }
                    },
                    "parameterizedHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ParameterizedHeader"
                            }
                        }
                    }
                }
            },
            "ListResponseProjectSpecificRate": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectSpecificRate"
                        }
                    }
                }
            },
            "MaritimeEmployment": {
                "type": "object",
                "properties": {
                    "shipRegister": {
                        "type": "string",
                        "description": "Define the ship register. NIS: Norwegian International Ship Register, NOR: Norwegian Ordinary Ship Register, FOREIGN: Foreign Ship Register. ",
                        "enum": [
                            "NIS",
                            "NOR",
                            "FOREIGN"
                        ]
                    },
                    "shipType": {
                        "type": "string",
                        "description": "Define the ship type.",
                        "enum": [
                            "OTHER",
                            "DRILLING_PLATFORM",
                            "TOURIST"
                        ]
                    },
                    "tradeArea": {
                        "type": "string",
                        "description": "Define the trade area.",
                        "enum": [
                            "DOMESTIC",
                            "FOREIGN"
                        ]
                    }
                }
            },
            "ResponseWrapperAnnualAccount": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/AnnualAccount"
                    }
                }
            },
            "ResponseWrapperTripDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TripDTO"
                    }
                }
            },
            "ListResponseEmploymentType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EmploymentType"
                        }
                    }
                }
            },
            "ConsumerToken": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "apiConsumer": {
                        "$ref": "#/components/schemas/ApiConsumer"
                    },
                    "token": {
                        "type": "string"
                    },
                    "expirationDate": {
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperTimesheetEntry": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TimesheetEntry"
                    }
                }
            },
            "BankReconciliationAdjustment": {
                "required": [
                    "paymentType"
                ],
                "type": "object",
                "properties": {
                    "paymentType": {
                        "$ref": "#/components/schemas/BankReconciliationPaymentType"
                    },
                    "bankTransactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankTransaction"
                        }
                    },
                    "postingDate": {
                        "type": "string"
                    },
                    "amount": {
                        "minimum": 0,
                        "type": "number"
                    },
                    "postings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    },
                    "bankReconciliationMatch": {
                        "$ref": "#/components/schemas/BankReconciliationMatch"
                    }
                }
            },
            "ResponseWrapperSalesForceEmployeeRole": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalesForceEmployeeRole"
                    }
                }
            },
            "ResponseWrapperLoggedInUserInfoDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/LoggedInUserInfoDTO"
                    }
                }
            },
            "RestrictedEntitlementChangeDTO": {
                "type": "object",
                "properties": {
                    "change": {
                        "type": "string"
                    },
                    "customerId": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Credentials": {
                "required": [
                    "appSecret",
                    "password",
                    "username"
                ],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Users username (email)"
                    },
                    "password": {
                        "type": "string",
                        "description": "Users password"
                    },
                    "appSecret": {
                        "type": "string",
                        "description": "App secret"
                    },
                    "mfaCode": {
                        "type": "integer",
                        "description": "Optional mfa auth code",
                        "format": "int32"
                    }
                }
            },
            "EmploymentDetails": {
                "required": [
                    "percentageOfFullTimeEquivalent"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employment": {
                        "$ref": "#/components/schemas/Employment"
                    },
                    "date": {
                        "type": "string"
                    },
                    "employmentType": {
                        "type": "string",
                        "description": "Define the employment type.",
                        "enum": [
                            "ORDINARY",
                            "MARITIME",
                            "FREELANCE"
                        ]
                    },
                    "maritimeEmployment": {
                        "$ref": "#/components/schemas/MaritimeEmployment"
                    },
                    "remunerationType": {
                        "type": "string",
                        "description": "Define the remuneration type.",
                        "enum": [
                            "MONTHLY_WAGE",
                            "HOURLY_WAGE",
                            "COMMISION_PERCENTAGE",
                            "FEE",
                            "PIECEWORK_WAGE"
                        ]
                    },
                    "workingHoursScheme": {
                        "type": "string",
                        "description": "Define the working hours scheme type. If you enter a value for SHIFT WORK, you must also enter value for shiftDurationHours",
                        "enum": [
                            "NOT_SHIFT",
                            "ROUND_THE_CLOCK",
                            "SHIFT_365",
                            "OFFSHORE_336",
                            "CONTINUOUS",
                            "OTHER_SHIFT"
                        ]
                    },
                    "shiftDurationHours": {
                        "type": "number",
                        "format": "double"
                    },
                    "occupationCode": {
                        "$ref": "#/components/schemas/OccupationCode"
                    },
                    "percentageOfFullTimeEquivalent": {
                        "type": "number",
                        "format": "double"
                    },
                    "annualSalary": {
                        "type": "number",
                        "format": "double"
                    },
                    "hourlyWage": {
                        "type": "number",
                        "format": "double"
                    },
                    "payrollTaxMunicipalityId": {
                        "$ref": "#/components/schemas/Municipality"
                    }
                }
            },
            "ListResponseBankTransaction": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankTransaction"
                        }
                    }
                }
            },
            "ListResponseInvoice": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Invoice"
                        }
                    }
                }
            },
            "AppSpecific": {
                "type": "object",
                "properties": {
                    "hourRegistrationEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "projectEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAllowedToRegisterHours": {
                        "type": "boolean",
                        "default": false
                    },
                    "payrollAccountingEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAuthWageMenu": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAuthMySalary": {
                        "type": "boolean",
                        "default": false
                    },
                    "electronicVouchersEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "travelExpenseEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "documentArchiveEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "archiveReceptionEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsPayslipOnly": {
                        "type": "boolean",
                        "default": false
                    },
                    "travelExpenseRatesEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "taxFreeMileageRatesEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "approveTravelExpenseEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAuthProjectInfo": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAuthTravelAndExpenseApprove": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAuthEmployeeInfo": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAuthVoucherApprove": {
                        "type": "boolean",
                        "default": false
                    },
                    "userIsAuthRemitApprove": {
                        "type": "boolean",
                        "default": false
                    },
                    "vatOnForCompany": {
                        "type": "boolean",
                        "default": false
                    },
                    "taxFreeDietRatesEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "travelDietIgnorePostingEnabled": {
                        "type": "boolean",
                        "default": false
                    },
                    "employeeEnabled": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ListResponseProduct": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Product"
                        }
                    }
                }
            },
            "MaventaStatusDTO": {
                "required": [
                    "company_id",
                    "event",
                    "event_data",
                    "event_timestamp"
                ],
                "type": "object",
                "properties": {
                    "event": {
                        "type": "string",
                        "readOnly": true
                    },
                    "company_id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "event_timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "event_data": {
                        "$ref": "#/components/schemas/MaventaEventDataDTO"
                    }
                }
            },
            "ResponseWrapperModules": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Modules"
                    }
                }
            },
            "ResponseWrapperProduct": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Product"
                    }
                }
            },
            "MileageAllowance": {
                "required": [
                    "date",
                    "departureLocation",
                    "destination"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "travelExpense": {
                        "$ref": "#/components/schemas/TravelExpense"
                    },
                    "rateType": {
                        "$ref": "#/components/schemas/TravelExpenseRate"
                    },
                    "rateCategory": {
                        "$ref": "#/components/schemas/TravelExpenseRateCategory"
                    },
                    "date": {
                        "type": "string"
                    },
                    "departureLocation": {
                        "type": "string"
                    },
                    "destination": {
                        "type": "string"
                    },
                    "km": {
                        "type": "number"
                    },
                    "rate": {
                        "type": "number"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "isCompanyCar": {
                        "type": "boolean",
                        "default": false
                    },
                    "passengers": {
                        "type": "array",
                        "description": "Link to individual passengers.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Passenger"
                        }
                    },
                    "passengerSupplement": {
                        "$ref": "#/components/schemas/MileageAllowance"
                    },
                    "tollCost": {
                        "$ref": "#/components/schemas/Cost"
                    }
                }
            },
            "AccommodationAllowance": {
                "required": [
                    "location"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "travelExpense": {
                        "$ref": "#/components/schemas/TravelExpense"
                    },
                    "rateType": {
                        "$ref": "#/components/schemas/TravelExpenseRate"
                    },
                    "rateCategory": {
                        "$ref": "#/components/schemas/TravelExpenseRateCategory"
                    },
                    "zone": {
                        "type": "string"
                    },
                    "location": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rate": {
                        "type": "number"
                    },
                    "amount": {
                        "type": "number"
                    }
                }
            },
            "ListResponseEmployment": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Employment"
                        }
                    }
                }
            },
            "ListResponsePurchaseOrder": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PurchaseOrder"
                        }
                    }
                }
            },
            "ListResponseTask": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Task"
                        }
                    }
                }
            },
            "ResponseWrapperEmployment": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Employment"
                    }
                }
            },
            "ResponseWrapperListJob": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Job"
                        }
                    }
                }
            },
            "SalarySettings": {
                "required": [
                    "payrollTaxCalcMethod"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "municipality": {
                        "$ref": "#/components/schemas/Municipality"
                    },
                    "payrollTaxCalcMethod": {
                        "type": "string",
                        "description": "Define the Payroll Tax Calculation Method. AA General industries,BB Central government administration and health trusts, CC Exempted business sectors (and undertakings in economic difficulty),DD Agriculture and forestry, fisheries etc., EE Reporting of payroll withholding tax only,GG Road freight transport",
                        "enum": [
                            "AA",
                            "BB",
                            "CC",
                            "DD",
                            "EE",
                            "GG",
                            "JJ",
                            "EMPTY"
                        ]
                    }
                }
            },
            "ListResponseCountry": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Country"
                        }
                    }
                }
            },
            "ResponseWrapperDeliveryAddress": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/DeliveryAddress"
                    }
                }
            },
            "VoucherType": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperBanner": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Banner"
                    }
                }
            },
            "ListResponseInventories": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Inventories"
                        }
                    }
                }
            },
            "JobDetailDTO": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "group": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "jobclass": {
                        "type": "string"
                    },
                    "jobData": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                
                            }
                        }
                    }
                }
            },
            "ListResponseCustomerCategory": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomerCategory"
                        }
                    }
                }
            },
            "LeaveOfAbsence": {
                "required": [
                    "percentage",
                    "startDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "employment": {
                        "$ref": "#/components/schemas/Employment"
                    },
                    "leaveOfAbsenceId": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Existing leave of absence ID used by the current accounting system"
                    },
                    "startDate": {
                        "type": "string"
                    },
                    "endDate": {
                        "type": "string"
                    },
                    "percentage": {
                        "type": "number",
                        "format": "double"
                    },
                    "isWageDeduction": {
                        "type": "boolean",
                        "default": false
                    },
                    "type": {
                        "type": "string",
                        "description": "Define the leave of absence type.",
                        "enum": [
                            "LEAVE_OF_ABSENCE",
                            "FURLOUGH",
                            "PARENTAL_BENEFITS",
                            "MILITARY_SERVICE",
                            "EDUCATIONAL",
                            "COMPASSIONATE"
                        ]
                    }
                }
            },
            "ResponseWrapperCurrency": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Currency"
                    }
                }
            },
            "ListResponseSalesForceAccountInfo": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SalesForceAccountInfo"
                        }
                    }
                }
            },
            "ResponseWrapperActivity": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Activity"
                    }
                }
            },
            "ResponseWrapperDocument": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Document"
                    }
                }
            },
            "ListResponseCompanyHoliday": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CompanyHoliday"
                        }
                    }
                }
            },
            "ResponseWrapperCountry": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Country"
                    }
                }
            },
            "ResponseWrapperEmploymentDetails": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/EmploymentDetails"
                    }
                }
            },
            "ProjectPeriodMonthlyStatus": {
                "type": "object",
                "properties": {
                    "income": {
                        "type": "number",
                        "readOnly": true
                    },
                    "costs": {
                        "type": "number",
                        "readOnly": true
                    },
                    "dateFrom": {
                        "type": "string",
                        "readOnly": true
                    },
                    "dateTo": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperCurrencyExchangeRate": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/CurrencyExchangeRate"
                    }
                }
            },
            "ResponseWrapperDivision": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Division"
                    }
                }
            },
            "ListResponsePersonAutoCompleteDTO": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PersonAutoCompleteDTO"
                        }
                    }
                }
            },
            "HolidayAllowanceEarned": {
                "type": "object",
                "properties": {
                    "year": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "basis": {
                        "type": "number"
                    },
                    "amountExtraHolidayWeek": {
                        "type": "number"
                    }
                }
            },
            "PerDiemCompensation": {
                "required": [
                    "location"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "travelExpense": {
                        "$ref": "#/components/schemas/TravelExpense"
                    },
                    "rateType": {
                        "$ref": "#/components/schemas/TravelExpenseRate"
                    },
                    "rateCategory": {
                        "$ref": "#/components/schemas/TravelExpenseRateCategory"
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "travelExpenseZoneId": {
                        "type": "integer",
                        "description": "Optional travel expense zone id. If not specified, the value from field zone will be used.",
                        "format": "int32"
                    },
                    "overnightAccommodation": {
                        "type": "string",
                        "description": "Set what sort of accommodation was had overnight.",
                        "enum": [
                            "NONE",
                            "HOTEL",
                            "BOARDING_HOUSE_WITHOUT_COOKING",
                            "BOARDING_HOUSE_WITH_COOKING"
                        ]
                    },
                    "location": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rate": {
                        "type": "number"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "isDeductionForBreakfast": {
                        "type": "boolean",
                        "default": false
                    },
                    "isDeductionForLunch": {
                        "type": "boolean",
                        "default": false
                    },
                    "isDeductionForDinner": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ResponseWrapperOrderLine": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/OrderLine"
                    }
                }
            },
            "ListResponseLegacyAddress": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LegacyAddress"
                        }
                    }
                }
            },
            "ContentDisposition": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "creationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modificationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "readDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "TravelExpenseZone": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
                        "readOnly": true
                    },
                    "zoneName": {
                        "maxLength": 255,
                        "type": "string",
                        "readOnly": true
                    },
                    "isDisabled": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "governmentName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The Government name ",
                        "readOnly": true
                    },
                    "continent": {
                        "maxLength": 50,
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "PaymentTypeOut": {
                "required": [
                    "creditAccount",
                    "description"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "description": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "isBruttoWageDeduction": {
                        "type": "boolean",
                        "description": "true if it should be a deduction from the wage. The module PROVISIONSALARY is required to both view and change this setting",
                        "default": false
                    },
                    "creditAccount": {
                        "$ref": "#/components/schemas/Account"
                    },
                    "showIncomingInvoice": {
                        "type": "boolean",
                        "description": "true if the payment type should be available in supplier invoices",
                        "default": false
                    },
                    "showWagePayment": {
                        "type": "boolean",
                        "description": "true if the payment type should be available in wage payments. The wage module is required to both view and change this setting",
                        "default": false
                    },
                    "showVatReturns": {
                        "type": "boolean",
                        "description": "true if the payment type should be available in vat returns",
                        "default": false
                    },
                    "showWagePeriodTransaction": {
                        "type": "boolean",
                        "description": "true if the payment type should be available in period transactionsThe wage module is required to both view and change this setting",
                        "default": false
                    },
                    "requiresSeparateVoucher": {
                        "type": "boolean",
                        "description": "true if a separate voucher is required",
                        "default": false
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "determines in which order the types should be listed. No 1 is listed first",
                        "format": "int32"
                    },
                    "isInactive": {
                        "type": "boolean",
                        "description": "true if the payment type should be hidden from available payment types",
                        "default": false
                    }
                }
            },
            "ResponseWrapperContact": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Contact"
                    }
                }
            },
            "ListResponseVatType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VatType"
                        }
                    }
                }
            },
            "Account": {
                "required": [
                    "name",
                    "number"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "ASSETS",
                            "EQUITY",
                            "LIABILITIES",
                            "OPERATING_REVENUES",
                            "OPERATING_EXPENSES",
                            "INVESTMENT_INCOME",
                            "COST_OF_CAPITAL",
                            "TAX_ON_ORDINARY_ACTIVITIES",
                            "EXTRAORDINARY_INCOME",
                            "EXTRAORDINARY_COST",
                            "TAX_ON_EXTRAORDINARY_ACTIVITIES",
                            "ANNUAL_RESULT",
                            "TRANSFERS_AND_ALLOCATIONS"
                        ]
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "vatLocked": {
                        "type": "boolean",
                        "description": "True if all entries on this account must have the vat type given by vatType.",
                        "default": false
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "isCloseable": {
                        "type": "boolean",
                        "description": "True if it should be possible to close entries on this account and it is possible to filter on open entries.",
                        "default": false
                    },
                    "isApplicableForSupplierInvoice": {
                        "type": "boolean",
                        "description": "True if this account is applicable for supplier invoice registration.",
                        "default": false
                    },
                    "requireReconciliation": {
                        "type": "boolean",
                        "description": "True if this account must be reconciled before the accounting period closure.",
                        "default": false
                    },
                    "isInactive": {
                        "type": "boolean",
                        "description": "Inactive accounts will not show up in UI lists.",
                        "default": false
                    },
                    "isBankAccount": {
                        "type": "boolean",
                        "default": false
                    },
                    "isInvoiceAccount": {
                        "type": "boolean",
                        "default": false
                    },
                    "bankAccountNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "bankAccountCountry": {
                        "$ref": "#/components/schemas/Country"
                    },
                    "bankName": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "bankAccountIBAN": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "bankAccountSWIFT": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperTravelExpenseRateCategory": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TravelExpenseRateCategory"
                    }
                }
            },
            "Invoice": {
                "required": [
                    "invoiceDate",
                    "invoiceDueDate",
                    "orders"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "invoiceNumber": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "If value is set to 0, the invoice number will be generated.",
                        "format": "int32"
                    },
                    "invoiceDate": {
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "invoiceDueDate": {
                        "type": "string"
                    },
                    "kid": {
                        "maxLength": 25,
                        "type": "string",
                        "description": "KID - Kundeidentifikasjonsnummer."
                    },
                    "invoiceComment": {
                        "type": "string",
                        "description": "Comment text for the invoice. This was specified on the order as invoiceComment.",
                        "readOnly": true
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment text for the specific invoice."
                    },
                    "orders": {
                        "type": "array",
                        "description": "Related orders. Only one order per invoice is supported at the moment.",
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        }
                    },
                    "projectInvoiceDetails": {
                        "type": "array",
                        "description": "ProjectInvoiceDetails contains additional information about the invoice, in particular invoices for projects. It contains information about the charged project, the fee amount, extra percent and amount, extra costs, travel expenses, invoice and project comments, akonto amount and values determining if extra costs, akonto and hours should be included. ProjectInvoiceDetails is an object which represents the relation between an invoice and a Project, Orderline and OrderOut object.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/ProjectInvoiceDetails"
                        }
                    },
                    "voucher": {
                        "$ref": "#/components/schemas/Voucher"
                    },
                    "deliveryDate": {
                        "type": "string",
                        "description": "The delivery date.",
                        "readOnly": true
                    },
                    "amount": {
                        "type": "number",
                        "description": "In the company??????s currency, typically NOK.",
                        "readOnly": true
                    },
                    "amountCurrency": {
                        "type": "number",
                        "description": "In the specified currency.",
                        "readOnly": true
                    },
                    "amountExcludingVat": {
                        "type": "number",
                        "description": "Amount excluding VAT (NOK).",
                        "readOnly": true
                    },
                    "amountExcludingVatCurrency": {
                        "type": "number",
                        "description": "Amount excluding VAT in the specified currency.",
                        "readOnly": true
                    },
                    "amountRoundoff": {
                        "type": "number",
                        "description": "Amount of round off to nearest integer.",
                        "readOnly": true
                    },
                    "amountRoundoffCurrency": {
                        "type": "number",
                        "description": "Amount of round off to nearest integer in the specified currency.",
                        "readOnly": true
                    },
                    "amountOutstanding": {
                        "type": "number",
                        "description": "The amount outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
                        "readOnly": true
                    },
                    "amountOutstandingTotal": {
                        "type": "number",
                        "description": "The amount outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
                        "readOnly": true
                    },
                    "sumRemits": {
                        "type": "number",
                        "description": "The sum of all open remittances of the invoice. Remittances are reimbursement payments back to the customer and are therefore relevant to the bookkeeping of the invoice in the accounts.",
                        "readOnly": true
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "isCreditNote": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isCharged": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isApproved": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "postings": {
                        "type": "array",
                        "description": "The invoice postings, which includes a posting for the invoice with a positive amount, and one or more posting for the payments with negative amounts.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    },
                    "reminders": {
                        "type": "array",
                        "description": "Invoice debt collection and reminders.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Reminder"
                        }
                    },
                    "invoiceRemarks": {
                        "type": "string",
                        "description": "Invoice remarks - automatically stops reminder/notice of debt collection if specified."
                    },
                    "ehfSendStatus": {
                        "type": "string",
                        "description": "[Deprecated] EHF (Peppol) send status. This only shows status for historic EHFs.",
                        "enum": [
                            "DO_NOT_SEND",
                            "SEND",
                            "SENT",
                            "SEND_FAILURE_RECIPIENT_NOT_FOUND"
                        ]
                    }
                }
            },
            "TravelDetails": {
                "type": "object",
                "properties": {
                    "isForeignTravel": {
                        "type": "boolean",
                        "default": false
                    },
                    "isDayTrip": {
                        "type": "boolean",
                        "default": false
                    },
                    "isCompensationFromRates": {
                        "type": "boolean",
                        "default": false
                    },
                    "departureDate": {
                        "type": "string"
                    },
                    "returnDate": {
                        "type": "string"
                    },
                    "detailedJourneyDescription": {
                        "type": "string"
                    },
                    "departureFrom": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "destination": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "departureTime": {
                        "maxLength": 20,
                        "type": "string"
                    },
                    "returnTime": {
                        "maxLength": 20,
                        "type": "string"
                    },
                    "purpose": {
                        "type": "string"
                    }
                }
            },
            "ListResponseLedgerAccount": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LedgerAccount"
                        }
                    }
                }
            },
            "ResponseWrapperEmployee": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Employee"
                    }
                }
            },
            "ResponseWrapperHourlyCostAndRate": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/HourlyCostAndRate"
                    }
                }
            },
            "Modules": {
                "type": "object",
                "properties": {
                    "accounting": {
                        "type": "boolean",
                        "description": "Not readable. Only for input.",
                        "default": false
                    },
                    "invoice": {
                        "type": "boolean",
                        "description": "Not readable. Only for input.",
                        "default": false
                    },
                    "salary": {
                        "type": "boolean",
                        "description": "Not readable. Only for input.",
                        "default": false
                    },
                    "salaryStartDate": {
                        "type": "string",
                        "format": "date"
                    },
                    "project": {
                        "type": "boolean",
                        "description": "Not readable. Only for input.",
                        "default": false
                    },
                    "ocr": {
                        "type": "boolean",
                        "default": false
                    },
                    "remit": {
                        "type": "boolean",
                        "default": false
                    },
                    "electronicVouchers": {
                        "type": "boolean",
                        "description": "Not readable. Only for input.",
                        "default": false
                    },
                    "electro": {
                        "type": "boolean",
                        "description": "Not readable. Only for input.",
                        "default": false
                    },
                    "vvs": {
                        "type": "boolean",
                        "description": "Not readable. Only for input.",
                        "default": false
                    },
                    "agro": {
                        "type": "boolean",
                        "default": false
                    },
                    "mamut": {
                        "type": "boolean",
                        "default": false
                    },
                    "approveVoucher": {
                        "type": "boolean",
                        "description": "Only readable for now",
                        "readOnly": true,
                        "default": false
                    }
                }
            },
            "ListResponseProspect": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Prospect"
                        }
                    }
                }
            },
            "ResponseWrapperGoodsReceiptLine": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/GoodsReceiptLine"
                    }
                }
            },
            "ResponseWrapperCompany": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Company"
                    }
                }
            },
            "ResponseWrapperUnreadCountDTO": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/UnreadCountDTO"
                    }
                }
            },
            "ResponseWrapperTimesheetSalaryTypeSpecification": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
                    }
                }
            },
            "EventInfoDescription": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "payloadModel": {
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperProjectPeriodOverallStatus": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectPeriodOverallStatus"
                    }
                }
            },
            "Subscription": {
                "required": [
                    "event",
                    "targetUrl"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "event": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "Event name (from /v2/event) you wish to subscribe to. Form should be: *subject.verb*.",
                        "example": "customer.create"
                    },
                    "targetUrl": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The callback URL used for subscriptions (including authentication tokens). Must be absolute and use HTTPS. Basic authentication is supported.",
                        "example": "https://username:password@myintegration.example/tripletexCallback"
                    },
                    "fields": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The fields in the object delivered with the notification callback, nested as in other API calls.",
                        "example": "id,version,number"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the subscription.",
                        "readOnly": true,
                        "enum": [
                            "ACTIVE",
                            "DISABLED",
                            "DISABLED_TOO_MANY_ERRORS",
                            "DISABLED_RATE_LIMIT_EXCEEDED",
                            "DISABLED_MISUSE"
                        ]
                    },
                    "authHeaderName": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "Custom authentication header name",
                        "example": "Authorization"
                    },
                    "authHeaderValue": {
                        "maxLength": 4096,
                        "type": "string",
                        "description": "Custom authentication header value (write only)",
                        "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
                    }
                }
            },
            "ResponseWrapperAccommodationAllowance": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/AccommodationAllowance"
                    }
                }
            },
            "ProductLine": {
                "required": [
                    "product",
                    "stocktaking"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "stocktaking": {
                        "$ref": "#/components/schemas/Stocktaking"
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "count": {
                        "type": "number"
                    },
                    "unitCostCurrency": {
                        "type": "number",
                        "description": "Unit price purchase (cost) excluding VAT in the order\u0027s currency"
                    },
                    "costCurrency": {
                        "type": "number",
                        "readOnly": true
                    },
                    "comment": {
                        "type": "string"
                    }
                }
            },
            "ListResponseProjectInvoiceDetails": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectInvoiceDetails"
                        }
                    }
                }
            },
            "Municipality": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "number": {
                        "maxLength": 4,
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "county": {
                        "maxLength": 100,
                        "type": "string",
                        "readOnly": true
                    },
                    "payrollTaxZone": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ProjectCategory": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ListResponseInventory": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Inventory"
                        }
                    }
                }
            },
            "ListResponseCompanyAutoCompleteDTO": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CompanyAutoCompleteDTO"
                        }
                    }
                }
            },
            "EmployeeCompanyDTO": {
                "type": "object",
                "properties": {
                    "isDefault": {
                        "type": "boolean",
                        "default": false
                    },
                    "company": {
                        "$ref": "#/components/schemas/Company"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    }
                }
            },
            "ListResponseSalaryTransaction": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SalaryTransaction"
                        }
                    }
                }
            },
            "TravelExpenseRateCategoryGroup": {
                "required": [
                    "fromDate",
                    "toDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "isForeignTravel": {
                        "type": "boolean",
                        "default": false
                    },
                    "fromDate": {
                        "type": "string"
                    },
                    "toDate": {
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperBankStatement": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/BankStatement"
                    }
                }
            },
            "ResponseWrapperEntitlement": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Entitlement"
                    }
                }
            },
            "ResponseWrapperStocktaking": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Stocktaking"
                    }
                }
            },
            "HourSummary": {
                "type": "object",
                "properties": {
                    "sumHours": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "hoursWithPay": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "hourlyWageHoursWithPay": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "nonChargeableHours": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "chargeableHours": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "nonChargeableHoursWithPay": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "budgetChargeableHours": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "standardTime": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "ResponseWrapperProjectOrderLine": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProjectOrderLine"
                    }
                }
            },
            "Country": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "isoAlpha2Code": {
                        "type": "string",
                        "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
                        "readOnly": true
                    },
                    "isoAlpha3Code": {
                        "maxLength": 3,
                        "type": "string",
                        "description": "The ISO 3166-1 Alpha3 code of the country (3 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
                        "readOnly": true
                    },
                    "isoNumericCode": {
                        "type": "string",
                        "description": "The ISO 3166-1 numeric code of the country (3 digits). https://en.wikipedia.org/wiki/ISO_3166-1",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperReminder": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Reminder"
                    }
                }
            },
            "ListResponseTimesheetSalaryTypeSpecification": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TimesheetSalaryTypeSpecification"
                        }
                    }
                }
            },
            "WebHookWrapper": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "object",
                        "properties": {
                            
                        }
                    },
                    "event": {
                        "type": "string"
                    },
                    "subscriptionId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "PerDiemCompensationTransientDTO": {
                "type": "object",
                "properties": {
                    "travelExpense": {
                        "$ref": "#/components/schemas/TravelExpense"
                    },
                    "rateType": {
                        "$ref": "#/components/schemas/TravelExpenseRate"
                    },
                    "rateCategory": {
                        "$ref": "#/components/schemas/TravelExpenseRateCategory"
                    },
                    "countryCode": {
                        "type": "string"
                    },
                    "travelExpenseZoneId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "overnightAccommodation": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "HOTEL",
                            "BOARDING_HOUSE_WITHOUT_COOKING",
                            "BOARDING_HOUSE_WITH_COOKING"
                        ]
                    },
                    "location": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "rate": {
                        "type": "number"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "isDeductionForBreakfast": {
                        "type": "boolean",
                        "default": false
                    },
                    "isDeductionForLunch": {
                        "type": "boolean",
                        "default": false
                    },
                    "isDeductionForDinner": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "ListResponseMileageAllowance": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MileageAllowance"
                        }
                    }
                }
            },
            "ListResponseProjectPeriodMonthlyStatus": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectPeriodMonthlyStatus"
                        }
                    }
                }
            },
            "ResponseWrapperOrder": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Order"
                    }
                }
            },
            "VNTCStatusDTO": {
                "required": [
                    "ExternalMessageId",
                    "ExternalSenderId",
                    "MessageId",
                    "Operator",
                    "Status"
                ],
                "type": "object",
                "properties": {
                    "MessageId": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true
                    },
                    "ExternalSenderId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "ExternalMessageId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "PartCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "Status": {
                        "type": "string",
                        "readOnly": true
                    },
                    "Operator": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ProjectActivity": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "activity": {
                        "$ref": "#/components/schemas/Activity"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "startDate": {
                        "type": "string"
                    },
                    "endDate": {
                        "type": "string"
                    },
                    "isClosed": {
                        "type": "boolean",
                        "default": false
                    },
                    "budgetHours": {
                        "type": "number",
                        "description": "Set budget hours"
                    },
                    "budgetHourlyRateCurrency": {
                        "type": "number",
                        "description": "Set budget hourly rate"
                    },
                    "budgetFeeCurrency": {
                        "type": "number",
                        "description": "Set budget fee"
                    }
                }
            },
            "TripDTO": {
                "type": "object",
                "properties": {
                    "distance": {
                        "type": "number"
                    },
                    "travelTimeInMinutes": {
                        "type": "number"
                    },
                    "sumTollNOK": {
                        "type": "number"
                    }
                }
            },
            "AutoPayMessageDTO": {
                "required": [
                    "message",
                    "messageId",
                    "messageType"
                ],
                "type": "object",
                "properties": {
                    "messageId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "messageType": {
                        "type": "string",
                        "readOnly": true
                    },
                    "message": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "Passenger": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "mileageAllowance": {
                        "$ref": "#/components/schemas/MileageAllowance"
                    }
                }
            },
            "ListResponseProductLine": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProductLine"
                        }
                    }
                }
            },
            "ListResponseSalesForceEmployee": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SalesForceEmployee"
                        }
                    }
                }
            },
            "AltinnCompanyModule": {
                "required": [
                    "altInnId",
                    "altInnPassword"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "altInnId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "altInnPassword": {
                        "maxLength": 100,
                        "minLength": 1,
                        "type": "string"
                    }
                }
            },
            "ListResponseStocktaking": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Stocktaking"
                        }
                    }
                }
            },
            "ListResponseCloseGroup": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CloseGroup"
                        }
                    }
                }
            },
            "ListResponseDivision": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Division"
                        }
                    }
                }
            },
            "SalesForceOpportunity": {
                "type": "object",
                "properties": {
                    "allPrices": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number",
                                "format": "double"
                            }
                        },
                        "description": "A nested map of all active sales modules. The key in the outer map is the sales module, whilest the inner map contains the different pricing types for the given sales module. A pricing type could be PER_USE(10)."
                    },
                    "sumStartupCategory1Users": {
                        "type": "number",
                        "description": "The total startup price for users of category 1.",
                        "format": "double"
                    },
                    "sumServiceCategory1Users": {
                        "type": "number",
                        "description": "The total price per monthly price for users of category 1.",
                        "format": "double"
                    },
                    "listPriceCategory1UserStartup": {
                        "type": "number",
                        "description": "The startup list price per user.",
                        "format": "double"
                    },
                    "listPriceCategory1UserService": {
                        "type": "number",
                        "description": "The monthly list price per user.",
                        "format": "double"
                    },
                    "sumStartup": {
                        "type": "number",
                        "description": "The startup price for the company.",
                        "format": "double"
                    },
                    "sumService": {
                        "type": "number",
                        "description": "The monthly price for the company.",
                        "format": "double"
                    },
                    "sumAdditionalServices": {
                        "type": "number",
                        "description": "The total startup price for additional services.",
                        "format": "double"
                    },
                    "accountantStartupProvision": {
                        "type": "number",
                        "description": "The initial provision for the accountant of the startup price (percentage)",
                        "format": "double"
                    },
                    "accountantMonthlyProvision": {
                        "type": "number",
                        "description": "The monthly provision for the accountant of the monthly price (percentage)",
                        "format": "double"
                    },
                    "noOfUsersPrepaid": {
                        "type": "integer",
                        "description": "The number of users prepaid when creating the company.",
                        "format": "int32"
                    },
                    "noOfUsersIncluded": {
                        "type": "integer",
                        "description": "The number of users included for free in the purchased module.",
                        "format": "int32"
                    }
                }
            },
            "ResponseWrapperTimesheetSettings": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/TimesheetSettings"
                    }
                }
            },
            "SalesForceCountry": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "isoAlpha2Code": {
                        "type": "string",
                        "readOnly": true
                    },
                    "isoAlpha3Code": {
                        "maxLength": 3,
                        "type": "string",
                        "readOnly": true
                    },
                    "isoNumericCode": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ListResponseOrder": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        }
                    }
                }
            },
            "ResponseWrapperAccountingPeriod": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/AccountingPeriod"
                    }
                }
            },
            "ListResponseSearchCompletionDTO": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchCompletionDTO"
                        }
                    }
                }
            },
            "ResponseWrapperCloseGroup": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/CloseGroup"
                    }
                }
            },
            "ResponseWrapperPurchaseOrder": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                    }
                }
            },
            "ListResponseProjectCategory": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectCategory"
                        }
                    }
                }
            },
            "ResponseWrapperLeaveOfAbsence": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/LeaveOfAbsence"
                    }
                }
            },
            "Company": {
                "required": [
                    "address",
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "name": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "startDate": {
                        "type": "string"
                    },
                    "endDate": {
                        "type": "string"
                    },
                    "organizationNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "email": {
                        "maxLength": 254,
                        "type": "string",
                        "format": "email"
                    },
                    "phoneNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "phoneNumberMobile": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "faxNumber": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "NONE",
                            "ENK",
                            "AS",
                            "NUF",
                            "ANS",
                            "DA",
                            "PRE",
                            "KS",
                            "ASA",
                            "BBL",
                            "BRL",
                            "GFS",
                            "SPA",
                            "SF",
                            "IKS",
                            "KF_FKF",
                            "FCD",
                            "EOFG",
                            "BA",
                            "STI",
                            "ORG",
                            "ESEK",
                            "SA",
                            "SAM",
                            "BO",
                            "VPFO",
                            "OS",
                            "Other"
                        ]
                    }
                }
            },
            "PageOptions": {
                "required": [
                    "data"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "key": {
                        "maxLength": 255,
                        "type": "string",
                        "description": "The lookup key for this PageOptions entry"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type that `data` is",
                        "enum": [
                            "IncomingInvoiceViewOptions"
                        ]
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                
                            }
                        },
                        "description": "The actual options as a JSON blob"
                    }
                }
            },
            "ListResponseBankReconciliationAdjustment": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BankReconciliationAdjustment"
                        }
                    }
                }
            },
            "ListResponseMunicipality": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Municipality"
                        }
                    }
                }
            },
            "ResponseWrapperSubscription": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Subscription"
                    }
                }
            },
            "ResponseWrapperProductGroup": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/ProductGroup"
                    }
                }
            },
            "ResponseWrapperPaymentType": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/PaymentType"
                    }
                }
            },
            "ListResponseProjectHourlyRate": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectHourlyRate"
                        }
                    }
                }
            },
            "Job": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "group": {
                        "type": "string"
                    },
                    "stateful": {
                        "type": "boolean",
                        "default": false
                    },
                    "interruptable": {
                        "type": "boolean",
                        "default": false
                    },
                    "jobDetail": {
                        "$ref": "#/components/schemas/JobDetailDTO"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TriggerDTO"
                        }
                    }
                }
            },
            "Order": {
                "required": [
                    "customer",
                    "deliveryDate",
                    "orderDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "attn": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "receiverEmail": {
                        "maxLength": 254,
                        "type": "string",
                        "format": "email"
                    },
                    "overdueNoticeEmail": {
                        "maxLength": 254,
                        "type": "string",
                        "format": "email"
                    },
                    "number": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "reference": {
                        "maxLength": 255,
                        "type": "string"
                    },
                    "ourContact": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "ourContactEmployee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "orderDate": {
                        "type": "string"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "invoiceComment": {
                        "type": "string",
                        "description": "Comment to be displayed in the invoice based on this order. Can be also found in Invoice.invoiceComment on Invoice objects."
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "invoicesDueIn": {
                        "maximum": 10000,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of days/months in which invoices created from this order is due",
                        "format": "int32"
                    },
                    "invoicesDueInType": {
                        "type": "string",
                        "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this order. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
                        "enum": [
                            "DAYS",
                            "MONTHS",
                            "RECURRING_DAY_OF_MONTH"
                        ]
                    },
                    "isShowOpenPostsOnInvoices": {
                        "type": "boolean",
                        "description": "Show account statement - open posts on invoices created from this order",
                        "default": false
                    },
                    "isClosed": {
                        "type": "boolean",
                        "description": "Denotes if this order is closed. A closed order can no longer be invoiced unless it is opened again.",
                        "default": false
                    },
                    "deliveryDate": {
                        "type": "string"
                    },
                    "deliveryAddress": {
                        "$ref": "#/components/schemas/DeliveryAddress"
                    },
                    "deliveryComment": {
                        "type": "string"
                    },
                    "isPrioritizeAmountsIncludingVat": {
                        "type": "boolean",
                        "default": false
                    },
                    "orderLineSorting": {
                        "type": "string",
                        "enum": [
                            "ID",
                            "PRODUCT",
                            "CUSTOM"
                        ]
                    },
                    "orderLines": {
                        "type": "array",
                        "description": "Order lines tied to the order",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/OrderLine"
                        }
                    },
                    "isSubscription": {
                        "type": "boolean",
                        "description": "If true, the order is a subscription, which enables periodical invoicing of order lines. First, create an order with isSubscription=true, then approve it for subscription invoicing with the :approveSubscriptionInvoice method.",
                        "default": false
                    },
                    "subscriptionDuration": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of months/years the subscription shall run",
                        "format": "int32"
                    },
                    "subscriptionDurationType": {
                        "type": "string",
                        "description": "The time unit of subscriptionDuration",
                        "enum": [
                            "MONTHS",
                            "YEAR"
                        ]
                    },
                    "subscriptionPeriodsOnInvoice": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of periods on each invoice",
                        "format": "int32"
                    },
                    "subscriptionPeriodsOnInvoiceType": {
                        "type": "string",
                        "description": "The time unit of subscriptionPeriodsOnInvoice",
                        "readOnly": true,
                        "enum": [
                            "MONTHS"
                        ]
                    },
                    "subscriptionInvoicingTimeInAdvanceOrArrears": {
                        "type": "string",
                        "description": "Invoicing in advance/in arrears",
                        "enum": [
                            "ADVANCE",
                            "ARREARS"
                        ]
                    },
                    "subscriptionInvoicingTime": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Number of days/months invoicing in advance/in arrears",
                        "format": "int32"
                    },
                    "subscriptionInvoicingTimeType": {
                        "type": "string",
                        "description": "The time unit of subscriptionInvoicingTime",
                        "enum": [
                            "DAYS",
                            "MONTHS"
                        ]
                    },
                    "isSubscriptionAutoInvoicing": {
                        "type": "boolean",
                        "description": "Automatic invoicing. Starts when the subscription is approved",
                        "default": false
                    }
                }
            },
            "ResponseWrapperPassenger": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/Passenger"
                    }
                }
            },
            "RemunerationType": {
                "required": [
                    "remunerationType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "remunerationType": {
                        "type": "string",
                        "description": "Defines the remuneration type option. ",
                        "enum": [
                            "MONTHLY_WAGE",
                            "HOURLY_WAGE",
                            "COMMISION_PERCENTAGE",
                            "FEE",
                            "PIECEWORK_WAGE"
                        ]
                    },
                    "nameNO": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "code": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "ResponseWrapperDocumentArchive": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/DocumentArchive"
                    }
                }
            },
            "AutoLogin": {
                "type": "object",
                "properties": {
                    "loginUrl": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "ListResponseEntitlement": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Entitlement"
                        }
                    }
                }
            },
            "SalarySpecification": {
                "required": [
                    "count",
                    "rate",
                    "salaryType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "rate": {
                        "type": "number"
                    },
                    "count": {
                        "type": "number"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "department": {
                        "$ref": "#/components/schemas/Department"
                    },
                    "salaryType": {
                        "$ref": "#/components/schemas/SalaryType"
                    },
                    "payslip": {
                        "$ref": "#/components/schemas/Payslip"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "description": {
                        "type": "string"
                    },
                    "year": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "month": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "amount": {
                        "type": "number"
                    }
                }
            },
            "GoodsReceipt": {
                "required": [
                    "goodsReceiptLines",
                    "registrationDate"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "purchaseOrder": {
                        "$ref": "#/components/schemas/PurchaseOrder"
                    },
                    "registrationDate": {
                        "type": "string"
                    },
                    "receivedBy": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                            "STATUS_OPEN",
                            "STATUS_CONFIRMED"
                        ]
                    },
                    "goodsReceiptLines": {
                        "type": "array",
                        "description": "Purchase Order lines tied to the goods receipt",
                        "items": {
                            "$ref": "#/components/schemas/GoodsReceiptLine"
                        }
                    }
                }
            },
            "SystemMessage": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                }
            },
            "ListResponseMonthlyStatus": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MonthlyStatus"
                        }
                    }
                }
            },
            "ResponseWrapperInteger": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ListResponsePassenger": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Passenger"
                        }
                    }
                }
            },
            "EmployeePeriod": {
                "type": "object",
                "properties": {
                    "incomingVacationBalance": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "outgoingVacationBalance": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "vacationTakenInPeriod": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "vacationTakenThisYear": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    }
                }
            },
            "ListResponseBanner": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Banner"
                        }
                    }
                }
            },
            "ProjectPeriodOverallStatus": {
                "type": "object",
                "properties": {
                    "income": {
                        "type": "number",
                        "readOnly": true
                    },
                    "costs": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "TimesheetEntry": {
                "required": [
                    "activity",
                    "date",
                    "employee",
                    "hours"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "project": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "activity": {
                        "$ref": "#/components/schemas/Activity"
                    },
                    "date": {
                        "type": "string"
                    },
                    "hours": {
                        "type": "number",
                        "format": "double"
                    },
                    "chargeableHours": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "employee": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "timeClocks": {
                        "type": "array",
                        "description": "Link to stop watches on this hour.",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/TimeClock"
                        }
                    },
                    "comment": {
                        "type": "string"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Indicates if the hour can be changed.",
                        "readOnly": true,
                        "default": false
                    },
                    "chargeable": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "invoice": {
                        "$ref": "#/components/schemas/Invoice"
                    },
                    "hourlyRate": {
                        "type": "number",
                        "readOnly": true
                    },
                    "hourlyCost": {
                        "type": "number",
                        "readOnly": true
                    },
                    "hourlyCostPercentage": {
                        "type": "number",
                        "readOnly": true
                    }
                }
            },
            "ResponseWrapperEmployeeToken": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/EmployeeToken"
                    }
                }
            },
            "ListResponseSalesModuleDTO": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SalesModuleDTO"
                        }
                    }
                }
            },
            "Cost": {
                "required": [
                    "amountCurrencyIncVat",
                    "paymentType"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "travelExpense": {
                        "$ref": "#/components/schemas/TravelExpense"
                    },
                    "vatType": {
                        "$ref": "#/components/schemas/VatType"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "costCategory": {
                        "$ref": "#/components/schemas/TravelCostCategory"
                    },
                    "paymentType": {
                        "$ref": "#/components/schemas/TravelPaymentType"
                    },
                    "category": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "rate": {
                        "type": "number"
                    },
                    "amountCurrencyIncVat": {
                        "type": "number"
                    },
                    "amountNOKInclVAT": {
                        "type": "number"
                    },
                    "amountNOKInclVATLow": {
                        "type": "number",
                        "readOnly": true
                    },
                    "amountNOKInclVATMedium": {
                        "type": "number",
                        "readOnly": true
                    },
                    "amountNOKInclVATHigh": {
                        "type": "number",
                        "readOnly": true
                    },
                    "isPaidByEmployee": {
                        "type": "boolean",
                        "readOnly": true,
                        "default": false
                    },
                    "isChargeable": {
                        "type": "boolean",
                        "default": false
                    },
                    "date": {
                        "type": "string"
                    },
                    "predictions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Prediction"
                            }
                        }
                    }
                }
            },
            "ListResponseSalaryType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SalaryType"
                        }
                    }
                }
            },
            "WorkingHoursScheme": {
                "required": [
                    "workingHoursScheme"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "workingHoursScheme": {
                        "type": "string",
                        "description": "Defines the working hours scheme option.",
                        "enum": [
                            "NOT_SHIFT",
                            "ROUND_THE_CLOCK",
                            "SHIFT_365",
                            "OFFSHORE_336",
                            "CONTINUOUS",
                            "OTHER_SHIFT"
                        ]
                    },
                    "nameNO": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "code": {
                        "maxLength": 100,
                        "type": "string"
                    }
                }
            },
            "ListResponseTimesheetEntry": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TimesheetEntry"
                        }
                    }
                }
            },
            "TravelExpenseRate": {
                "required": [
                    "rateCategory",
                    "zone"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "rateCategory": {
                        "$ref": "#/components/schemas/TravelExpenseRateCategory"
                    },
                    "zone": {
                        "type": "string"
                    },
                    "rate": {
                        "type": "number"
                    },
                    "breakfastDeductionRate": {
                        "type": "number"
                    },
                    "lunchDeductionRate": {
                        "type": "number"
                    },
                    "dinnerDeductionRate": {
                        "type": "number"
                    }
                }
            },
            "ResponseWrapperDouble": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "double"
                    }
                }
            },
            "MultiPart": {
                "type": "object",
                "properties": {
                    "contentDisposition": {
                        "$ref": "#/components/schemas/ContentDisposition"
                    },
                    "entity": {
                        "type": "object",
                        "properties": {
                            
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "mediaType": {
                        "$ref": "#/components/schemas/MediaType"
                    },
                    "messageBodyWorkers": {
                        "$ref": "#/components/schemas/MessageBodyWorkers"
                    },
                    "parent": {
                        "$ref": "#/components/schemas/MultiPart"
                    },
                    "providers": {
                        "$ref": "#/components/schemas/Providers"
                    },
                    "bodyParts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BodyPart"
                        }
                    },
                    "parameterizedHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ParameterizedHeader"
                            }
                        }
                    }
                }
            },
            "SalaryTransaction": {
                "required": [
                    "month",
                    "payslips",
                    "year"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string",
                        "description": "Voucher date."
                    },
                    "year": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "month": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "isHistorical": {
                        "type": "boolean",
                        "description": "With historical wage vouchers you can update the wage system with information dated before the opening balance.",
                        "default": false
                    },
                    "paySlipsAvailableDate": {
                        "type": "string",
                        "description": "The date payslips are made available to the employee. Defaults to voucherDate."
                    },
                    "payslips": {
                        "type": "array",
                        "description": "Link to individual payslip objects.",
                        "items": {
                            "$ref": "#/components/schemas/Payslip"
                        }
                    }
                }
            },
            "FlexSummary": {
                "type": "object",
                "properties": {
                    "incomingHourBalance": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "outgoingHourBalance": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    },
                    "change": {
                        "type": "number",
                        "format": "double",
                        "readOnly": true
                    }
                }
            },
            "SalesModuleDTO": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "enum": [
                            "MAMUT",
                            "MAMUT_WITH_WAGE",
                            "AGRO_LICENCE",
                            "AGRO_CLIENT",
                            "AGRO_DOCUMENT_CENTER",
                            "AGRO_INVOICE",
                            "AGRO_WAGE"
                        ]
                    },
                    "costStartDate": {
                        "type": "string"
                    }
                }
            },
            "ListResponseProjectControlForm": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProjectControlForm"
                        }
                    }
                }
            },
            "ListResponseTravelExpenseRate": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TravelExpenseRate"
                        }
                    }
                }
            },
            "Change": {
                "type": "object",
                "properties": {
                    "employeeId": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "changeType": {
                        "type": "string",
                        "enum": [
                            "CREATE",
                            "UPDATE",
                            "DELETE",
                            "LOCKED",
                            "REOPENED",
                            "DO_NOT_SHOW"
                        ]
                    },
                    "periodReopened": {
                        "type": "string"
                    },
                    "periodLocked": {
                        "type": "string"
                    }
                }
            },
            "TripletexAccount": {
                "required": [
                    "accountType",
                    "administratorPassword",
                    "company",
                    "modules",
                    "numberOfVouchers"
                ],
                "type": "object",
                "properties": {
                    "company": {
                        "$ref": "#/components/schemas/Company"
                    },
                    "administrator": {
                        "$ref": "#/components/schemas/Employee"
                    },
                    "accountType": {
                        "type": "string",
                        "description": "Is this a test account or a paying account?",
                        "enum": [
                            "TEST",
                            "PAYING"
                        ]
                    },
                    "modules": {
                        "$ref": "#/components/schemas/Modules"
                    },
                    "administratorPassword": {
                        "type": "string",
                        "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)"
                    },
                    "sendEmails": {
                        "type": "boolean",
                        "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true",
                        "default": false
                    },
                    "autoValidateUserLogin": {
                        "type": "boolean",
                        "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS.",
                        "default": false
                    },
                    "createAdministratorApiToken": {
                        "type": "boolean",
                        "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response.",
                        "default": false
                    },
                    "createCompanyOwnedApiToken": {
                        "type": "boolean",
                        "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response.",
                        "default": false
                    },
                    "mayCreateTripletexAccounts": {
                        "type": "boolean",
                        "description": "Should the company we are creating be able to create new Tripletex accounts?",
                        "default": false
                    },
                    "numberOfVouchers": {
                        "type": "string",
                        "description": "Used to calculate prices.",
                        "enum": [
                            "INTERVAL_0_100",
                            "INTERVAL_101_500",
                            "INTERVAL_0_500",
                            "INTERVAL_501_1000",
                            "INTERVAL_1001_2000",
                            "INTERVAL_2001_3500",
                            "INTERVAL_3501_5000",
                            "INTERVAL_5001_10000",
                            "INTERVAL_UNLIMITED"
                        ]
                    },
                    "chartOfAccountsType": {
                        "type": "string",
                        "description": "The chart of accounts to use for the new company",
                        "enum": [
                            "DEFAULT",
                            "MAMUT_STD_PAYROLL",
                            "MAMUT_NARF_PAYROLL",
                            "AGRO_FORRETNING_PAYROLL",
                            "AGRO_LANDBRUK_PAYROLL",
                            "AGRO_FISKE_PAYROLL",
                            "AGRO_FORSOKSRING_PAYROLL",
                            "AGRO_IDRETTSLAG_PAYROLL",
                            "AGRO_FORENING_PAYROLL"
                        ]
                    },
                    "reseller": {
                        "type": "boolean",
                        "default": false
                    },
                    "accountingOffice": {
                        "type": "boolean",
                        "default": false
                    },
                    "auditor": {
                        "type": "boolean",
                        "default": false
                    }
                }
            },
            "Contact": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "firstName": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "lastName": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string"
                    },
                    "email": {
                        "maxLength": 100,
                        "minLength": 0,
                        "type": "string",
                        "format": "email"
                    },
                    "phoneNumberMobileCountry": {
                        "$ref": "#/components/schemas/Country"
                    },
                    "phoneNumberMobile": {
                        "maxLength": 100,
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/Customer"
                    }
                }
            },
            "Voucher": {
                "required": [
                    "date",
                    "description",
                    "postings"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "date": {
                        "type": "string"
                    },
                    "number": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "System generated number that cannot be changed.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "year": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "System generated number that cannot be changed.",
                        "format": "int32",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "voucherType": {
                        "$ref": "#/components/schemas/VoucherType"
                    },
                    "reverseVoucher": {
                        "$ref": "#/components/schemas/Voucher"
                    },
                    "postings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Posting"
                        }
                    },
                    "document": {
                        "$ref": "#/components/schemas/Document"
                    },
                    "attachment": {
                        "$ref": "#/components/schemas/Document"
                    },
                    "ediDocument": {
                        "$ref": "#/components/schemas/Document"
                    }
                }
            },
            "ListResponseVoucherType": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VoucherType"
                        }
                    }
                }
            },
            "ProductGroupRelation": {
                "required": [
                    "product",
                    "productGroup"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "version": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "changes": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/Change"
                        }
                    },
                    "url": {
                        "type": "string",
                        "readOnly": true
                    },
                    "product": {
                        "$ref": "#/components/schemas/Product"
                    },
                    "productGroup": {
                        "$ref": "#/components/schemas/ProductGroup"
                    }
                }
            },
            "ResponseWrapperSalaryType": {
                "type": "object",
                "properties": {
                    "value": {
                        "$ref": "#/components/schemas/SalaryType"
                    }
                }
            },
            "ListResponseAccommodationAllowance": {
                "type": "object",
                "properties": {
                    "fullResultSize": {
                        "type": "integer",
                        "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
                        "format": "int32"
                    },
                    "from": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "versionDigest": {
                        "type": "string",
                        "description": "Used to know if the paginated list has changed."
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AccommodationAllowance"
                        }
                    }
                }
            },
            "VoucherOptions": {
                "type": "object",
                "properties": {
                    "delete": {
                        "$ref": "#/components/schemas/Delete"
                    }
                }
            }
        },
        "securitySchemes": {
            "tokenAuthScheme": {
                "type": "http",
                "description": "Basic AUTH where username is company/customer id for proxy use (or 0 for default), password should be set to the session token",
                "scheme": "basic"
            }
        }
    }
}
